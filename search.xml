<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>主题2 Shell工具和脚本</title>
      <link href="/2024/03/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2024/03/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul><li>正则表达式</li></ul><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><input disabled type="checkbox"> 能够理解正则表达式的作用</li><li><input disabled type="checkbox"> 能够使用正则表达式的字符类</li><li><input disabled type="checkbox"> 能够使用正则表达式的逻辑运算符</li><li><input disabled type="checkbox"> 能够使用正则表达式的预定义字符类</li><li><input disabled type="checkbox"> 能够使用正则表达式的限定符</li><li><input disabled type="checkbox"> 能够使用正则表达式的分组</li><li><input disabled type="checkbox"> 能够在String的split方法中使用正则表达式</li></ul><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="1-1-正则表达式的概念及演示"><a href="#1-1-正则表达式的概念及演示" class="headerlink" title="1.1 正则表达式的概念及演示"></a>1.1 正则表达式的概念及演示</h2><ul><li>在Java中，我们经常需要验证一些字符串，例如：年龄必须是2位的数字、用户名必须是8位长度而且只能包含大小写字母、数字等。正则表达式就是用来验证各种字符串的规则。它内部描述了一些规则，我们可以验证用户输入的字符串是否匹配这个规则。</li><li>先看一个不使用正则表达式验证的例子：下面的程序让用户输入一个QQ号码，我们要验证：<ul><li>QQ号码必须是5–15位长度</li><li>而且必须全部是数字</li><li>而且首位不能为0</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a08regexdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 假如现在要求校验一个qq号码是否正确。</span></span><br><span class="line"><span class="comment">            规则:6位及20位之内，日不能在开头，必须全部是数字。</span></span><br><span class="line"><span class="comment">            先使用目前所学知识完成校验需求然后体验一下正则表达式检验。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">qq</span> <span class="operator">=</span><span class="string">&quot;1234567890&quot;</span>;</span><br><span class="line">        System.out.println(checkQQ(qq));</span><br><span class="line"></span><br><span class="line">        System.out.println(qq.matches(<span class="string">&quot;[1-9]\\d&#123;5,19&#125;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">checkQQ</span><span class="params">(String qq)</span> &#123;</span><br><span class="line">        <span class="comment">//规则:6位及20位之内，日不能在开头，必须全部是数字 。</span></span><br><span class="line">        <span class="comment">//核心思想:</span></span><br><span class="line">        <span class="comment">//先把异常数据进行过滤</span></span><br><span class="line">        <span class="comment">//下面的就是满足要求的数据了。</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> qq.length();</span><br><span class="line">        <span class="keyword">if</span> (len &lt; <span class="number">6</span> || len &gt; <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//0不能在开头</span></span><br><span class="line">        <span class="keyword">if</span> (qq.startsWith(<span class="string">&quot;0&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//必须全部是数字</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; qq.length(); i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> qq.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c &lt; <span class="string">&#x27;0&#x27;</span> | c &gt; <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用正则表达式验证：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">qq</span> <span class="operator">=</span><span class="string">&quot;1234567890&quot;</span>;</span><br><span class="line">        System.out.println(qq.matches(<span class="string">&quot;[1-9]\\d&#123;5,19&#125;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>我们接下来就重点学习怎样写正则表达式</strong></p><h2 id="1-2-正则表达式-字符类"><a href="#1-2-正则表达式-字符类" class="headerlink" title="1.2 正则表达式-字符类"></a>1.2 正则表达式-字符类</h2><ul><li>语法示例：</li></ul><ol><li>[abc]：代表a或者b，或者c字符中的一个。</li><li>[^abc]：代表除a,b,c以外的任何字符。</li><li>[a-z]：代表a-z的所有小写字符中的一个。</li><li>[A-Z]：代表A-Z的所有大写字符中的一个。</li><li>[0-9]：代表0-9之间的某一个数字字符。</li><li>[a-zA-Z0-9]：代表a-z或者A-Z或者0-9之间的任意一个字符。</li><li>[a-dm-p]：a 到 d 或 m 到 p之间的任意一个字符。</li></ol><ul><li>代码示例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a08regexdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//public boolean matches(String regex):判断是否与正则表达式匹配，匹配返回true</span></span><br><span class="line">        <span class="comment">// 只能是a b c</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------1-------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[abc]&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;[abc]&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不能出现a b c</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------2-------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[^abc]&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;[^abc]&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;zz&quot;</span>.matches(<span class="string">&quot;[^abc]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;zz&quot;</span>.matches(<span class="string">&quot;[^abc][^abc]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// a到zA到Z(包括头尾的范围)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------3-------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-zA-z]&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;[a-zA-z]&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;aa&quot;</span>.matches(<span class="string">&quot;[a-zA-z]&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;zz&quot;</span>.matches(<span class="string">&quot;[a-zA-Z]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;zz&quot;</span>.matches(<span class="string">&quot;[a-zA-Z][a-zA-Z]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-zA-Z]&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&quot;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// [a-d[m-p]] a到d，或m到p</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------4-------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;p&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;e&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-d[m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// [a-z&amp;&amp;[def]] a-z和def的交集。为:d，e，f</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------5------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-z&amp;[def]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;d&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[def]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[def]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// [a-z&amp;&amp;[^bc]] a-z和非bc的交集。(等同于[ad-z])</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------6------------_&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;b&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^bc]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// [a-z&amp;&amp;[^m-p]] a到z和除了m到p的交集。(等同于[a-1q-z])</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------7-------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^m-p]]&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;m&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;0&quot;</span>.matches(<span class="string">&quot;[a-z&amp;&amp;[^m-p]]&quot;</span>)); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-3-正则表达式-逻辑运算符"><a href="#1-3-正则表达式-逻辑运算符" class="headerlink" title="1.3 正则表达式-逻辑运算符"></a>1.3 正则表达式-逻辑运算符</h2><ul><li>语法示例：<ol><li>&amp;&amp;：并且</li><li>|    ：或者</li><li>\  ：转义字符</li></ol></li><li>代码示例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;had&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.要求字符串是小写辅音字符开头，后跟ad</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;[a-z&amp;&amp;[^aeiou]]ad&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;1.&quot;</span> + str.matches(regex));</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.要求字符串是aeiou中的某个字符开头，后跟ad</span></span><br><span class="line">regex = <span class="string">&quot;[a|e|i|o|u]ad&quot;</span>;<span class="comment">//这种写法相当于：regex = &quot;[aeiou]ad&quot;;</span></span><br><span class="line">System.out.println(<span class="string">&quot;2.&quot;</span> + str.matches(regex));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a08regexdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// \ 转义字符 改变后面那个字符原本的含义</span></span><br><span class="line">        <span class="comment">//练习:以字符串的形式打印一个双引号</span></span><br><span class="line">        <span class="comment">//&quot;在Java中表示字符串的开头或者结尾</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//此时\表示转义字符，改变了后面那个双引号原本的含义</span></span><br><span class="line">        <span class="comment">//把他变成了一个普普通通的双引号而已。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// \表示转义字符</span></span><br><span class="line">        <span class="comment">//两个\的理解方式：前面的\是一个转义字符，改变了后面\原本的含义，把他变成一个普普通通的\而已。</span></span><br><span class="line">        System.out.println(<span class="string">&quot;c:Users\\moon\\IdeaProjects\\basic-code\\myapi\\src\\com\\itheima\\a08regexdemo\\RegexDemo1.java&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-4-正则表达式-预定义字符"><a href="#1-4-正则表达式-预定义字符" class="headerlink" title="1.4 正则表达式-预定义字符"></a>1.4 正则表达式-预定义字符</h2><ul><li>语法示例：<ol><li>“.” ： 匹配任何字符。</li><li>“\d”：任何数字[0-9]的简写；</li><li>“\D”：任何非数字[^0-9]的简写；</li><li>“\s”： 空白字符：[ \t\n\x0B\f\r] 的简写</li><li>“\S”： 非空白字符：[^\s] 的简写</li><li>“\w”：单词字符：[a-zA-Z_0-9]的简写</li><li>“\W”：非单词字符：[^\w]</li></ol></li><li>代码示例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//.表示任意一个字符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你&quot;</span>.matches(<span class="string">&quot;..&quot;</span>)); <span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你&quot;</span>.matches(<span class="string">&quot;.&quot;</span>)); <span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你a&quot;</span>.matches(<span class="string">&quot;..&quot;</span>));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// \\d 表示任意的一个数字</span></span><br><span class="line">        <span class="comment">// \\d只能是任意的一位数字</span></span><br><span class="line">        <span class="comment">// 简单来记:两个\表示一个\</span></span><br><span class="line">        System.out.println(<span class="string">&quot;a&quot;</span>.matches(<span class="string">&quot;\\d&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;3&quot;</span>.matches(<span class="string">&quot;\\d&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;333&quot;</span>.matches(<span class="string">&quot;\\d&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//\\w只能是一位单词字符[a-zA-Z_0-9]</span></span><br><span class="line">        System.out.println(<span class="string">&quot;z&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;2&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;21&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>)); <span class="comment">// false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你&quot;</span>.matches(<span class="string">&quot;\\w&quot;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 非单词字符</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你&quot;</span>.matches(<span class="string">&quot;\\W&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---------------------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 以上正则匹配只能校验单个字符。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须是数字 字母 下划线 至少 6位</span></span><br><span class="line">        System.out.println(<span class="string">&quot;2442fsfsf&quot;</span>.matches(<span class="string">&quot;\\w&#123;6,&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;244f&quot;</span>.matches(<span class="string">&quot;\\w&#123;6,&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须是数字和字符 必须是4位</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23dF&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&#123;4&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23 F&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&#123;4&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23dF&quot;</span>.matches(<span class="string">&quot;[\\w&amp;&amp;[^_]]&#123;4&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23_F&quot;</span>.matches(<span class="string">&quot;[\\w&amp;&amp;[^_]]&#123;4&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-正则表达式-数量词"><a href="#1-5-正则表达式-数量词" class="headerlink" title="1.5 正则表达式-数量词"></a>1.5 正则表达式-数量词</h2><ul><li>语法示例：<ol><li>X? : 0次或1次</li><li>X* : 0次到多次</li><li>X+ : 1次或多次</li><li>X{n} : 恰好n次</li><li>X{n,} : 至少n次</li><li>X{n,m}: n到m次(n和m都是包含的)</li></ol></li><li>代码示例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"> <span class="comment">// 必须是数字 字母 下划线 至少 6位</span></span><br><span class="line">        System.out.println(<span class="string">&quot;2442fsfsf&quot;</span>.matches(<span class="string">&quot;\\w&#123;6,&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;244f&quot;</span>.matches(<span class="string">&quot;\\w&#123;6,&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须是数字和字符 必须是4位</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23dF&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&#123;4&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23 F&quot;</span>.matches(<span class="string">&quot;[a-zA-Z0-9]&#123;4&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23dF&quot;</span>.matches(<span class="string">&quot;[\\w&amp;&amp;[^_]]&#123;4&#125;&quot;</span>));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;23_F&quot;</span>.matches(<span class="string">&quot;[\\w&amp;&amp;[^_]]&#123;4&#125;&quot;</span>));<span class="comment">//false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-6-正则表达式练习1"><a href="#1-6-正则表达式练习1" class="headerlink" title="1.6 正则表达式练习1"></a>1.6 正则表达式练习1</h2><p>需求：</p><p>​请编写正则表达式验证用户输入的手机号码是否满足要求。</p><p>​请编写正则表达式验证用户输入的邮箱号是否满足要求。</p><p>​请编写正则表达式验证用户输入的电话号码是否满足要求。</p><p>​验证手机号码 13112345678 13712345667 13945679027 139456790271</p><p>​验证座机电话号码 020-2324242 02122442 027-42424 0712-3242434</p><p>​验证邮箱号码 <a href="mailto:&#51;&#x32;&#x33;&#50;&#51;&#x32;&#x33;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#x6d;">&#51;&#x32;&#x33;&#50;&#51;&#x32;&#x33;&#64;&#x71;&#x71;&#x2e;&#99;&#x6f;&#x6d;</a> <a href="mailto:&#x7a;&#x68;&#97;&#x6e;&#103;&#115;&#97;&#x6e;&#64;&#x69;&#x74;&#x63;&#x61;&#115;&#116;&#x2e;&#x63;&#x6e;&#x6e;">&#x7a;&#x68;&#97;&#x6e;&#103;&#115;&#97;&#x6e;&#64;&#x69;&#x74;&#x63;&#x61;&#115;&#116;&#x2e;&#x63;&#x6e;&#x6e;</a> <a href="mailto:&#100;&#x6c;&#x65;&#x69;&#x30;&#48;&#48;&#x39;&#x40;&#x31;&#x36;&#51;&#46;&#99;&#111;&#x6d;">&#100;&#x6c;&#x65;&#x69;&#x30;&#48;&#48;&#x39;&#x40;&#x31;&#x36;&#51;&#46;&#99;&#111;&#x6d;</a> <a href="mailto:&#x64;&#108;&#x65;&#105;&#x30;&#x30;&#x30;&#x39;&#64;&#112;&#x63;&#x69;&#46;&#x63;&#x6f;&#x6d;&#x2e;&#x63;&#x6e;">&#x64;&#108;&#x65;&#105;&#x30;&#x30;&#x30;&#x39;&#64;&#112;&#x63;&#x69;&#46;&#x63;&#x6f;&#x6d;&#x2e;&#x63;&#x6e;</a></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a08regexdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            需求</span></span><br><span class="line"><span class="comment">            请编写正则表达式验证用户输入的手机号码是否满足要求。请编写正则表达式验证用户输入的邮箱号是否满足要求。请编写正则表达式验证用户输入的电话号码是否满足要求。</span></span><br><span class="line"><span class="comment">            验证手机号码 13112345678 13712345667 13945679027 139456790271</span></span><br><span class="line"><span class="comment">            验证座机电话号码 020-2324242 02122442 027-42424 0712-3242434</span></span><br><span class="line"><span class="comment">            验证邮箱号码 3232323@qq.com zhangsan@itcast.cnn dlei0009@163.com dlei0009@pci.com.cn</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//心得:</span></span><br><span class="line">        <span class="comment">//拿着一个正确的数据，从左到右依次去写。</span></span><br><span class="line">        <span class="comment">//13112345678</span></span><br><span class="line">        <span class="comment">//分成三部分:</span></span><br><span class="line">        <span class="comment">//第一部分:1 表示手机号码只能以1开头</span></span><br><span class="line">        <span class="comment">//第二部分:[3-9] 表示手机号码第二位只能是3-9之间的</span></span><br><span class="line">        <span class="comment">//第三部分:\\d&#123;9&#125; 表示任意数字可以出现9次，也只能出现9次</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex1</span> <span class="operator">=</span> <span class="string">&quot;1[3-9]\\d&#123;9&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;13112345678&quot;</span>.matches(regex1));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;13712345667&quot;</span>.matches(regex1));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;13945679027&quot;</span>.matches(regex1));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;139456790271&quot;</span>.matches(regex1));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//座机电话号码</span></span><br><span class="line">        <span class="comment">//020-2324242 02122442 027-42424 0712-3242434</span></span><br><span class="line">        <span class="comment">//思路:</span></span><br><span class="line">        <span class="comment">//在书写座机号正则的时候需要把正确的数据分为三部分</span></span><br><span class="line">        <span class="comment">//一:区号@\\d&#123;2,3&#125;</span></span><br><span class="line">        <span class="comment">//      0:表示区号一定是以0开头的</span></span><br><span class="line">        <span class="comment">//      \\d&#123;2,3&#125;:表示区号从第二位开始可以是任意的数字，可以出现2到3次。</span></span><br><span class="line">        <span class="comment">//二:- ?表示次数，日次或一次</span></span><br><span class="line">        <span class="comment">//三:号码 号码的第一位也不能以日开头，从第二位开始可以是任意的数字，号码的总长度:5-10位</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex2</span> <span class="operator">=</span> <span class="string">&quot;0\\d&#123;2,3&#125;-?[1-9]\\d&#123;4,9&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;020-2324242&quot;</span>.matches(regex2));</span><br><span class="line">        System.out.println(<span class="string">&quot;02122442&quot;</span>.matches(regex2));</span><br><span class="line">        System.out.println(<span class="string">&quot;027-42424&quot;</span>.matches(regex2));</span><br><span class="line">        System.out.println(<span class="string">&quot;0712-3242434&quot;</span>.matches(regex2));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//邮箱号码</span></span><br><span class="line">        <span class="comment">//3232323@qq.com zhangsan@itcast.cnn dlei0009@163.com dlei0009@pci.com.cn</span></span><br><span class="line">        <span class="comment">//思路:</span></span><br><span class="line">        <span class="comment">//在书写邮箱号码正则的时候需要把正确的数据分为三部分</span></span><br><span class="line">        <span class="comment">//第一部分:@的左边 \\w+</span></span><br><span class="line">        <span class="comment">//      任意的字母数字下划线，至少出现一次就可以了</span></span><br><span class="line">        <span class="comment">//第二部分:@ 只能出现一次</span></span><br><span class="line">        <span class="comment">//第三部分:</span></span><br><span class="line">        <span class="comment">//      3.1         .的左边[\\w&amp;&amp;[^_]]&#123;2,6&#125;</span></span><br><span class="line">        <span class="comment">//                  任意的字母加数字，总共出现2-6次(此时不能出现下划线)</span></span><br><span class="line">        <span class="comment">//      3.2         . \\.</span></span><br><span class="line">        <span class="comment">//      3.3         大写字母，小写字母都可以，只能出现2-3次[a-zA-Z]&#123;2,3&#125;</span></span><br><span class="line">        <span class="comment">//      我们可以把3.2和3.3看成一组，这一组可以出现1次或者两次</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex3</span> <span class="operator">=</span> <span class="string">&quot;\\w+@[\\w&amp;&amp;[^_]]&#123;2,6&#125;(\\.[a-zA-Z]&#123;2,3&#125;)&#123;1,2&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;3232323@qq.com&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;zhangsan@itcast.cnn&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;dlei0009@163.com&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;dlei0009@pci.com.cn&quot;</span>.matches(regex3));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//24小时的正则表达式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex4</span> <span class="operator">=</span> <span class="string">&quot;([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;23:11:11&quot;</span>.matches(regex4));</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex5</span> <span class="operator">=</span> <span class="string">&quot;([01]\\d 2[0-3])(:[0-5]\\d)&#123;2&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;23:11:11&quot;</span>.matches(regex5));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-7-正则表达式练习2"><a href="#1-7-正则表达式练习2" class="headerlink" title="1.7 正则表达式练习2"></a>1.7 正则表达式练习2</h2><p>需求<br>    请编写正则表达式验证用户名是否满足要求。要求:大小写字母，数字，下划线一共4-16位<br>    请编写正则表达式验证身份证号码是否满足要求。<br>    简单要求:<br>            18位，前17位任意数字，最后一位可以是数字可以是大写或小写的x<br>    复杂要求:<br>            按照身份证号码的格式严格要求。</p><p>​身份证号码:<br>​41080119930228457x<br>​510801197609022309<br>​15040119810705387X<br>​130133197204039024<br>​430102197606046442</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            正则表达式练习:</span></span><br><span class="line"><span class="comment">            需求</span></span><br><span class="line"><span class="comment">            请编写正则表达式验证用户名是否满足要求。要求:大小写字母，数字，下划线一共4-16位</span></span><br><span class="line"><span class="comment">            请编写正则表达式验证身份证号码是否满足要求。</span></span><br><span class="line"><span class="comment">            简单要求:</span></span><br><span class="line"><span class="comment">                18位，前17位任意数字，最后一位可以是数字可以是大写或小写的x</span></span><br><span class="line"><span class="comment">            复杂要求:</span></span><br><span class="line"><span class="comment">                按照身份证号码的格式严格要求。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            身份证号码:</span></span><br><span class="line"><span class="comment">            41080119930228457x</span></span><br><span class="line"><span class="comment">            510801197609022309</span></span><br><span class="line"><span class="comment">            15040119810705387X</span></span><br><span class="line"><span class="comment">            130133197204039024 I</span></span><br><span class="line"><span class="comment">            430102197606046442</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//用户名要求:大小写字母，数字，下划线一共4-16位</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex1</span> <span class="operator">=</span> <span class="string">&quot;\\w&#123;4,16&#125;&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;zhangsan&quot;</span>.matches(regex1));</span><br><span class="line">        System.out.println(<span class="string">&quot;lisi&quot;</span>.matches(regex1));</span><br><span class="line">        System.out.println(<span class="string">&quot;wangwu&quot;</span>.matches(regex1));</span><br><span class="line">        System.out.println(<span class="string">&quot;$123&quot;</span>.matches(regex1));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//身份证号码的简单校验:</span></span><br><span class="line">        <span class="comment">//18位，前17位任意数字，最后一位可以是数字可以是大写或小写的x</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex2</span> <span class="operator">=</span> <span class="string">&quot;[1-9]\\d&#123;16&#125;(\\d|x|x)&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex3</span> <span class="operator">=</span> <span class="string">&quot;[1-9]\\d&#123;16&#125;[\\dXx]&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex5</span> <span class="operator">=</span> <span class="string">&quot;[1-9]\\d&#123;16&#125;(\\d(?i)x)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;41080119930228457x&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;510801197609022309&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;15040119810705387X&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;130133197204039024&quot;</span>.matches(regex3));</span><br><span class="line">        System.out.println(<span class="string">&quot;430102197606046442&quot;</span>.matches(regex3));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//忽略大小写的书写方式</span></span><br><span class="line">        <span class="comment">//在匹配的时候忽略abc的大小写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex4</span> <span class="operator">=</span> <span class="string">&quot;a((?i)b)c&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>.matches(regex4));<span class="comment">//true</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ABC&quot;</span>.matches(regex4));<span class="comment">//false</span></span><br><span class="line">        System.out.println(<span class="string">&quot;aBc&quot;</span>.matches(regex4));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//身份证号码的严格校验</span></span><br><span class="line">        <span class="comment">//编写正则的小心得:</span></span><br><span class="line">        <span class="comment">//第一步:按照正确的数据进行拆分</span></span><br><span class="line">        <span class="comment">//第二步:找每一部分的规律，并编写正则表达式</span></span><br><span class="line">        <span class="comment">//第三步:把每一部分的正则拼接在一起，就是最终的结果</span></span><br><span class="line">        <span class="comment">//书写的时候:从左到右去书写。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//410801 1993 02 28 457x</span></span><br><span class="line">        <span class="comment">//前面6位:省份，市区，派出所等信息，第一位不能是0，后面5位是任意数字       [1-9]\\d&#123;5&#125;</span></span><br><span class="line">        <span class="comment">//年的前半段: 18 19 20                                                (18|19|20)</span></span><br><span class="line">        <span class="comment">//年的后半段: 任意数字出现两次                                           \\d&#123;2&#125;</span></span><br><span class="line">        <span class="comment">//月份: 01~ 09 10 11 12                                               (@[1-9]|1[0-2])</span></span><br><span class="line">        <span class="comment">//日期: 01~09 10~19 20~29 30 31                                       (0[1-9]|[12]\\d|3[01])</span></span><br><span class="line">        <span class="comment">//后面四位: 任意数字出现3次 最后一位可以是数字也可以是大写x或者小写x        \\d&#123;3&#125;[\\dXx]</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex6</span> <span class="operator">=</span> <span class="string">&quot;[1-9]\\d&#123;5&#125;(18|19|20)\\d&#123;2&#125;(@[1-9]|1[0-2])(@[1-9]|[12]\\d|3[01])\\d&#123;3&#125;[\\dxXx]&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;41080119930228457x&quot;</span>.matches(regex6));</span><br><span class="line">        System.out.println(<span class="string">&quot;510801197609022309&quot;</span>.matches(regex6));</span><br><span class="line">        System.out.println(<span class="string">&quot;15040119810705387X&quot;</span>.matches(regex6));</span><br><span class="line">        System.out.println(<span class="string">&quot;130133197204039024&quot;</span>.matches(regex6));</span><br><span class="line">        System.out.println(<span class="string">&quot;430102197606046442&quot;</span>.matches(regex6));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-8-本地数据爬取"><a href="#1-8-本地数据爬取" class="headerlink" title="1.8 本地数据爬取"></a>1.8 本地数据爬取</h2><p>Pattern：表示正则表达式<br>Matcher：文本匹配器，作用按照正则表达式的规则去读取字符串，从头开始读取。<br>             在大串中去找符合匹配规则的子串。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a08regexdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/* 有如下文本，请按照要求爬取数据。</span></span><br><span class="line"><span class="comment">                Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，</span></span><br><span class="line"><span class="comment">                因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台</span></span><br><span class="line"><span class="comment">                要求:找出里面所有的JavaXX</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，&quot;</span> +</span><br><span class="line">                <span class="string">&quot;因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取正则表达式的对象</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;Java\\d&#123;0,2&#125;&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取文本匹配器的对象</span></span><br><span class="line">        <span class="comment">//拿着m去读取str，找符合p规则的子串</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用循环获取</span></span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> m.group();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="comment">//Pattern:表示正则表达式</span></span><br><span class="line">        <span class="comment">//Matcher: 文本匹配器，作用按照正则表达式的规则去读取字符串，从头开始读取。</span></span><br><span class="line">        <span class="comment">//          在大串中去找符合匹配规则的子串。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取正则表达式的对象</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;Java\\d&#123;0,2&#125;&quot;</span>);</span><br><span class="line">        <span class="comment">//获取文本匹配器的对象</span></span><br><span class="line">        <span class="comment">//m:文本匹配器的对象</span></span><br><span class="line">        <span class="comment">//str:大串</span></span><br><span class="line">        <span class="comment">//p:规则</span></span><br><span class="line">        <span class="comment">//m要在str中找符合p规则的小串</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(str);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拿着文本匹配器从头开始读取，寻找是否有满足规则的子串</span></span><br><span class="line">        <span class="comment">//如果没有，方法返回false</span></span><br><span class="line">        <span class="comment">//如果有，返回true。在底层记录子串的起始索引和结束索引+1</span></span><br><span class="line">        <span class="comment">// 0,4</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> m.find();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方法底层会根据find方法记录的索引进行字符串的截取</span></span><br><span class="line">        <span class="comment">// substring(起始索引，结束索引);包头不包尾</span></span><br><span class="line">        <span class="comment">// (0,4)但是不包含4索引</span></span><br><span class="line">        <span class="comment">// 会把截取的小串进行返回。</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> m.group();</span><br><span class="line">        System.out.println(s1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二次在调用find的时候，会继续读取后面的内容</span></span><br><span class="line">        <span class="comment">//读取到第二个满足要求的子串，方法会继续返回true</span></span><br><span class="line">        <span class="comment">//并把第二个子串的起始索引和结束索引+1，进行记录</span></span><br><span class="line">        b = m.find();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第二次调用group方法的时候，会根据find方法记录的索引再次截取子串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> m.group();</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-9-网络数据爬取（了解）"><a href="#1-9-网络数据爬取（了解）" class="headerlink" title="1.9 网络数据爬取（了解）"></a>1.9 网络数据爬取（了解）</h2><p>需求：</p><p>​把连接:<a href="https://m.sengzan.com/jiaoyu/29104.html?ivk">https://m.sengzan.com/jiaoyu/29104.html?ivk</a> sa&#x3D;1025883i中所有的身份证号码都爬取出来。</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">/* 扩展需求2:</span></span><br><span class="line"><span class="comment">            把连接:https://m.sengzan.com/jiaoyu/29104.html?ivk sa=1025883i</span></span><br><span class="line"><span class="comment">            中所有的身份证号码都爬取出来。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个URL对象</span></span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://m.sengzan.com/jiaoyu/29104.html?ivk sa=1025883i&quot;</span>);</span><br><span class="line">        <span class="comment">//连接上这个网址</span></span><br><span class="line">        <span class="comment">//细节:保证网络是畅通</span></span><br><span class="line">        <span class="type">URLConnection</span> <span class="variable">conn</span> <span class="operator">=</span> url.openConnection();<span class="comment">//创建一个对象去读取网络中的数据</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(conn.getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        <span class="comment">//获取正则表达式的对象pattern</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;[1-9]\\d&#123;17&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(regex);<span class="comment">//在读取的时候每次读一整行</span></span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//拿着文本匹配器的对象matcher按照pattern的规则去读取当前的这一行信息</span></span><br><span class="line">            <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(line);</span><br><span class="line">            <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">                System.out.println(matcher.group());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-10-爬取数据练习"><a href="#1-10-爬取数据练习" class="headerlink" title="1.10 爬取数据练习"></a>1.10 爬取数据练习</h2><p>需求：</p><p>​把下面文本中的座机电话，邮箱，手机号，热线都爬取出来。</p><p>来黑马程序员学习Java，手机号:18512516758，18512508907或者联系邮箱:<a href="mailto:&#x62;&#111;&#110;&#105;&#x75;&#x40;&#x69;&#x74;&#99;&#97;&#115;&#x74;&#x2e;&#x63;&#110;">&#x62;&#111;&#110;&#105;&#x75;&#x40;&#x69;&#x74;&#99;&#97;&#115;&#x74;&#x2e;&#x63;&#110;</a>，座机电话:01036517895，010-98951256邮箱:<a href="mailto:&#98;&#x6f;&#x7a;&#97;&#x69;&#64;&#105;&#116;&#99;&#97;&#115;&#116;&#46;&#x63;&#110;">&#98;&#x6f;&#x7a;&#97;&#x69;&#64;&#105;&#116;&#99;&#97;&#115;&#116;&#46;&#x63;&#110;</a>，热线电话:400-618-9090 ，400-618-4000，4006184000，4006189090手机号的正则表达式:1[3-9]\d{9}</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.a08regexdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            需求:把下面文本中的座机电话，邮箱，手机号，热线都爬取出来。</span></span><br><span class="line"><span class="comment">            来黑马程序员学习Java，</span></span><br><span class="line"><span class="comment">            手机号:18512516758，18512508907或者联系邮箱:boniu@itcast.cn，</span></span><br><span class="line"><span class="comment">            座机电话:01036517895，010-98951256邮箱:bozai@itcast.cn，</span></span><br><span class="line"><span class="comment">            热线电话:400-618-9090 ，400-618-4000，4006184000，4006189090</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            手机号的正则表达式:1[3-9]\d&#123;9&#125;</span></span><br><span class="line"><span class="comment">            邮箱的正则表达式:\w+@[\w&amp;&amp;[^_]]&#123;2,6&#125;(\.[a-zA-Z]&#123;2,3&#125;)&#123;1,2&#125;座机电话的正则表达式:0\d&#123;2,3&#125;-?[1-9]\d&#123;4,9&#125;</span></span><br><span class="line"><span class="comment">            热线电话的正则表达式:400-?[1-9]\\d&#123;2&#125;-?[1-9]\\d&#123;3&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;来黑马程序员学习Java，&quot;</span> +</span><br><span class="line">                <span class="string">&quot;电话:18512516758，18512508907&quot;</span> + <span class="string">&quot;或者联系邮箱:boniu@itcast.cn，&quot;</span> +</span><br><span class="line">                <span class="string">&quot;座机电话:01036517895，010-98951256&quot;</span> + <span class="string">&quot;邮箱:bozai@itcast.cn，&quot;</span> +</span><br><span class="line">                <span class="string">&quot;热线电话:400-618-9090 ，400-618-4000，4006184000，4006189090&quot;</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;400-618-9090&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(1[3-9]\\d&#123;9&#125;)|(\\w+@[\\w&amp;&amp;[^_]]&#123;2,6&#125;(\\.[a-zA-Z]&#123;2,3&#125;)&#123;1,2&#125;)&quot;</span> +</span><br><span class="line">                <span class="string">&quot;|(0\\d&#123;2,3&#125;-?[1-9]\\d&#123;4,9&#125;)&quot;</span> +</span><br><span class="line">                <span class="string">&quot;(400-?[1-9]\\d&#123;2&#125;-?[1-9]\\d&#123;3&#125;)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取正则表达式的对象</span></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取文本匹配器的对象</span></span><br><span class="line">        <span class="comment">//利用m去读取s，会按照p的规则找里面的小串</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(s);</span><br><span class="line">        <span class="comment">//3.利用循环获取每一个数据 while(m.find())&#123;</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> m.group();</span><br><span class="line">        System.out.println(str);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-11-按要求爬取"><a href="#1-11-按要求爬取" class="headerlink" title="1.11 按要求爬取"></a>1.11 按要求爬取</h2><p>需求：</p><p>​有如下文本，按要求爬取数据。   </p><p>​ Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台。</p><p>需求1：</p><p>​爬取版本号为8，11.17的Java文本，但是只要Java，不显示版本号。</p><p>需求2：</p><p>​爬取版本号为8，11，17的Java文本。正确爬取结果为：Java8 Java11 Java17 Java17</p><p>需求3：</p><p>​爬取除了版本号为8，11，17的Java文本。<br>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            有如下文本，按要求爬取数据。</span></span><br><span class="line"><span class="comment">                Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，</span></span><br><span class="line"><span class="comment">                因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            需求1:爬取版本号为8，11.17的Java文本，但是只要Java，不显示版本号。</span></span><br><span class="line"><span class="comment">            需求2:爬取版本号为8，11，17的Java文本。正确爬取结果为:Java8 Java11 Java17 Java17</span></span><br><span class="line"><span class="comment">            需求3:爬取除了版本号为8，11.17的Java文本，</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;Java自从95年问世以来，经历了很多版本，目前企业中用的最多的是Java8和Java11，&quot;</span> +</span><br><span class="line">            <span class="string">&quot;因为这两个是长期支持版本，下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义正则表达式</span></span><br><span class="line">        <span class="comment">//?理解为前面的数据Java</span></span><br><span class="line">        <span class="comment">//=表示在Java后面要跟随的数据</span></span><br><span class="line">        <span class="comment">//但是在获取的时候，只获取前半部分</span></span><br><span class="line">        <span class="comment">//需求1:</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex1</span> <span class="operator">=</span> <span class="string">&quot;((?i)Java)(?=8|11|17)&quot;</span>;</span><br><span class="line">        <span class="comment">//需求2:</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex2</span> <span class="operator">=</span> <span class="string">&quot;((?i)Java)(8|11|17)&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex3</span> <span class="operator">=</span> <span class="string">&quot;((?i)Java)(?:8|11|17)&quot;</span>;</span><br><span class="line">        <span class="comment">//需求3:</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex4</span> <span class="operator">=</span> <span class="string">&quot;((?i)Java)(?!8|11|17)&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex4);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(s);</span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            System.out.println(m.group());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-12-贪婪爬取和非贪婪爬取"><a href="#1-12-贪婪爬取和非贪婪爬取" class="headerlink" title="1.12 贪婪爬取和非贪婪爬取"></a>1.12 贪婪爬取和非贪婪爬取</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">只写+和表示贪婪匹配，如果在+和后面加问号表示非贪婪爬取</span><br><span class="line">+? 非贪婪匹配</span><br><span class="line">*? 非贪婪匹配</span><br><span class="line">贪婪爬取:在爬取数据的时候尽可能的多获取数据</span><br><span class="line">非贪婪爬取:在爬取数据的时候尽可能的少获取数据</span><br><span class="line"></span><br><span class="line">举例：</span><br><span class="line">如果获取数据：ab+</span><br><span class="line">贪婪爬取获取结果:abbbbbbbbbbbb</span><br><span class="line">非贪婪爬取获取结果:ab</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegexDemo10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            只写+和*表示贪婪匹配</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            +? 非贪婪匹配</span></span><br><span class="line"><span class="comment">            *? 非贪婪匹配</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            贪婪爬取:在爬取数据的时候尽可能的多获取数据</span></span><br><span class="line"><span class="comment">            非贪婪爬取:在爬取数据的时候尽可能的少获取数据</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            ab+:</span></span><br><span class="line"><span class="comment">            贪婪爬取:abbbbbbbbbbbb</span></span><br><span class="line"><span class="comment">            非贪婪爬取:ab</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;Java自从95年问世以来，abbbbbbbbbbbbaaaaaaaaaaaaaaaaaa&quot;</span> +</span><br><span class="line">                <span class="string">&quot;经历了很多版木，目前企业中用的最多的是]ava8和]ava11，因为这两个是长期支持版木。&quot;</span> +</span><br><span class="line">                <span class="string">&quot;下一个长期支持版本是Java17，相信在未来不久Java17也会逐渐登上历史舞台&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;ab+&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">p</span> <span class="operator">=</span> Pattern.compile(regex);</span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">m</span> <span class="operator">=</span> p.matcher(s);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            System.out.println(m.group());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-13-String的split方法中使用正则表达式"><a href="#1-13-String的split方法中使用正则表达式" class="headerlink" title="1.13 String的split方法中使用正则表达式"></a>1.13 String的split方法中使用正则表达式</h2><ul><li><p>String类的split()方法原型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] split(String regex)</span><br><span class="line"><span class="comment">//参数regex表示正则表达式。可以将当前字符串中匹配regex正则表达式的符号作为&quot;分隔符&quot;来切割字符串。</span></span><br></pre></td></tr></table></figure></li><li><p>代码示例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            有一段字符串:小诗诗dqwefqwfqwfwq12312小丹丹dqwefqwfqwfwq12312小惠惠</span></span><br><span class="line"><span class="comment">            要求1:把字符串中三个姓名之间的字母替换为vs</span></span><br><span class="line"><span class="comment">            要求2:把字符串中的三个姓名切割出来*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;小诗诗dqwefqwfqwfwq12312小丹丹dqwefqwfqwfwq12312小惠惠&quot;</span>;</span><br><span class="line"><span class="comment">//细节:</span></span><br><span class="line"><span class="comment">//方法在底层跟之前一样也会创建文本解析器的对象</span></span><br><span class="line"><span class="comment">//然后从头开始去读取字符串中的内容，只要有满足的，那么就切割。</span></span><br><span class="line">String[] arr = s.split(<span class="string">&quot;[\\w&amp;&amp;[^_]]+&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    System.out.println(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-14-String类的replaceAll方法中使用正则表达式"><a href="#1-14-String类的replaceAll方法中使用正则表达式" class="headerlink" title="1.14 String类的replaceAll方法中使用正则表达式"></a>1.14 String类的replaceAll方法中使用正则表达式</h2><ul><li>String类的replaceAll()方法原型：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">replaceAll</span><span class="params">(String regex,String newStr)</span></span><br><span class="line"><span class="comment">//参数regex表示一个正则表达式。可以将当前字符串中匹配regex正则表达式的字符串替换为newStr。</span></span><br></pre></td></tr></table></figure><ul><li>代码示例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            有一段字符串:小诗诗dqwefqwfqwfwq12312小丹丹dqwefqwfqwfwq12312小惠惠</span></span><br><span class="line"><span class="comment">            要求1:把字符串中三个姓名之间的字母替换为vs</span></span><br><span class="line"><span class="comment">            要求2:把字符串中的三个姓名切割出来*/</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;小诗诗dqwefqwfqwfwq12312小丹丹dqwefqwfqwfwq12312小惠惠&quot;</span>;</span><br><span class="line"><span class="comment">//细节:</span></span><br><span class="line"><span class="comment">//方法在底层跟之前一样也会创建文本解析器的对象</span></span><br><span class="line"><span class="comment">//然后从头开始去读取字符串中的内容，只要有满足的，那么就用第一个参数去替换。</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result1</span> <span class="operator">=</span> s.replaceAll(<span class="string">&quot;[\\w&amp;&amp;[^_]]+&quot;</span>, <span class="string">&quot;vs&quot;</span>);</span><br><span class="line">System.out.println(result1);</span><br></pre></td></tr></table></figure><h2 id="1-15-正则表达式-分组括号"><a href="#1-15-正则表达式-分组括号" class="headerlink" title="1.15 正则表达式-分组括号( )"></a>1.15 正则表达式-分组括号( )</h2><p>细节：如何识别组号？</p><p><strong>只看左括号</strong>，不看右括号，按照左括号的顺序，从左往右，依次为第一组，第二组，第三组等等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需求1:判断一个字符串的开始字符和结束字符是否一致?只考虑一个字符</span></span><br><span class="line"><span class="comment">//举例: a123a b456b 17891 &amp;abc&amp; a123b(false)</span></span><br><span class="line"><span class="comment">// \\组号:表示把第X组的内容再出来用一次</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex1</span> <span class="operator">=</span> <span class="string">&quot;(.).+\\1&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;a123a&quot;</span>.matches(regex1));</span><br><span class="line">System.out.println(<span class="string">&quot;b456b&quot;</span>.matches(regex1));</span><br><span class="line">System.out.println(<span class="string">&quot;17891&quot;</span>.matches(regex1));</span><br><span class="line">System.out.println(<span class="string">&quot;&amp;abc&amp;&quot;</span>.matches(regex1));</span><br><span class="line">System.out.println(<span class="string">&quot;a123b&quot;</span>.matches(regex1));</span><br><span class="line">System.out.println(<span class="string">&quot;--------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//需求2:判断一个字符串的开始部分和结束部分是否一致?可以有多个字符</span></span><br><span class="line"><span class="comment">//举例: abc123abc b456b 123789123 &amp;!@abc&amp;!@ abc123abd(false)</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex2</span> <span class="operator">=</span> <span class="string">&quot;(.+).+\\1&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;abc123abc&quot;</span>.matches(regex2));</span><br><span class="line">System.out.println(<span class="string">&quot;b456b&quot;</span>.matches(regex2));</span><br><span class="line">System.out.println(<span class="string">&quot;123789123&quot;</span>.matches(regex2));</span><br><span class="line">System.out.println(<span class="string">&quot;&amp;!@abc&amp;!@&quot;</span>.matches(regex2));</span><br><span class="line">System.out.println(<span class="string">&quot;abc123abd&quot;</span>.matches(regex2));</span><br><span class="line">System.out.println(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求3:判断一个字符串的开始部分和结束部分是否一致?开始部分内部每个字符也需要一致</span></span><br><span class="line"><span class="comment">//举例: aaa123aaa bbb456bbb 111789111 &amp;&amp;abc&amp;&amp;</span></span><br><span class="line"><span class="comment">//(.):把首字母看做一组</span></span><br><span class="line"><span class="comment">// \\2:把首字母拿出来再次使用</span></span><br><span class="line"><span class="comment">// *:作用于\\2,表示后面重复的内容出现日次或多次</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex3</span> <span class="operator">=</span> <span class="string">&quot;((.)\\2*).+\\1&quot;</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;aaa123aaa&quot;</span>.matches(regex3));</span><br><span class="line">System.out.println(<span class="string">&quot;bbb456bbb&quot;</span>.matches(regex3));</span><br><span class="line">System.out.println(<span class="string">&quot;111789111&quot;</span>.matches(regex3));</span><br><span class="line">System.out.println(<span class="string">&quot;&amp;&amp;abc&amp;&amp;&quot;</span>.matches(regex3));</span><br><span class="line">System.out.println(<span class="string">&quot;aaa123aab&quot;</span>.matches(regex3));</span><br></pre></td></tr></table></figure><h2 id="1-16-分组练习"><a href="#1-16-分组练习" class="headerlink" title="1.16 分组练习"></a>1.16 分组练习</h2><p>需求:</p><p>​    将字符串：我要学学编编编编程程程程程程。</p><p>​    替换为：我要学编程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;我要学学编编编编程程程程程程&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需求:把重复的内容 替换为 单个的</span></span><br><span class="line"><span class="comment">//学学                学</span></span><br><span class="line"><span class="comment">//编编编编            编</span></span><br><span class="line"><span class="comment">//程程程程程程        程</span></span><br><span class="line"><span class="comment">//  (.)表示把重复内容的第一个字符看做一组</span></span><br><span class="line"><span class="comment">//  \\1表示第一字符再次出现</span></span><br><span class="line"><span class="comment">//  + 至少一次</span></span><br><span class="line"><span class="comment">//  $1 表示把正则表达式中第一组的内容，再拿出来用</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> str.replaceAll(<span class="string">&quot;(.)\\1+&quot;</span>, <span class="string">&quot;$1&quot;</span>);</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><h2 id="1-17-忽略大小写的写法"><a href="#1-17-忽略大小写的写法" class="headerlink" title="1.17 忽略大小写的写法"></a>1.17 忽略大小写的写法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(?i) ：表示忽略后面数据的大小写</span></span><br><span class="line"><span class="comment">//忽略abc的大小写</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;(?i)abc&quot;</span>;</span><br><span class="line"><span class="comment">//a需要一模一样，忽略bc的大小写</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;a(?i)bc&quot;</span>;</span><br><span class="line"><span class="comment">//ac需要一模一样，忽略b的大小写</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;a((?i)b)c&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="1-18-非捕获分组"><a href="#1-18-非捕获分组" class="headerlink" title="1.18 非捕获分组"></a>1.18 非捕获分组</h2><p>非捕获分组：分组之后不需要再用本组数据，仅仅是把数据括起来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//身份证号码的简易正则表达式</span></span><br><span class="line"><span class="comment">//非捕获分组:仅仅是把数据括起来</span></span><br><span class="line"><span class="comment">//特点:不占用组号</span></span><br><span class="line"><span class="comment">//这里\\1报错原因:(?:)就是非捕获分组，此时是不占用组号的。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//(?:) (?=) (?!)都是非捕获分组//更多的使用第一个</span></span><br><span class="line"><span class="comment">//String regex1 =&quot;[1-9]\\d&#123;16&#125;(?:\\d|x|x)\\1&quot;;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">regex2</span> <span class="operator">=</span><span class="string">&quot;[1-9]\\d&#123;16&#125;(\\d Xx)\\1&quot;</span>;</span><br><span class="line"><span class="comment">//^([01]\d|2[0-3]):[0-5]\d:[@-5]\d$</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;41080119930228457x&quot;</span>.matches(regex2));</span><br></pre></td></tr></table></figure><h2 id="1-19-正则表达式练习"><a href="#1-19-正则表达式练习" class="headerlink" title="1.19 正则表达式练习"></a>1.19 正则表达式练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">手机号码:<span class="number">1</span>[<span class="number">3</span>-<span class="number">9</span>]\\d&#123;<span class="number">9</span>&#125;</span><br><span class="line">座机号码：<span class="number">0</span>\\d&#123;<span class="number">2</span>,<span class="number">3</span>&#125;-?[<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">4</span>,<span class="number">9</span>&#125;</span><br><span class="line">邮箱号码：\\w+@[\\w&amp;&amp;[^_]]&#123;<span class="number">2</span>,<span class="number">6</span>&#125;(\\.[a-zA-Z]&#123;<span class="number">2</span>,<span class="number">3</span>&#125;)&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br><span class="line"><span class="number">24</span>小时：([<span class="number">01</span>]\\d|<span class="number">2</span>[<span class="number">0</span>-<span class="number">3</span>]):[<span class="number">0</span>-<span class="number">5</span>]\\d:[<span class="number">0</span>-<span class="number">5</span>]\\d</span><br><span class="line">   ([<span class="number">01</span>]\\d|<span class="number">2</span>[<span class="number">0</span>-<span class="number">3</span>])(:[<span class="number">0</span>-<span class="number">5</span>]\\d)&#123;<span class="number">2</span>&#125;</span><br><span class="line">用户名:\\w&#123;<span class="number">4</span>,<span class="number">16</span>&#125;</span><br><span class="line">身份证号码，简单校验：</span><br><span class="line">[<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">16</span>&#125;(\\d|X|x)</span><br><span class="line">[<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">16</span>&#125;[\\dXx]</span><br><span class="line">[<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">16</span>&#125;(\\d(?i)X)</span><br><span class="line">身份证号码，严格校验：</span><br><span class="line">[<span class="number">1</span>-<span class="number">9</span>]\\d&#123;<span class="number">5</span>&#125;(<span class="number">18</span>|<span class="number">19</span>|<span class="number">20</span>)\\d&#123;<span class="number">2</span>&#125;(<span class="number">0</span>[<span class="number">1</span>-<span class="number">9</span>]|<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>])(<span class="number">0</span>[<span class="number">1</span>-<span class="number">9</span>|[<span class="number">12</span>])\\d|<span class="number">3</span>[<span class="number">01</span>])\\d&#123;<span class="number">3</span>&#125;[\\dXx]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> missing semester </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序与二分查找（蓝桥杯紧急抱佛脚！！）</title>
      <link href="/2024/03/13/2024313-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%B8%8E%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%88%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%B4%A7%E6%80%A5%E6%8A%B1%E4%BD%9B%E8%84%9A%EF%BC%81%EF%BC%81%EF%BC%89/"/>
      <url>/2024/03/13/2024313-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E4%B8%8E%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%EF%BC%88%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%B4%A7%E6%80%A5%E6%8A%B1%E4%BD%9B%E8%84%9A%EF%BC%81%EF%BC%81%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>快排模板</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int N=1E6+10;</span><br><span class="line">int n,q[N];</span><br><span class="line"></span><br><span class="line">void quick_sort(int q[],int l,int r)&#123;</span><br><span class="line">    if(l&gt;=r) return;</span><br><span class="line">    </span><br><span class="line">    int x=q[(l+r)/2],i=l-1,j=r+1;</span><br><span class="line">    while(i&lt;j)&#123;</span><br><span class="line">        do i++;while(q[i]&lt;x);</span><br><span class="line">        do j--;while(q[j]&gt;x);</span><br><span class="line">        if(i&lt;j) swap(q[i],q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    quick_sort(q,l,j);</span><br><span class="line">    quick_sort(q,j+1,r);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">    for(int i=0;i&lt;n;i++) scanf(&quot;%d&quot;,&amp;q[i]);</span><br><span class="line">    </span><br><span class="line">    quick_sort(q,0,n-1);</span><br><span class="line">    </span><br><span class="line">    for(int i=0;i&lt;n;i++) printf(&quot;%d &quot;,q[i]);</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int N = 1e6+10;</span><br><span class="line">int n, k;</span><br><span class="line">int q[N];</span><br><span class="line"></span><br><span class="line">int quick_sort(int l, int r, int k) &#123;</span><br><span class="line">    if (l == r) return q[l];</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    int x = q[(l + r) / 2], i = l - 1, j = r + 1;</span><br><span class="line">    </span><br><span class="line">    while(i &lt; j) &#123;</span><br><span class="line">        do &#123; i++; &#125; while (q[i] &lt; x);</span><br><span class="line">        do &#123; j--; &#125; while (q[j] &gt; x);</span><br><span class="line">        if (i &lt; j) swap(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    int s1 = j - l + 1;</span><br><span class="line">    if (k &lt;= s1) return quick_sort(l, j, k);</span><br><span class="line">    return quick_sort(j + 1, r, k - s1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">    for (int i = 0; i &lt; n; i++) cin &gt;&gt; q[i];</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; quick_sort(0, n - 1, k) &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>acw786.第k个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int N=1e6+10;</span><br><span class="line">int n,k;</span><br><span class="line">int q[N];</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    for(int i=0;i&lt;n;i++) scanf(&quot;%d&quot;,&amp;q[i]);</span><br><span class="line">    while(k--)&#123;</span><br><span class="line">        int x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        int l=0,r=n-1;</span><br><span class="line">        while(l&lt;r)&#123;</span><br><span class="line">            int mid=(l+r)&gt;&gt;1;</span><br><span class="line">            if(q[mid]&gt;=x) r=mid;</span><br><span class="line">            else l=mid+1;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if(q[l]!=x) cout&lt;&lt;&quot;-1 -1&quot;&lt;&lt;endl;</span><br><span class="line">        else&#123;</span><br><span class="line">            cout&lt;&lt;l&lt;&lt;&#x27; &#x27;;</span><br><span class="line">            int l=0,r=n-1;</span><br><span class="line">            while(l&lt;r)&#123;</span><br><span class="line">                int mid=(l+r+1)&gt;&gt;1;</span><br><span class="line">                if(q[mid]&lt;=x) l=mid;</span><br><span class="line">                else r=mid-1;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>acw.789 数的范围–二分查找</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int N=1e6+10;</span><br><span class="line">int n,k;</span><br><span class="line">int q[N];</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    for(int i=0;i&lt;n;i++) scanf(&quot;%d&quot;,&amp;q[i]);</span><br><span class="line">    while(k--)&#123;</span><br><span class="line">        int x;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        int l=0,r=n-1;</span><br><span class="line">        while(l&lt;r)&#123;</span><br><span class="line">            int mid=(l+r)&gt;&gt;1;</span><br><span class="line">            if(q[mid]&gt;=x) r=mid;</span><br><span class="line">            else l=mid+1;</span><br><span class="line">        &#125;</span><br><span class="line">        if(q[l]!=x) cout&lt;&lt;&quot;-1 -1&quot;&lt;&lt;endl;</span><br><span class="line">        else&#123;</span><br><span class="line">            cout&lt;&lt;l&lt;&lt;&#x27; &#x27;;</span><br><span class="line">            int l=0,r=n-1;</span><br><span class="line">            while(l&lt;r)&#123;</span><br><span class="line">                int mid=(l+r+1)&gt;&gt;1;</span><br><span class="line">                if(q[mid]&lt;=x) l=mid;</span><br><span class="line">                else r=mid-1;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;l&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 基础算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象进阶（static与继承）</title>
      <link href="/2024/03/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E6%8A%BD%E8%B1%A1%E7%B1%BB-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%89/"/>
      <url>/2024/03/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E6%8A%BD%E8%B1%A1%E7%B1%BB-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul><li>抽象类</li><li>接口</li><li>内部类</li></ul><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><input disabled type="checkbox"> 能够写出抽象类的格式</li><li><input disabled type="checkbox"> 能够写出抽象方法的格式</li><li><input disabled type="checkbox"> 能说出抽象类的应用场景</li><li><input disabled type="checkbox"> 写出定义接口的格式</li><li><input disabled type="checkbox"> 写出实现接口的格式</li><li><input disabled type="checkbox"> 说出接口中成员的特点</li><li><input disabled type="checkbox"> 能说出接口的应用场景</li><li><input disabled type="checkbox"> 能说出接口中为什么会出现带有方法体的方法</li><li><input disabled type="checkbox"> 能完成适配器设计模式</li></ul><h1 id="第一章-抽象类"><a href="#第一章-抽象类" class="headerlink" title="第一章 抽象类"></a>第一章 抽象类</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><h3 id="1-1-1-抽象类引入"><a href="#1-1-1-抽象类引入" class="headerlink" title="1.1.1 抽象类引入"></a>1.1.1 抽象类引入</h3><p>​父类中的方法，被它的子类们重写，子类各自的实现都不尽相同。<strong>那么父类的方法声明和方法主体，只有声明还有意义，而方法主体则没有存在的意义了(因为子类对象会调用自己重写的方法)。</strong>换句话说，父类可能知道子类应该有哪个功能，但是功能具体怎么实现父类是不清楚的（由子类自己决定），父类只需要提供一个没有方法体的定义即可，具体实现交给子类自己去实现。<strong>我们把没有方法体的方法称为抽象方法。Java语法规定，包含抽象方法的类就是抽象类</strong>。</p><ul><li><strong>抽象方法</strong> ： <strong>没有方法体</strong>的方法。</li><li><strong>抽象类</strong>：包含抽象方法的类。</li></ul><h2 id="1-2-abstract使用格式"><a href="#1-2-abstract使用格式" class="headerlink" title="1.2 abstract使用格式"></a>1.2 abstract使用格式</h2><p><strong>abstract是抽象的意思，用于修饰方法方法和类，修饰的方法是抽象方法，修饰的类是抽象类。</strong></p><h3 id="1-2-1-抽象方法"><a href="#1-2-1-抽象方法" class="headerlink" title="1.2.1 抽象方法"></a>1.2.1 抽象方法</h3><p>使用<code>abstract</code> 关键字修饰方法，该方法就成了抽象方法，抽象方法只包含一个方法名，而没有方法体。</p><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">abstract</span> 返回值类型 方法名 (参数列表)；</span><br></pre></td></tr></table></figure><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>；</span><br></pre></td></tr></table></figure><h3 id="1-2-2-抽象类"><a href="#1-2-2-抽象类" class="headerlink" title="1.2.2 抽象类"></a>1.2.2 抽象类</h3><p>如果一个类包含抽象方法，那么该类<strong>必须</strong>是抽象类。<strong>注意：抽象类不一定有抽象方法，但是有抽象方法的类必须定义成抽象类。</strong></p><p>定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> class 类名字 &#123; </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-3-抽象类的使用"><a href="#1-2-3-抽象类的使用" class="headerlink" title="1.2.3 抽象类的使用"></a>1.2.3 抽象类的使用</h3><p><strong>要求</strong>：继承抽象类的子类<strong>必须重写父类所有的抽象方法</strong>。否则，该子类也必须声明为抽象类。</p><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父类,抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line"><span class="comment">// 抽象方法必须要放在抽象类中</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个子类继承抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(id, name, salary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.重写父类的抽象方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;管理其他人&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个子类继承抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cook</span> <span class="keyword">extends</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Cook</span><span class="params">()</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Cook</span><span class="params">(String id, String name, <span class="type">double</span> salary)</span> &#123;</span><br><span class="line"><span class="built_in">super</span>(id, name, salary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;厨师炒菜多加点盐...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo10</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建抽象类,抽象类不能创建对象</span></span><br><span class="line"><span class="comment">// 假设抽象类让我们创建对象,里面的抽象方法没有方法体,无法执行.所以不让我们创建对象</span></span><br><span class="line"><span class="comment">//Employee e = new Employee();</span></span><br><span class="line"><span class="comment">//e.work();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.创建子类</span></span><br><span class="line"><span class="type">Manager</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>();</span><br><span class="line">m.work();</span><br><span class="line"></span><br><span class="line"><span class="type">Cook</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cook</span>(<span class="string">&quot;ap002&quot;</span>, <span class="string">&quot;库克&quot;</span>, <span class="number">1</span>);</span><br><span class="line">c.work();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时的方法重写，是子类对父类抽象方法的完成实现，我们将这种方法重写的操作，也叫做<strong>实现方法</strong>。</p><h2 id="1-3-抽象类的特征"><a href="#1-3-抽象类的特征" class="headerlink" title="1.3 抽象类的特征"></a>1.3 抽象类的特征</h2><p>抽象类的特征总结起来可以说是 <strong>有得有失</strong></p><p><strong>有得：抽象类得到了拥有抽象方法的能力。</strong></p><p><strong>有失：抽象类失去了创建对象的能力。</strong></p><blockquote><p>其他成员（<strong>构造方法，实例方法，静态方法等</strong>）抽象类都是具备的。</p></blockquote><h2 id="1-4-抽象类的细节"><a href="#1-4-抽象类的细节" class="headerlink" title="1.4 抽象类的细节"></a>1.4 抽象类的细节</h2><p>不需要背，只要当idea报错之后，知道如何修改即可。</p><p>关于抽象类的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。</p><ol><li><p>抽象类<strong>不能创建对象</strong>，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。</p><blockquote><p>理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。</p></blockquote></li><li><p>抽象类中，可以有构造方法，是供子类创建对象时，初始化父类成员使用的。</p><blockquote><p>理解：子类的构造方法中，有默认的super()，需要访问父类构造方法。</p></blockquote></li><li><p>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p><blockquote><p>理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</p></blockquote></li><li><p>抽象类的子类，<strong>必须重写</strong>抽象父类中<strong>所有的</strong>抽象方法，<strong>否则子类也必须定义成抽象类</strong>，编译无法通过而报错。 </p><blockquote><p>理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。</p></blockquote></li><li><p>抽象类存在的<strong>意义是为了被子类继承</strong>。</p><blockquote><p>理解：抽象类中已经实现的是模板中确定的成员，抽象类不确定如何实现的定义成抽象方法，交给具体的子类去实现。</p></blockquote></li></ol><h2 id="1-5-抽象类存在的意义"><a href="#1-5-抽象类存在的意义" class="headerlink" title="1.5 抽象类存在的意义"></a>1.5 抽象类存在的意义</h2><p>​抽象类存在的意义是为了被子类继承，否则抽象类将毫无意义。抽象类可以强制让子类，一定要按照规定的格式进行重写。</p><h1 id="第二章-接口"><a href="#第二章-接口" class="headerlink" title="第二章 接口"></a>第二章 接口</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>我们已经学完了抽象类，抽象类中可以用抽象方法，也可以有普通方法，构造方法，成员变量等。那么什么是接口呢？<strong>接口是更加彻底的抽象，JDK7之前，包括JDK7，接口中全部是抽象方法。接口同样是不能创建对象的</strong>。</p><h2 id="2-2-定义格式"><a href="#2-2-定义格式" class="headerlink" title="2.2 定义格式"></a>2.2 定义格式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接口的定义格式：</span></span><br><span class="line">interface 接口名称&#123;</span><br><span class="line">    <span class="comment">// 抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口的声明：interface</span></span><br><span class="line"><span class="comment">// 接口名称：首字母大写，满足“驼峰模式”</span></span><br></pre></td></tr></table></figure><h2 id="2-3-接口成分的特点"><a href="#2-3-接口成分的特点" class="headerlink" title="2.3 接口成分的特点"></a>2.3 接口成分的特点</h2><p>  在JDK7，包括JDK7之前，接口中的<strong>只有</strong>包含：抽象方法和常量</p><h3 id="2-3-1-抽象方法"><a href="#2-3-1-抽象方法" class="headerlink" title="2.3.1.抽象方法"></a>2.3.1.抽象方法</h3><p>​       注意：接口中的抽象方法默认会自动加上public abstract修饰程序员无需自己手写！！<br>​       按照规范：以后接口中的抽象方法建议不要写上public abstract。因为没有必要啊，默认会加上。</p><h3 id="2-3-2-常量"><a href="#2-3-2-常量" class="headerlink" title="2.3.2 常量"></a>2.3.2 常量</h3><p> 在接口中定义的成员变量<strong>默认</strong>会加上： <strong>public static final</strong>修饰。也就是说在接口中定义的成员变量实际上是一个常量。这里是使用public static final修饰后，<strong>变量值就不可被修改，并且是静态化的变量可以直接用接口名访问，所以也叫常量</strong>。常量必须要给初始值。常量命名规范建议字母全部大写，多个单词用下划线连接。</p><h3 id="2-3-3-案例演示"><a href="#2-3-3-案例演示" class="headerlink" title="2.3.3 案例演示"></a>2.3.3 案例演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterF</span> &#123;</span><br><span class="line">    <span class="comment">// 抽象方法！</span></span><br><span class="line">    <span class="comment">//    public abstract void run();</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public abstract String getName();</span></span><br><span class="line">    String <span class="title function_">getName</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public abstract int add(int a , int b);</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a , <span class="type">int</span> b)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 它的最终写法是：</span></span><br><span class="line">    <span class="comment">// public static final int AGE = 12 ;</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">AGE</span>  <span class="operator">=</span> <span class="number">12</span>; <span class="comment">//常量</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">SCHOOL_NAME</span> <span class="operator">=</span> <span class="string">&quot;黑马程序员&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-4-基本的实现"><a href="#2-4-基本的实现" class="headerlink" title="2.4 基本的实现"></a>2.4 基本的实现</h2><h3 id="2-4-1-实现接口的概述"><a href="#2-4-1-实现接口的概述" class="headerlink" title="2.4.1 实现接口的概述"></a>2.4.1 实现接口的概述</h3><p>类与接口的关系为实现关系，即<strong>类实现接口</strong>，该类可以称为接口的实现类，也可以称为接口的子类。实现的动作类似继承，格式相仿，只是关键字不同，实现使用 <code> implements</code>关键字。</p><h3 id="2-4-2-实现接口的格式"><a href="#2-4-2-实现接口的格式" class="headerlink" title="2.4.2 实现接口的格式"></a>2.4.2 实现接口的格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**接口的实现：</span></span><br><span class="line"><span class="comment">    在Java中接口是被实现的，实现接口的类称为实现类。</span></span><br><span class="line"><span class="comment">    实现类的格式:*/</span></span><br><span class="line">class 类名 implements 接口<span class="number">1</span>,接口<span class="number">2</span>,接口<span class="number">3.</span>..&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面格式可以看出，接口是可以被多实现的。大家可以想一想为什么呢？</p><h3 id="2-4-3-类实现接口的要求和意义"><a href="#2-4-3-类实现接口的要求和意义" class="headerlink" title="2.4.3 类实现接口的要求和意义"></a>2.4.3 类实现接口的要求和意义</h3><ol><li><strong>必须重写实现的全部接口中所有抽象方法。</strong></li><li>如果一个类实现了接口，但是没有重写完全部接口的全部抽象方法，这个类也必须定义成抽象类。</li><li><strong>意义：接口体现的是一种规范，接口对实现类是一种强制性的约束，要么全部完成接口申明的功能，要么自己也定义成抽象类。这正是一种强制性的规范。</strong></li></ol><h3 id="2-4-4-类与接口基本实现案例"><a href="#2-4-4-类与接口基本实现案例" class="headerlink" title="2.4.4  类与接口基本实现案例"></a>2.4.4  类与接口基本实现案例</h3><p>假如我们定义一个运动员的<strong>接口</strong>（规范），代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   接口：接口体现的是规范。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>; <span class="comment">// 抽象方法，跑步。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">law</span><span class="params">()</span>; <span class="comment">// 抽象方法，遵守法律。</span></span><br><span class="line">    String <span class="title function_">competition</span><span class="params">(String project)</span>;  <span class="comment">// 抽象方法，比赛。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来定义一个乒乓球运动员类，实现接口，实现接口的<strong>实现类</strong>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima._03接口的实现;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口的实现：</span></span><br><span class="line"><span class="comment"> *    在Java中接口是被实现的，实现接口的类称为实现类。</span></span><br><span class="line"><span class="comment"> *    实现类的格式:</span></span><br><span class="line"><span class="comment"> *      class 类名 implements 接口1,接口2,接口3...&#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      &#125;</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PingPongMan</span>  <span class="keyword">implements</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球运动员稍微跑一下！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">law</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;乒乓球运动员守法！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">competition</span><span class="params">(String project)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;参加&quot;</span>+project+<span class="string">&quot;得金牌！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试代码</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMain</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建实现类对象。</span></span><br><span class="line">        <span class="type">PingPongMan</span> <span class="variable">zjk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PingPongMan</span>();</span><br><span class="line">        zjk.run();</span><br><span class="line">        zjk.law();</span><br><span class="line">        System.out.println(zjk.compittion(<span class="string">&quot;全球乒乓球比赛&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-5-类与接口的多实现案例"><a href="#2-4-5-类与接口的多实现案例" class="headerlink" title="2.4.5 类与接口的多实现案例"></a>2.4.5 类与接口的多实现案例</h3><p><strong>类与接口之间的关系是多实现的，一个类可以同时实现多个接口。</strong></p><p>首先我们先定义两个接口，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 法律规范：接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Law</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 这一个运动员的规范：接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后定义一个实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Java中接口是可以被多实现的：</span></span><br><span class="line"><span class="comment"> *    一个类可以实现多个接口: Law, SportMan</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JumpMan</span> <span class="keyword">implements</span> <span class="title class_">Law</span> ,SportMan &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;尊长守法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;训练跑步！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以看出类与接口之间是可以多实现的，我们可以理解成实现多个规范，这是合理的。</p><h2 id="2-5-接口与接口的多继承"><a href="#2-5-接口与接口的多继承" class="headerlink" title="2.5 接口与接口的多继承"></a>2.5 接口与接口的多继承</h2><p><strong>Java中，接口与接口之间是可以多继承的：也就是一个接口可以同时继承多个接口。</strong>大家一定要注意：</p><p><strong>类与接口是实现关系</strong></p><p><strong>接口与接口是继承关系</strong></p><p>接口继承接口就是把其他接口的抽象方法与本接口进行了合并。</p><p>案例演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Abc</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">go</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 法律规范：接口*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Law</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rule</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> *</span><br><span class="line"> *  总结：</span><br><span class="line"> *     接口与类之间是多实现的。</span><br><span class="line"> *     接口与接口之间是多继承的。</span><br><span class="line"> * */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SportMan</span> <span class="keyword">extends</span> <span class="title class_">Law</span> , Abc &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-6扩展：接口的细节"><a href="#2-6扩展：接口的细节" class="headerlink" title="2.6扩展：接口的细节"></a>2.6扩展：接口的细节</h2><p>不需要背，只要当idea报错之后，知道如何修改即可。</p><p>关于接口的使用，以下为语法上要注意的细节，虽然条目较多，但若理解了抽象的本质，无需死记硬背。</p><ol><li>当两个接口中存在相同抽象方法的时候，该怎么办？</li></ol><blockquote><p>只要重写一次即可。此时重写的方法，既表示重写1接口的，也表示重写2接口的。</p></blockquote><ol start="2"><li>实现类能不能继承A类的时候，同时实现其他接口呢？</li></ol><blockquote><p>继承的父类，就好比是亲爸爸一样<br>实现的接口，就好比是干爹一样<br>可以继承一个类的同时，再实现多个接口，只不过，要把接口里面所有的抽象方法，全部实现。</p></blockquote><ol start="3"><li>实现类能不能继承一个抽象类的时候，同时实现其他接口呢？</li></ol><blockquote><p>实现类可以继承一个抽象类的同时，再实现其他多个接口，只不过要把里面所有的抽象方法全部重写。</p></blockquote><ol start="4"><li>实现类Zi，实现了一个接口，还继承了一个Fu类。假设在接口中有一个方法，父类中也有一个相同的方法。子类如何操作呢？</li></ol><blockquote><p>处理办法一：如果父类中的方法体，能满足当前业务的需求，在子类中可以不用重写。<br>处理办法二：如果父类中的方法体，不能满足当前业务的需求，需要在子类中重写。</p></blockquote><ol start="5"><li>如果一个接口中，有10个抽象方法，但是我在实现类中，只需要用其中一个，该怎么办?</li></ol><blockquote><p>可以在接口跟实现类中间，新建一个中间类（适配器类）<br>让这个适配器类去实现接口，对接口里面的所有的方法做空重写。<br>让子类继承这个适配器类，想要用到哪个方法，就重写哪个方法。<br>因为中间类没有什么实际的意义，所以一般会把中间类定义为抽象的，不让外界创建对象</p></blockquote><h1 id="第三章-内部类"><a href="#第三章-内部类" class="headerlink" title="第三章 内部类"></a>第三章 内部类</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><h3 id="3-1-1-什么是内部类"><a href="#3-1-1-什么是内部类" class="headerlink" title="3.1.1 什么是内部类"></a>3.1.1 什么是内部类</h3><p>将一个类A定义在另一个类B里面，里面的那个类A就称为<strong>内部类</strong>，B则称为<strong>外部类</strong>。可以把<strong>内部类理解成寄生，外部类理解成宿主</strong>。</p><h3 id="3-1-2-什么时候使用内部类"><a href="#3-1-2-什么时候使用内部类" class="headerlink" title="3.1.2 什么时候使用内部类"></a>3.1.2 什么时候使用内部类</h3><p>一个事物内部还有一个独立的事物，内部的事物脱离外部的事物无法独立使用</p><ol><li>人里面有一颗心脏。</li><li>汽车内部有一个发动机。</li><li>为了实现更好的封装性。</li></ol><h2 id="3-2-内部类的分类"><a href="#3-2-内部类的分类" class="headerlink" title="3.2 内部类的分类"></a>3.2 内部类的分类</h2><p>按定义的位置来分</p><ol><li><strong>成员内部内</strong>，类定义在了成员位置 (类中方法外称为成员位置，无static修饰的内部类)</li><li><strong>静态内部类</strong>，类定义在了成员位置 (类中方法外称为成员位置，<strong>有static修饰的内部类</strong>)</li><li><strong>局部内部类</strong>，类定义在方法内</li><li><strong>匿名内部类</strong>，<strong>没有名字的内部类，可以在方法中，也可以在类中方法外</strong>。</li></ol><h2 id="3-3-成员内部类"><a href="#3-3-成员内部类" class="headerlink" title="3.3 成员内部类"></a>3.3 成员内部类</h2><p><strong>成员内部类特点</strong>：</p><ul><li>无static修饰的内部类，属于外部类对象的。</li><li>宿主：外部类对象。</li></ul><p><strong>内部类的使用格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类.内部类。 <span class="comment">// 访问内部类的类型都是用 外部类.内部类</span></span><br></pre></td></tr></table></figure><p><strong>获取成员内部类对象的两种方式</strong>：</p><p>方式一：外部直接创建成员内部类的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类.内部类 变量 = <span class="keyword">new</span> 外部类（）.new 内部类（）;</span><br></pre></td></tr></table></figure><p>方式二：在外部类中定义一个方法<strong>提供内部类的对象</strong></p><p><strong>案例演示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">方式一：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//  宿主：外部类对象。</span></span><br><span class="line">       <span class="comment">// Outer out = new Outer();</span></span><br><span class="line">        <span class="comment">// 创建内部类对象。</span></span><br><span class="line">        Outer.<span class="type">Inner</span> <span class="variable">oi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">        oi.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    <span class="comment">// 成员内部类，属于外部类对象的。</span></span><br><span class="line">    <span class="comment">// 拓展：成员内部类不能定义静态成员。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="comment">// 这里面的东西与类是完全一样的。</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;内部类中的方法被调用了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">方式二：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Outer</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Inner <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">o</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();</span><br><span class="line">        System.out.println(o.getInstance());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-成员内部类的细节"><a href="#3-4-成员内部类的细节" class="headerlink" title="3.4 成员内部类的细节"></a>3.4 成员内部类的细节</h2><p>编写成员内部类的注意点：</p><ol><li>成员内部类可以被一些修饰符所修饰，比如： private，默认，protected，public，static等</li><li>在成员内部类里面，JDK16之前不能定义静态变量，<strong>JDK16开始才可以定义静态变量</strong>。</li><li>创建内部类对象时，对象中有一个隐含的Outer.this记录外部类对象的地址值。（请参见3.6节的内存图）</li></ol><p>详解：</p><p>​内部类被private修饰，外界无法直接获取内部类的对象，只能通过3.3节中的方式二获取内部类的对象</p><p>​被其他权限修饰符修饰的内部类一般用3.3节中的方式一直接获取内部类的对象</p><p>​<strong>内部类被static修饰是成员内部类中的特殊情况，叫做静态内部类</strong>下面单独学习。</p><p>​内部类如果想要访问外部类的成员变量，外部类的变量必须用final修饰，JDK8以前必须手动写final，JDK8之后不需要手动写，JDK默认加上。</p><h2 id="3-5-成员内部类面试题"><a href="#3-5-成员内部类面试题" class="headerlink" title="3.5 成员内部类面试题"></a>3.5 成员内部类面试题</h2><p>请在?地方向上相应代码,以达到输出的内容</p><p>注意：内部类访问外部类对象的格式是：<strong>外部类名.this</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Outer.<span class="type">inner</span> <span class="variable">oi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>().<span class="keyword">new</span> <span class="title class_">inner</span>();</span><br><span class="line">        oi.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;<span class="comment">// 外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在成员位置定义一个类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">inner</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">            System.out.println(???);<span class="comment">// 10   答案：a</span></span><br><span class="line">            System.out.println(???);<span class="comment">// 20答案：this.a</span></span><br><span class="line">            System.out.println(???);<span class="comment">// 30答案：Outer.this.a</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-成员内部类内存图"><a href="#3-6-成员内部类内存图" class="headerlink" title="3.6 成员内部类内存图"></a>3.6 成员内部类内存图</h2><p><img src="/2024/03/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E6%8A%BD%E8%B1%A1%E7%B1%BB-%E6%8E%A5%E5%8F%A3-%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%89/img%5C%E5%86%85%E9%83%A8%E7%B1%BB%E5%86%85%E5%AD%98%E5%9B%BE.png" alt="内部类内存图"></p><h2 id="3-7-静态内部类"><a href="#3-7-静态内部类" class="headerlink" title="3.7 静态内部类"></a>3.7 静态内部类</h2><p><strong>静态内部类特点</strong>：</p><ul><li>静态内部类是一种特殊的成员内部类。</li></ul><ul><li><strong>有static修饰，属于外部类本身的</strong>。</li><li>总结：静态内部类与其他类的用法完全一样。<strong>只是访问的时候需要加上外部类.内部类</strong>。</li><li><strong>拓展1</strong>:静态内部类可以直接访问外部类的<strong>静态成员</strong>。</li><li><strong>拓展2</strong>:静态内部类不可以直接访问外部类的非静态成员，如果要访问需要创建外部类的对象。</li><li><strong>拓展3</strong>:静态内部类中没有银行的Outer.this。</li></ul><p><strong>内部类的使用格式</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类.内部类。</span><br></pre></td></tr></table></figure><p><strong>静态内部类对象的创建格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类.内部类  变量 = <span class="keyword">new</span>  外部类.内部类构造器;</span><br></pre></td></tr></table></figure><p><strong>调用方法的格式：</strong></p><ul><li>调用非静态方法的格式：先创建对象，用对象调用</li><li>调用静态方法的格式：外部类名.内部类名.方法名();</li></ul><p><strong>案例演示</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 外部类：Outer01</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer01</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">String</span> <span class="variable">sc_name</span> <span class="operator">=</span> <span class="string">&quot;黑马程序&quot;</span>;</span><br><span class="line">    <span class="comment">// 内部类: Inner01</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner01</span>&#123;</span><br><span class="line">        <span class="comment">// 这里面的东西与类是完全一样的。</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Inner01</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showName</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="built_in">this</span>.name);</span><br><span class="line">            <span class="comment">// 拓展:静态内部类可以直接访问外部类的静态成员。</span></span><br><span class="line">            System.out.println(sc_name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InnerClassDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建静态内部类对象。</span></span><br><span class="line">        <span class="comment">// 外部类.内部类  变量 = new  外部类.内部类构造器;</span></span><br><span class="line">        Outer01.<span class="type">Inner01</span> <span class="variable">in</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer01</span>.Inner01(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        in.showName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-8-局部内部类"><a href="#3-8-局部内部类" class="headerlink" title="3.8 局部内部类"></a>3.8 局部内部类</h2><ul><li><strong>局部内部类</strong> ：定义在<strong>方法中</strong>的类。</li></ul><p>定义格式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class 外部类名 &#123;</span><br><span class="line">数据类型 变量名;</span><br><span class="line"></span><br><span class="line">修饰符 返回值类型 方法名(参数列表) &#123;</span><br><span class="line"><span class="comment">// …</span></span><br><span class="line">class 内部类 &#123;</span><br><span class="line"><span class="comment">// 成员变量</span></span><br><span class="line"><span class="comment">// 成员方法</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-9-匿名内部类【重点】"><a href="#3-9-匿名内部类【重点】" class="headerlink" title="3.9 匿名内部类【重点】"></a>3.9 匿名内部类【重点】</h2><h3 id="3-9-1-概述"><a href="#3-9-1-概述" class="headerlink" title="3.9.1 概述"></a>3.9.1 概述</h3><p><strong>匿名内部类</strong> ：是内部类的简化写法。他是一个隐含了名字的内部类。开发中，最常用到的内部类就是匿名内部类了。</p><h3 id="3-9-2-格式"><a href="#3-9-2-格式" class="headerlink" title="3.9.2 格式"></a>3.9.2 格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名或者接口名() &#123;</span><br><span class="line">     重写方法;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>包含了：</p><ul><li><p>继承或者实现关系</p></li><li><p>方法重写</p></li><li><p>创建对象</p></li></ul><p>所以从语法上来讲，这个整体其实是匿名内部类对象</p><h3 id="3-9-2-什么时候用到匿名内部类"><a href="#3-9-2-什么时候用到匿名内部类" class="headerlink" title="3.9.2 什么时候用到匿名内部类"></a>3.9.2 什么时候用到匿名内部类</h3><p>实际上，如果我们希望定义一个<strong>只要使用一次的类，就可考虑使用匿名内部类</strong>。匿名内部类的本质作用</p><p><strong>是为了简化代码</strong>。 </p><p>之前我们使用接口时，似乎得做如下几步操作：</p><ol><li>定义子类</li><li>重写接口中的方法</li><li>创建子类对象</li><li>调用重写后的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Swim</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 定义接口的实现类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Swim</span> &#123;</span><br><span class="line">    <span class="comment">// 2. 重写抽象方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗刨式...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 3. 创建实现类对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">// 4. 调用方法</span></span><br><span class="line">        s.swimming();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的目的，最终只是为了调用方法，那么能不能简化一下，把以上四步合成一步呢？匿名内部类就是做这样的快捷方式。</p><h3 id="3-9-3-匿名内部类前提和格式"><a href="#3-9-3-匿名内部类前提和格式" class="headerlink" title="3.9.3 匿名内部类前提和格式"></a>3.9.3 匿名内部类前提和格式</h3><p>匿名内部类必须<strong>继承一个父类</strong>或者<strong>实现一个父接口</strong>。</p><p><strong>匿名内部类格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类名或者接口名()&#123;</span><br><span class="line">    <span class="comment">// 方法重写</span></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 执行语句</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3-9-4-使用方式"><a href="#3-9-4-使用方式" class="headerlink" title="3.9.4 使用方式"></a>3.9.4 使用方式</h3><p>以接口为例，匿名内部类的使用，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Swim</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用匿名内部类</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;自由泳...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;.swimming();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 接口 变量 = new 实现类(); // 多态,走子类的重写方法</span></span><br><span class="line">        <span class="type">Swim</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;蛙泳...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        s2.swimming();</span><br><span class="line">        s2.swimming();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-9-5-匿名内部类的特点"><a href="#3-9-5-匿名内部类的特点" class="headerlink" title="3.9.5 匿名内部类的特点"></a>3.9.5 匿名内部类的特点</h3><ol><li>定义一个没有名字的<strong>内部类</strong>（仍然属于内部类！！）</li><li>这个类实现了父类，或者父类接口</li><li>匿名内部类会创建这个没有名字的类的对象</li></ol><h3 id="3-9-6-匿名内部类的使用场景"><a href="#3-9-6-匿名内部类的使用场景" class="headerlink" title="3.9.6 匿名内部类的使用场景"></a>3.9.6 匿名内部类的使用场景</h3><p>通常在方法的形式参数是接口或者抽象类时，也<strong>可以将匿名内部类作为参数传递</strong>。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Swim</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 普通方式传入对象</span></span><br><span class="line">        <span class="comment">// 创建实现类对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        </span><br><span class="line">        goSwimming(s);</span><br><span class="line">        <span class="comment">// 匿名内部类使用场景:作为方法参数传递</span></span><br><span class="line">        <span class="type">Swim</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;蝶泳...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 传入匿名内部类</span></span><br><span class="line">        goSwimming(s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 完美方案: 一步到位</span></span><br><span class="line">        goSwimming(<span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;大学生, 蛙泳...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        goSwimming(<span class="keyword">new</span> <span class="title class_">Swim</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">swimming</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;小学生, 自由泳...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个方法,模拟请一些人去游泳</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">goSwimming</span><span class="params">(Swim s)</span> &#123;</span><br><span class="line">        s.swimming();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题3 数据整理</title>
      <link href="/2024/03/09/%E4%B8%BB%E9%A2%983-%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/"/>
      <url>/2024/03/09/%E4%B8%BB%E9%A2%983-%E6%95%B0%E6%8D%AE%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="数据整理"><a href="#数据整理" class="headerlink" title="数据整理"></a>数据整理</h1><p>您是否曾经有过这样的需求，将某种格式存储的数据转换成另外一种格式? 肯定有过，对吧！ 这也正是我们这节课所要讲授的主要内容。具体来讲，我们需要不断地对数据进行处理，直到得到我们想要的最终结果。</p><p>在之前的课程中，其实我们已经接触到了一些数据整理的基本技术。可以这么说，每当您使用管道运算符的时候，其实就是在进行某种形式的数据整理。</p><p>例如这样一条命令 <code>journalctl | grep -i intel</code>，它会找到所有包含intel(不区分大小写)的系统日志。您可能并不认为这是数据整理，但是它确实将某种形式的数据（全部系统日志）转换成了另外一种形式的数据（仅包含intel的日志）。大多数情况下，数据整理需要您能够明确哪些工具可以被用来达成特定数据整理的目的，并且明白如何组合使用这些工具。（journalctl: journal control）</p><p>让我们从头讲起。既然是学习数据整理，那有两样东西自然是必不可少的：用来整理的数据以及相关的应用场景。日志处理通常是一个比较典型的使用场景，因为我们经常需要在日志中查找某些信息，这种情况下通读日志是不现实的。现在，让我们研究一下系统日志，看看哪些用户曾经尝试过登录我们的服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh myserver journalctl</span><br></pre></td></tr></table></figure><p>内容太多了。现在让我们把涉及 sshd 的信息过滤出来：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh myserver journalctl | grep sshd</span><br></pre></td></tr></table></figure><p>注意，这里我们使用管道将一个远程服务器上的文件传递给本机的 <code>grep</code> 程序！ <code>ssh</code> 太牛了，下一节课我们会讲授命令行环境，届时我们会详细讨论 <code>ssh</code> 的相关内容。此时我们打印出的内容，仍然比我们需要的要多得多，读起来也非常费劲。我们来改进一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh myserver &#x27;journalctl | grep sshd | grep &quot;Disconnected from&quot;&#x27; | less</span><br></pre></td></tr></table></figure><p>多出来的引号是什么作用呢？这么说吧，我们的日志是一个非常大的文件，把这么大的文件流直接传输到我们本地的电脑上再进行过滤是对流量的一种浪费。因此我们采取另外一种方式，<strong>我们先在远端机器上过滤文本内容，然后再将结果传输到本机。</strong> <strong><code>less</code> 为我们创建来一个文件分页器，使我们可以通过翻页的方式浏览较长的文本。</strong>为了进一步节省流量，我们甚至可以将当前过滤出的日志保存到文件中，这样后续就不需要再次通过网络访问该文件了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh myserver &#x27;journalctl | grep sshd | grep &quot;Disconnected from&quot;&#x27; &gt; ssh.log</span><br><span class="line">$ less ssh.log</span><br></pre></td></tr></table></figure><p>过滤结果中仍然包含不少没用的数据。我们有很多办法可以删除这些无用的数据，但是让我们先研究一下 <code>sed</code> 这个非常强大的工具。</p><p><code>sed</code> 是一个基于文本编辑器<code>ed</code>构建的”流编辑器” 。在 <code>sed</code> 中，您基本上是利用一些简短的命令来修改文件，而不是直接操作文件的内容（尽管您也可以选择这样做）。相关的命令行非常多，但是最常用的是 <code>s</code>，即<strong><em>替换</em>命令</strong>，例如我们可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh myserver journalctl</span><br><span class="line"> | grep sshd</span><br><span class="line"> | grep &quot;Disconnected from&quot;</span><br><span class="line"> | sed &#x27;s/.*Disconnected from //&#x27;</span><br></pre></td></tr></table></figure><p>上面这段命令中，我们使用了一段简单的<em>正则表达式</em>。正则表达式是一种非常强大的工具，可以让我们基于某种模式来对字符串进行匹配。**<code>s</code> 命令的语法如下：<code>s/REGEX/SUBSTITUTION/</code>, 其中 <code>REGEX</code> 部分是我们需要使用的正则表达式，而 <code>SUBSTITUTION</code> 是用于替换匹配结果的文本。**</p><h2 id="正则表达式-值得深入学习！！"><a href="#正则表达式-值得深入学习！！" class="headerlink" title="正则表达式(值得深入学习！！)"></a>正则表达式(值得深入学习！！)</h2><p>正则表达式非常常见也非常有用，值得您花些时间去理解它。让我们从这一句正则表达式开始学习： <code>/.*Disconnected from /</code>。<strong>正则表达式通常以（尽管并不总是） <code>/</code>开始和结束。</strong>大多数的 ASCII 字符都表示它们本来的含义，但是有一些字符确实具有表示匹配行为的“特殊”含义。不同字符所表示的含义，根据正则表达式的实现方式不同，也会有所变化，这一点确实令人沮丧。常见的模式有：</p><ul><li><strong><code>.</code> 除换行符之外的”任意单个字符”</strong></li><li><strong><code>*</code> 匹配前面字符零次或多次</strong></li><li><strong><code>+</code> 匹配前面字符一次或多次</strong></li><li><strong><code>[abc]</code> 匹配 <code>a</code>, <code>b</code> 和 <code>c</code> 中的任意一个</strong></li><li><strong><code>(RX1|RX2)</code> 任何能够匹配<code>RX1</code> 或 <code>RX2</code>的结果</strong></li><li><strong><code>^</code> 行首</strong>（^lzy）</li><li><strong><code>$</code> 行尾</strong>（lzy$）</li></ul><ol><li><code>*</code> 匹配前面字符零次或多次：<ul><li>正则表达式 <code>ba*t</code> 可以匹配 <code>bt</code>、<code>bat</code>、<code>baat</code> 等字符串。其中 <code>a*</code> 表示匹配前面的字符 <code>a</code> 零次或多次。</li></ul></li><li><code>+</code> 匹配前面字符一次或多次：<ul><li>正则表达式 <code>ba+t</code> 可以匹配 <code>bat</code>、<code>baat</code> 等字符串，但不能匹配 <code>bt</code>。其中 <code>a+</code> 表示匹配前面的字符 <code>a</code> 至少一次。</li></ul></li></ol><p>综上所述，<code>*</code> 和 <code>+</code> 在正则表达式中用来表示对前面字符的重复次数进行匹配，区别在于 <code>*</code> 可以匹配零次或多次，而 <code>+</code> 则至少要匹配一次。</p><p><code>sed</code> 的正则表达式有些时候是比较奇怪的，它需要你在这些模式前添加<code>\</code>才能使其具有特殊含义。或者，您也可以添加<code>-E</code>选项来支持这些匹配。</p><p>回过头我们再看<code>/.*Disconnected from /</code>，我们会发现这个正则表达式可以匹配任何以若干任意字符开头，并接着包含”Disconnected from “的字符串。这也正是我们所希望的。但是请注意，正则表达式并不容易写对。如果有人将 “Disconnected from” 作为自己的用户名会怎样呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Jan 17 03:13:00 thesquareplanet.com sshd[2631]: Disconnected from invalid user Disconnected from 46.97.239.16 port 55920 [preauth]</span><br></pre></td></tr></table></figure><p>正则表达式会如何匹配？**<code>*</code> 和 <code>+</code> 在默认情况下是贪婪模式，也就是说，它们会尽可能多的匹配文本。**因此对上述字符串的匹配结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">46.97.239.16 port 55920 [preauth]</span><br></pre></td></tr></table></figure><p>这可不是我们想要的结果。对于某些正则表达式的实现来说，您<strong>可以给 <code>*</code> 或 <code>+</code> 增加一个<code>?</code> 后缀使其变成非贪婪模式，但是很可惜 <code>sed</code> 并不支持该后缀。</strong></p><ul><li>对于正则表达式 <code>ba*t</code> 和输入字符串 <code>baaat</code>：<ul><li><code>*</code> 是贪婪匹配，会匹配尽可能多的 <code>a</code>，即匹配 <code>aaa</code>。</li><li><code>*?</code> 是非贪婪匹配，会匹配尽可能少的 <code>a</code>，即匹配 <code>a</code>。</li></ul></li><li>对于正则表达式 <code>ba+t</code> 和输入字符串 <code>baaat</code>：<ul><li><code>+</code> 是贪婪匹配，会匹配尽可能多的 <code>a</code>，即匹配 <code>aaat</code>。</li><li><code>+?</code> 是非贪婪匹配，会匹配尽可能少的 <code>a</code>，即匹配 <code>aa</code>。</li></ul></li></ul><p>因此，使用 <code>*?</code> 和 <code>+?</code> 可以让正则表达式在匹配时尽可能少地占用字符，避免贪婪匹配导致的匹配结果不符合预期的情况。</p><p>我们可以切换到 perl 的命令行模式，该模式支持编写这样的正则表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perl -pe &#x27;s/.*?Disconnected from //&#x27;</span><br></pre></td></tr></table></figure><p>让我们回到 <code>sed</code> 命令并使用它完成后续的任务，毕竟对于这一类任务，<code>sed</code>是最常见的工具。<code>sed</code> 还可以非常方便的做一些事情，例如打印匹配后的内容，一次调用中进行多次替换搜索等。但是这些内容我们并不会在此进行介绍。<code>sed</code> 本身是一个非常全能的工具，但是在具体功能上往往能找到更好的工具作为替代品。</p><p>好的，我们还需要去掉用户名后面的后缀，应该如何操作呢？</p><p>想要匹配用户名后面的文本，尤其是当这里的用户名可以包含空格时，这个问题变得非常棘手！这里我们需要做的是匹配<em>一整行</em>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| sed -E &#x27;s/.*Disconnected from (invalid |authenticating )?user .* [^ ]+ port [0-9]+( \[preauth\])?$//&#x27;</span><br></pre></td></tr></table></figure><p>让我们借助正则表达式在线调试工具<a href="https://regex101.com/r/qqbZqh/2">regex debugger</a> 来理解这段表达式。</p><p>这段正则表达式可以解释为：</p><ul><li><code>.*</code>：匹配任意字符（除换行符）零次或多次。</li><li><code>Disconnected from </code>：匹配字面字符串 “Disconnected from “。</li><li><code>(invalid |authenticating )?</code>：匹配 “invalid “ 或 “authenticating “ 中的一个，出现零次或一次（? 表示可选项）。</li><li><code>user </code>：匹配字面字符串 “user “。</li><li><code>.*</code>：匹配任意字符（除换行符）零次或多次。</li><li><code>[^ ]+</code>：<strong>匹配除空格之外的任意字符，至少匹配一次。</strong></li><li><code>port</code>：匹配字面字符串 “ port “。</li><li><code>[0-9]+</code>：匹配数字 0 到 9 中的任意一个，至少匹配一次。</li><li><code>( \[preauth\])?</code>：匹配空格、”[preauth]”、再次空格的序列（可选项）。(<strong><code>\[preauth\]</code> 中的 <code>\</code> 就是用来转义 <code>[</code> 和 <code>]</code> 这两个特殊字符的。因为方括号 <code>[ ]</code> 在正则表达式中用来表示字符集合，如果想要匹配方括号本身，就需要用 <code>\</code> 进行转义。</strong>)</li><li><code>$</code>：匹配行尾。</li><li><code>/gm</code>：标记，<code>g</code> 表示全局匹配（即匹配全部），<code>m</code> 表示多行匹配（即在换行符处仍能匹配）。</li></ul><p>这个正则表达式的作用是匹配类似以下格式的字符串：</p><ul><li>“Disconnected from user port “</li><li>“Disconnected from invalid user port [preauth]”</li><li>“Disconnected from authenticating user port “</li></ul><p>OK，开始的部分和以前是一样的，随后，我们匹配两种类型的“user”（在日志中基于两种前缀区分）。再然后我们匹配属于用户名的所有字符。接着，再匹配任意一个单词（<code>[^ ]+</code> 会匹配任意非空且不包含空格的序列）。紧接着后面匹配单“port”和它后面的一串数字，以及可能存在的后缀<code>[preauth]</code>，最后再匹配行尾。</p><p>注意，这样做的话，即使用户名是“Disconnected from”，对匹配结果也不会有任何影响，您知道这是为什么吗？</p><p>问题还没有完全解决，日志的内容全部被替换成了空字符串，整个日志的内容因此都被删除了。我们实际上希望能够将用户名<em>保留</em>下来。对此，我们可以使用“捕获组（capture groups）”来完成。被圆括号内的正则表达式匹配到的文本，都会被存入一系列以编号区分的捕获组中。捕获组的内容可以在替换字符串时使用（有些正则表达式的引擎甚至支持替换表达式本身），例如<code>\1</code>、 <code>\2</code>、<code>\3</code>等等，因此可以使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| sed -E &#x27;s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$/\2/&#x27;</span><br></pre></td></tr></table></figure><p>想必您已经意识到了，为了完成某种匹配，我们最终可能会写出非常复杂的正则表达式。例如，这里有一篇关于如何匹配电子邮箱地址的文章<a href="https://www.regular-expressions.info/email.html">e-mail address</a>，匹配电子邮箱可一点<a href="https://emailregex.com/">也不简单</a>。网络上还有很多关于如何匹配电子邮箱地址的<a href="https://stackoverflow.com/questions/201323/how-to-validate-an-email-address-using-a-regular-expression/1917982">讨论</a>。人们还为其编写了<a href="https://fightingforalostcause.net/content/misc/2006/compare-email-regex.php">测试用例</a>及 <a href="https://mathiasbynens.be/demo/url-regex">测试矩阵</a>。您甚至可以编写一个用于判断一个数<a href="https://www.noulakaz.net/2007/03/18/a-regular-expression-to-check-for-prime-numbers/">是否为质数</a>的正则表达式。</p><p>正则表达式是出了名的难以写对，但是它仍然会是您强大的常备工具之一。</p><h2 id="回到数据整理"><a href="#回到数据整理" class="headerlink" title="回到数据整理"></a>回到数据整理</h2><p>OK，现在我们有如下表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh myserver journalctl</span><br><span class="line"> | grep sshd</span><br><span class="line"> | grep &quot;Disconnected from&quot;</span><br><span class="line"> | sed -E &#x27;s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$/\2/&#x27;</span><br></pre></td></tr></table></figure><p><code>sed</code> 还可以做很多各种各样有趣的事情，例如文本注入：(使用 <code>i</code> 命令)，打印特定的行 (使用 <code>p</code>命令)，基于索引选择特定行等等。详情请见<code>man sed</code>!</p><p>现在，我们已经得到了一个包含用户名的列表，列表中的用户都曾经尝试过登录我们的系统。但这还不够，让我们过滤出那些最常出现的用户：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh myserver journalctl</span><br><span class="line"> | grep sshd</span><br><span class="line"> | grep &quot;Disconnected from&quot;</span><br><span class="line"> | sed -E &#x27;s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$/\2/&#x27;</span><br><span class="line"> | sort | uniq -c</span><br></pre></td></tr></table></figure><p><strong><code>sort</code> 会对其输入数据进行排序。<code>uniq -c</code> 会把连续出现的行折叠为一行并使用出现次数作为前缀。</strong>我们希望按照出现次数排序，过滤出最常出现的用户名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh myserver journalctl</span><br><span class="line"> | grep sshd</span><br><span class="line"> | grep &quot;Disconnected from&quot;</span><br><span class="line"> | sed -E &#x27;s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$/\2/&#x27;</span><br><span class="line"> | sort | uniq -c</span><br><span class="line"> | sort -nk1,1 | tail -n10</span><br></pre></td></tr></table></figure><p><code>sort -n</code> 会按照数字顺序对输入进行排序（默认情况下是按照字典序排序 <code>-k1,1</code> 则表示“仅基于以空格分割的第一列进行排序”。<code>,n</code> 部分表示“仅排序到第n个部分”，默认情况是到行尾。就本例来说，针对整个行进行排序也没有任何问题，我们这里主要是为了学习这一用法！</p><p>如果我们希望得到登录次数最少的用户，我们可以使用 <code>head</code> 来代替<code>tail</code>。或者使用<code>sort -r</code>来进行倒序排序。</p><p>相当不错。但我们只想获取用户名，而且不要一行一个地显示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssh myserver journalctl</span><br><span class="line"> | grep sshd</span><br><span class="line"> | grep &quot;Disconnected from&quot;</span><br><span class="line"> | sed -E &#x27;s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$/\2/&#x27;</span><br><span class="line"> | sort | uniq -c</span><br><span class="line"> | sort -nk1,1 | tail -n10</span><br><span class="line"> | awk &#x27;&#123;print $2&#125;&#x27; | paste -sd,</span><br></pre></td></tr></table></figure><ol><li><code>ssh myserver journalctl</code>：连接到名为 <code>myserver</code> 的服务器并查看其系统日志。</li><li><code>grep sshd</code>：在系统日志中过滤出包含 <code>sshd</code> 的行，即筛选出与 SSH 服务相关的日志记录。</li><li><code>grep &quot;Disconnected from&quot;</code>：进一步过滤出包含 <code>Disconnected from</code> 的行，即筛选出 SSH 连接断开的日志记录。</li><li><code>sed -E &#39;s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$/\2/&#39;</code>：使用 <code>sed</code> 命令匹配并替换 <code>Disconnected from user</code> 后的用户名，并只保留用户名部分。<ul><li><code>.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$</code> 是用来匹配日志中指定格式的内容的正则表达式。</li><li><code>\2</code> 表示在替换中保留第二个圆括号内匹配到的内容，即用户名部分。</li></ul></li><li><code>sort | uniq -c</code>：对提取出的用户名进行排序并统计每个用户名出现的次数。</li><li><code>sort -nk1,1</code>：按照出现次数排序，从最少到最多。</li><li><code>tail -n10</code>：只输出最后 10 行，即最常见的前 10 个用户。</li><li><code>awk &#39;&#123;print $2&#125;&#39;</code>：使用 <code>awk</code> 提取出每行中的第二列，即用户名。</li><li><code>paste -sd,</code>：将提取出的用户名用逗号连接起来，形成一个逗号分隔的列表。</li></ol><p>在 <code>-k1,1</code> 中，<code>1,1</code> 表示排序键的起始字段和结束字段都是第一个字段，即整行的第一个字段。这样设置就表示对整行的第一个字段进行排序。</p><p>如果有多个字段需要作为排序键，可以使用 <code>-k</code> 参数指定多个键，比如 <code>-k1,1 -k2,2</code> 表示先按照第一个字段排序，如果第一个字段相同，则按照第二个字段排序。</p><p>综上所述，这个命令序列的最终目的是找出 SSH 连接中断日志中出现次数最多的前 10 个用户，并将它们以逗号分隔的形式输出。</p><p>如果您使用的是 MacOS：注意这个命令并不能配合 MacOS 系统默认的 BSD <code>paste</code>使用。参考<a href="https://missing-semester-cn.github.io/2020/course-shell/">课程概览与 shell</a>的习题内容获取更多相关信息。</p><p>我们可以利用 <code>paste</code>命令来合并行(<code>-s</code>)，并指定一个分隔符进行分割 (<code>-d</code>)，那<code>awk</code>的作用又是什么呢？</p><h2 id="awk-–-另外一种编辑器"><a href="#awk-–-另外一种编辑器" class="headerlink" title="awk – 另外一种编辑器"></a>awk – 另外一种编辑器</h2><p><code>awk</code> 其实是一种编程语言，只不过它碰巧非常善于处理文本。关于 <code>awk</code> 可以介绍的内容太多了，限于篇幅，这里我们仅介绍一些基础知识。</p><p>首先， <code>&#123;print $2&#125;</code> 的作用是什么？ <code>awk</code> 程序接受一个模式串（可选），以及一个代码块，指定当模式匹配时应该做何种操作。默认当模式串即匹配所有行（上面命令中当用法）。 在代码块中，<code>$0</code> 表示整行的内容，<code>$1</code> 到 <code>$n</code> 为一行中的 n 个区域，区域的分割基于 <code>awk</code> 的域分隔符（默认是空格，可以通过<code>-F</code>来修改）。在这个例子中，我们的代码意思是：对于每一行文本，打印其第二个部分，也就是用户名。</p><p>让我们康康，还有什么炫酷的操作可以做。让我们统计一下所有以<code>c</code> 开头，以 <code>e</code> 结尾，并且仅尝试过一次登录的用户。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| awk &#x27;$1 == 1 &amp;&amp; $2 ~ /^c[^ ]*e$/ &#123; print $2 &#125;&#x27; | wc -l</span><br></pre></td></tr></table></figure><ul><li><p><code>awk</code>: 是一个文本处理工具，用于逐行扫描文件并按照给定的规则处理每一行。</p></li><li><pre><code>$1 == 1 &amp;&amp; $2 ~ /^c[^ ]*e$/<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  : 这是awk命令的条件部分，表示对于满足以下两个条件的行进行处理：</span><br><span class="line"></span><br><span class="line">  - `$1 == 1`: 第一个字段（以空格为分隔符的第一个部分）等于 `1`。</span><br><span class="line">  - `$2 ~ /^c[^ ]*e$/`: 第二个字段以 `c` 开头，以 `e` 结尾，并且中间没有空格。</span><br><span class="line"></span><br><span class="line">- `&#123; print $2 &#125;`: 这是 `awk` 命令的动作部分，表示对于满足条件的行，输出第二个字段的内容。</span><br><span class="line"></span><br><span class="line">整个命令的作用是读取输入数据，对满足条件的行输出第二个字段的内容。最后通过 `| wc -l` 将输出结果通过管道传递给 `wc -l` 命令，用于统计输出的行数。</span><br><span class="line"></span><br><span class="line">因此，这个命令的目的是统计输入数据中满足条件 `$1 == 1 &amp;&amp; $2 ~ /^c[^ ]*e$/` 的行中第二个字段的数量。</span><br><span class="line"></span><br><span class="line">不过，既然 `awk` 是一种编程语言，那么则可以这样：</span><br><span class="line"></span><br></pre></td></tr></table></figure>BEGIN &#123; rows = 0 &#125;$1 == 1 &amp;&amp; $2 ~ /^c[^ ]*e$/ &#123; rows += $1 &#125;END &#123; print rows &#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">`BEGIN` 也是一种模式，它会匹配输入的开头（ `END` 则匹配结尾）。然后，对每一行第一个部分进行累加，最后将结果输出。事实上，我们完全可以抛弃 `grep` 和 `sed` ，因为 `awk` 就可以[解决所有问题](https://backreference.org/2010/02/10/idiomatic-awk)。至于怎么做，就留给读者们做课后练习吧。</span><br><span class="line"></span><br><span class="line">## 分析数据</span><br><span class="line"></span><br><span class="line">想做数学计算也是可以的！例如这样，您可以将每行的数字加起来：</span><br><span class="line"></span><br></pre></td></tr></table></figure> | paste -sd+ | bc -l<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">假设有一个文本文件 `numbers.txt` 包含以下内容：</span><br><span class="line"></span><br></pre></td></tr></table></figure>复制代码12345<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">我们可以使用以下命令来对这些数字进行相加计算：</span><br><span class="line"></span><br></pre></td></tr></table></figure>cat numbers.txt | paste -sd+ | bc -l<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- `cat numbers.txt`：将文本文件 `numbers.txt` 的内容输出到标准输出。</span><br><span class="line">- `paste -sd+`：将输入的多个数字使用 `+` 符号连接在一起。(在这里，**`-s` 选项表示将每行合并成一行，而 `-d+` 表示使用 `+` 符号作为分隔符。**)</span><br><span class="line">- `bc -l`：对连接后的表达式进行数学运算。</span><br><span class="line"></span><br><span class="line">根据上面的示例，如果使用上述命令，将输出以下结果：</span><br><span class="line"></span><br></pre></td></tr></table></figure>15<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">这是因为 `1 + 2 + 3 + 4 + 5 = 15`。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">下面这种更加复杂的表达式也可以：</span><br><span class="line"></span><br></pre></td></tr></table></figure>echo &quot;2*($(data | paste -sd+))&quot; | bc -l<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">您可以通过多种方式获取统计数据。如果已经安装了R语言，[`st`](https://github.com/nferraz/st)是个不错的选择：</span><br><span class="line"></span><br></pre></td></tr></table></figure>ssh myserver journalctl | grep sshd | grep &quot;Disconnected from&quot; | sed -E &#39;s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$/\2/&#39; | sort | uniq -c | awk &#39;&#123;print $1&#125;&#39; | R --slave -e &#39;x &lt;- scan(file=&quot;stdin&quot;, quiet=TRUE); summary(x)&#39;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">R 也是一种编程语言，它非常适合被用来进行数据分析和[绘制图表](https://ggplot2.tidyverse.org/)。这里我们不会讲的特别详细， 您只需要知道`summary` 可以打印某个向量的统计结果。我们将输入的一系列数据存放在一个向量后，利用R语言就可以得到我们想要的统计数据。</span><br><span class="line"></span><br><span class="line">如果您希望绘制一些简单的图表， `gnuplot` 可以帮助到您：</span><br><span class="line"></span><br></pre></td></tr></table></figure>ssh myserver journalctl | grep sshd | grep &quot;Disconnected from&quot; | sed -E &#39;s/.*Disconnected from (invalid |authenticating )?user (.*) [^ ]+ port [0-9]+( \[preauth\])?$/\2/&#39; | sort | uniq -c | sort -nk1,1 | tail -n10 | gnuplot -p -e &#39;set boxwidth 0.5; plot &quot;-&quot; using 1:xtic(2) with boxes&#39;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 利用数据整理来确定参数</span><br><span class="line"></span><br><span class="line">有时候您要利用数据整理技术从一长串列表里找出你所需要安装或移除的东西。我们之前讨论的相关技术配合 `xargs` 即可实现：</span><br><span class="line"></span><br></pre></td></tr></table></figure>rustup toolchain list | grep nightly | grep -vE &quot;nightly-x86&quot; | sed &#39;s/-x86.*//&#39; | xargs rustup toolchain uninstall<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 整理二进制数据</span><br><span class="line"></span><br><span class="line">虽然到目前为止我们的讨论都是基于文本数据，**但对于二进制文件其实同样有用。例如我们可以用 ffmpeg 从相机中捕获一张图片，将其转换成灰度图后通过SSH将压缩后的文件发送到远端服务器，并在那里解压、存档并显示。**</span><br><span class="line"></span><br></pre></td></tr></table></figure>ffmpeg -loglevel panic -i /dev/video0 -frames 1 -f image2 - | convert - -colorspace gray - | gzip | ssh mymachine &#39;gzip -d | tee copy.jpg | env DISPLAY=:0 feh -&#39;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 课后练习（很值得一做）</span><br><span class="line"></span><br><span class="line">[习题解答](https://missing-semester-cn.github.io/missing-notes-and-solutions/2020/solutions//data-wrangling-solution)</span><br><span class="line"></span><br><span class="line">1. 学习一下这篇简短的 [交互式正则表达式教程](https://regexone.com/).</span><br><span class="line"></span><br><span class="line">2. 统计words文件 (`/usr/share/dict/words`) 中包含至少三个`a` 且不以`&#x27;s` 结尾的单词个数。这些单词中，出现频率前三的末尾两个字母是什么？ `sed`的 `y`命令，或者 `tr` 程序也许可以帮你解决大小写的问题。共存在多少种词尾两字母组合？还有一个很 有挑战性的问题：哪个组合从未出现过？</span><br><span class="line"></span><br><span class="line">3. 进行原地替换听上去很有诱惑力，例如： `sed s/REGEX/SUBSTITUTION/ input.txt &gt; input.txt`。但是这并不是一个明智的做法，为什么呢？还是说只有 `sed`是这样的? 查看 `man sed` 来完成这个问题</span><br><span class="line"></span><br><span class="line">4. 找出您最近十次开机的开机时间平均数、中位数和最长时间。在Linux上需要用到</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">   ```plaintext</span><br><span class="line">   journalctl</span><br></pre></td></tr></table></figure>   ，而在 macOS 上使用   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">log show</span><br></pre></td></tr></table></figure> 。找到每次起到开始和结束时的时间戳。在Linux上类似这样操作： <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Logs begin at ...</span><br></pre></td></tr></table></figure> 和 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemd[577]: Startup finished in ...</span><br></pre></td></tr></table></figure> 在 macOS 上, [查找](https://eclecticlight.co/2018/03/21/macos-unified-log-3-finding-your-way/): <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=== system boot:</span><br></pre></td></tr></table></figure> 和 <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Previous shutdown cause: 5</span><br></pre></td></tr></table></figure></code></pre></li></ul><ol start="5"><li><p>查看之前三次重启启动信息中不同的部分(参见 <code>journalctl</code>的<code>-b</code> 选项)。将这一任务分为几个步骤，首先获取之前三次启动的启动日志，也许获取启动日志的命令就有合适的选项可以帮助您提取前三次启动的日志，亦或者您可以使用<code>sed &#39;0,/STRING/d&#39;</code> 来删除<code>STRING</code>匹配到的字符串前面的全部内容。然后，过滤掉每次都不相同的部分，例如时间戳。下一步，重复记录输入行并对其计数(可以使用<code>uniq</code> )。最后，删除所有出现过3次的内容（因为这些内容是三次启动日志中的重复部分）。</p></li><li><p>在网上找一个类似 <a href="https://stats.wikimedia.org/EN/TablesWikipediaZZ.htm">这个</a> 或者<a href="https://ucr.fbi.gov/crime-in-the-u.s/2016/crime-in-the-u.s.-2016/topic-pages/tables/table-1">这个</a>的数据集。或者从<a href="https://www.springboard.com/blog/free-public-data-sets-data-science-project/">这里</a>找一些。使用 <code>curl</code> 获取数据集并提取其中两列数据，如果您想要获取的是HTML数据，那么<a href="https://github.com/EricChiang/pup"><code>pup</code></a>可能会更有帮助。对于JSON类型的数据，可以试试<a href="https://stedolan.github.io/jq/"><code>jq</code></a>。请使用一条指令来找出其中一列的最大值和最小值，用另外一条指令计算两列之间差的总和。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> missing semester </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象进阶（多态&amp;包&amp;final&amp;权限修饰符&amp;代码块）</title>
      <link href="/2024/03/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E5%A4%9A%E6%80%81-%E5%8C%85-final-%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6-%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%89/"/>
      <url>/2024/03/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E5%A4%9A%E6%80%81-%E5%8C%85-final-%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6-%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="day14"><a href="#day14" class="headerlink" title="day14"></a>day14</h1><h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul><li>多态</li><li>包</li><li>final</li><li>权限修饰符</li><li>代码块</li></ul><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><p><input disabled type="checkbox"> 能够说出使用多态的前提条件</p></li><li><p><input disabled type="checkbox"> 理解多态的向上转型</p></li><li><p><input disabled type="checkbox"> 理解多态的向下转型</p></li><li><p><input disabled type="checkbox"> 能够知道多态的使用场景</p></li><li><p><input disabled type="checkbox"> 包的作用</p></li><li><p><input disabled type="checkbox"> public和private权限修饰符的作用</p></li><li><p><input disabled type="checkbox"> 描述final修饰的类的特点</p></li><li><p><input disabled type="checkbox"> 描述final修饰的方法的特点</p></li><li><p><input disabled type="checkbox"> 描述final修饰的变量的特点</p></li></ul><h1 id="第一章-多态"><a href="#第一章-多态" class="headerlink" title="第一章 多态"></a>第一章 多态</h1><h2 id="1-1-多态的形式"><a href="#1-1-多态的形式" class="headerlink" title="1.1 多态的形式"></a>1.1 多态的形式</h2><p><strong>多态是继封装、继承之后，面向对象的第三大特性。</strong></p><p><strong>多态是出现在继承或者实现关系中的</strong>。</p><p><strong>多态体现的格式</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父类类型 变量名 = <span class="keyword">new</span> 子类/实现类构造器;</span><br><span class="line">变量名.方法名();</span><br></pre></td></tr></table></figure><p><strong>多态的前提</strong>：有继承关系，子类对象是可以赋值给父类类型的变量。例如Animal是一个动物类型，而Cat是一个猫类型。Cat继承了Animal，Cat对象也是Animal类型，自然可以赋值给父类类型的变量。</p><h2 id="1-2-多态的使用场景"><a href="#1-2-多态的使用场景" class="headerlink" title="1.2 多态的使用场景"></a>1.2 多态的使用场景</h2><p>如果没有多态，在下图中register方法只能传递学生对象，其他的Teacher和administrator对象是无法传递给register方法方法的，在这种情况下，只能定义三个不同的register方法分别接收学生，老师和管理员。</p><p><img src="/2024/03/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E5%A4%9A%E6%80%81-%E5%8C%85-final-%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6-%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%89/%E5%A4%9A%E6%80%81%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF1.png" alt="多态的应用场景"></p><p>有了多态之后，<strong>方法的形参就可以定义为共同的父类Person</strong>。</p><p><strong>要注意的是：</strong></p><ul><li>当一个方法的形参是一个类，我们可以传递这个类所有的子类对象。</li><li>当一个方法的形参是一个接口，我们可以传递这个接口所有的实现类对象（后面会学）。</li><li>而且多态还可以根据传递的不同对象来调用不同类中的方法。</li></ul><p><img src="/2024/03/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E5%A4%9A%E6%80%81-%E5%8C%85-final-%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6-%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%89/%E5%A4%9A%E6%80%81%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF2.png" alt="多态的应用场景"></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">父类：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    空参构造</span><br><span class="line">    带全部参数的构造</span><br><span class="line">    get和set方法</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;, &quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子类<span class="number">1</span>：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Administrator</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;管理员的信息为：&quot;</span> + getName() + <span class="string">&quot;, &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子类<span class="number">2</span>：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生的信息为：&quot;</span> + getName() + <span class="string">&quot;, &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">子类<span class="number">3</span>：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师的信息为：&quot;</span> + getName() + <span class="string">&quot;, &quot;</span> + getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">测试类：</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建三个对象，并调用register方法</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        s.setAge(<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        t.setName(<span class="string">&quot;王建国&quot;</span>);</span><br><span class="line">        t.setAge(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Administrator</span> <span class="variable">admin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Administrator</span>();</span><br><span class="line">        admin.setName(<span class="string">&quot;管理员&quot;</span>);</span><br><span class="line">        admin.setAge(<span class="number">35</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        register(s);</span><br><span class="line">        register(t);</span><br><span class="line">        register(admin);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个方法既能接收老师，又能接收学生，还能接收管理员</span></span><br><span class="line">    <span class="comment">//只能把参数写成这三个类型的父类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(Person p)</span>&#123;</span><br><span class="line">        p.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-多态的定义和前提"><a href="#1-3-多态的定义和前提" class="headerlink" title="1.3 多态的定义和前提"></a>1.3 多态的定义和前提</h2><p><strong>多态</strong>： 是指<strong>同一行为，具有多个不同表现形式</strong>。</p><p>从上面案例可以看出，Cat和Dog都是动物，<strong>都是吃这一行为，但是出现的效果（表现形式）是不一样的</strong>。</p><p> <strong>前提【重点】！！！</strong></p><ol><li><p>有<em>继承</em>或者<em>实现</em>（Interface接口）关系</p></li><li><p>方法的重写【意义体现：不重写，无意义】</p></li><li><p>父类引用指向子类对象【格式体现】</p><blockquote><p>父类类型：指子类对象继承的父类类型，或者实现的父接口类型。</p></blockquote></li></ol><h2 id="1-4-多态的运行特点"><a href="#1-4-多态的运行特点" class="headerlink" title="1.4 多态的运行特点"></a>1.4 多态的运行特点</h2><p><strong>调用成员变量时：编译看左边，运行看左边</strong></p><p><strong>调用成员方法时：编译看左边，运行看右边</strong></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Fu</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>()；</span><br><span class="line"><span class="comment">//编译看左边的父类中有没有name这个属性，没有就报错</span></span><br><span class="line"><span class="comment">//在实际运行的时候，把父类name属性的值打印出来</span></span><br><span class="line">System.out.println(f.name);</span><br><span class="line"><span class="comment">//编译看左边的父类中有没有show这个方法，没有就报错</span></span><br><span class="line"><span class="comment">//在实际运行的时候，运行的是子类中的show方法</span></span><br><span class="line">f.show();</span><br></pre></td></tr></table></figure><h2 id="1-5-多态的弊端"><a href="#1-5-多态的弊端" class="headerlink" title="1.5 多态的弊端"></a>1.5 多态的弊端</h2><p>我们已经知道多态编译阶段是看左边父类类型的，如果子类有些独有的功能（父类中没有子类定义的方法），此时<strong>多态的写法就无法访问子类独有功能了</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>｛</span><br><span class="line">        System.out.println(<span class="string">&quot;动物吃东西！&quot;</span>)</span><br><span class="line">    ｝</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃骨头&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        a.eat();</span><br><span class="line">        a.catchMouse();<span class="comment">//编译报错，编译看左边，Animal没有这个方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-引用类型转换"><a href="#1-6-引用类型转换" class="headerlink" title="1.6 引用类型转换"></a>1.6 引用类型转换</h2><h3 id="1-6-1-为什么要转型"><a href="#1-6-1-为什么要转型" class="headerlink" title="1.6.1 为什么要转型"></a>1.6.1 为什么要转型</h3><p><strong>多态的写法就无法访问子类独有功能了。</strong></p><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。也就是说，<strong>不能调用</strong>子类拥有，而父类没有的方法。编译都错误，更别说运行了。这也是多态给我们带来的一点”小麻烦”。所以，想要调用子类特有的方法，必须做向下转型。</p><p>回顾基本数据类型转换</p><ul><li>自动转换: 范围小的赋值给范围大的.自动完成:double d &#x3D; 5; </li><li>强制转换: 范围大的赋值给范围小的,强制转换:int i &#x3D; (int)3.14</li></ul><p>​     多态的转型分为<strong>向上转型（自动转换）与向下转型（强制转换）</strong>两种。</p><h3 id="1-6-2-向上转型（自动转换）"><a href="#1-6-2-向上转型（自动转换）" class="headerlink" title="1.6.2 向上转型（自动转换）"></a>1.6.2 向上转型（自动转换）</h3><ul><li><strong>向上转型</strong>：多态本身是子类类型向父类类型向上转换（自动转换）的过程，这个过程是默认的。<br>当父类引用指向一个子类对象时，便是向上转型。<br>使用格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">父类类型  变量名 = <span class="keyword">new</span> 子类类型();</span><br><span class="line">如：<span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br></pre></td></tr></table></figure><p><strong>原因是：父类类型相对与子类来说是大范围的类型，Animal是动物类，是父类类型。Cat是猫类，是子类类型。Animal类型的范围当然很大，包含一切动物。</strong>所以子类范围小可以直接自动转型给父类类型的变量。</p><h3 id="1-6-3-向下转型（强制转换）"><a href="#1-6-3-向下转型（强制转换）" class="headerlink" title="1.6.3 向下转型（强制转换）"></a>1.6.3 向下转型（强制转换）</h3><ul><li><strong>向下转型</strong>：父类类型向子类类型向下转换的过程，这个过程是强制的。<br>一个已经向上转型的子类对象，将父类引用转为子类引用，可以使用强制类型转换的格式，便是向下转型。</li></ul><p>使用格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">子类类型 变量名 = (子类类型) 父类变量名;</span><br><span class="line">如:<span class="type">Aniaml</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">   <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span>(Cat) a;  </span><br></pre></td></tr></table></figure><h3 id="1-6-4-案例演示"><a href="#1-6-4-案例演示" class="headerlink" title="1.6.4 案例演示"></a>1.6.4 案例演示</h3><p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。也就是说，<strong>不能调用</strong>子类拥有，而父类没有的方法。编译都错误，更别说运行了。这也是多态给我们带来的一点”小麻烦”。所以，想要调用子类特有的方法，必须做向下转型。</p><p>转型演示，代码如下：</p><p>定义类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃鱼&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;抓老鼠&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;吃骨头&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">watchHouse</span><span class="params">()</span> &#123;  </span><br><span class="line">        System.out.println(<span class="string">&quot;看家&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型  </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        a.eat(); <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型  </span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;       </span><br><span class="line">        c.catchMouse(); <span class="comment">// 调用的是 Cat 的 catchMouse</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-5-转型的异常"><a href="#1-6-5-转型的异常" class="headerlink" title="1.6.5 转型的异常"></a>1.6.5 转型的异常</h3><p>转型的过程中，一不小心就会遇到这样的问题，请看如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型  </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型  </span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog)a;       </span><br><span class="line">        d.watchHouse();        <span class="comment">// 调用的是 Dog 的 watchHouse 【运行报错】</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码可以通过编译，但是运行时，却报出了 **<code>ClassCastException</code> ，&#96;类型转换异常！这是因为，明明创建了Cat类型对象，运行时，当然不能转换成Dog对象的。</p><h3 id="1-6-6-instanceof关键字"><a href="#1-6-6-instanceof关键字" class="headerlink" title="1.6.6 instanceof关键字"></a>1.6.6 instanceof关键字</h3><p>为了避免ClassCastException的发生，<strong>Java提供了 <code>instanceof</code> 关键字，给引用变量做类型的校验</strong>，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">变量名 <span class="keyword">instanceof</span> 数据类型 </span><br><span class="line">如果变量属于该数据类型或者其子类类型，返回<span class="literal">true</span>。</span><br><span class="line">如果变量不属于该数据类型或者其子类类型，返回<span class="literal">false</span>。</span><br></pre></td></tr></table></figure><p>所以，转换前，我们最好先做一个判断，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 向上转型  </span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  </span><br><span class="line">        a.eat();               <span class="comment">// 调用的是 Cat 的 eat</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型  </span></span><br><span class="line">        <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat)&#123;</span><br><span class="line">            <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;       </span><br><span class="line">            c.catchMouse();        <span class="comment">// 调用的是 Cat 的 catchMouse</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Dog)&#123;</span><br><span class="line">            <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> (Dog)a;       </span><br><span class="line">            d.watchHouse();       <span class="comment">// 调用的是 Dog 的 watchHouse</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-6-7-instanceof新特性"><a href="#1-6-7-instanceof新特性" class="headerlink" title="1.6.7 instanceof新特性"></a>1.6.7 instanceof新特性</h3><p><strong>JDK14的时候提出了新特性，把判断和强转合并成了一行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新特性</span></span><br><span class="line"><span class="comment">//先判断a是否为Dog类型，如果是，则强转成Dog类型，转换之后变量名为d</span></span><br><span class="line"><span class="comment">//如果不是，则不强转，结果直接是false</span></span><br><span class="line"><span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog d)&#123;</span><br><span class="line">    d.lookHome();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat c)&#123;</span><br><span class="line">    c.catchMouse();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有这个类型，无法转换&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-7-综合练习"><a href="#1-7-综合练习" class="headerlink" title="1.7 综合练习"></a>1.7 综合练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">需求：根据需求完成代码:</span><br><span class="line"><span class="number">1.</span>定义狗类</span><br><span class="line">属性：</span><br><span class="line">年龄，颜色</span><br><span class="line">行为:</span><br><span class="line">eat(String something)(something表示吃的东西)</span><br><span class="line">看家lookHome方法(无参数)</span><br><span class="line"><span class="number">2.</span>定义猫类</span><br><span class="line">属性：</span><br><span class="line">年龄，颜色</span><br><span class="line">行为:</span><br><span class="line">eat(String something)方法(something表示吃的东西)</span><br><span class="line">逮老鼠catchMouse方法(无参数)</span><br><span class="line"><span class="number">3.</span>定义Person类<span class="comment">//饲养员</span></span><br><span class="line">属性：</span><br><span class="line">姓名，年龄</span><br><span class="line">行为：</span><br><span class="line">keepPet(Dog dog,String something)方法</span><br><span class="line">功能：喂养宠物狗，something表示喂养的东西</span><br><span class="line">行为：</span><br><span class="line">keepPet(Cat cat,String something)方法</span><br><span class="line">功能：喂养宠物猫，something表示喂养的东西</span><br><span class="line">生成空参有参构造，set和get方法  </span><br><span class="line"><span class="number">4.</span>定义测试类(完成以下打印效果):</span><br><span class="line">keepPet(Dog dog,String somethind)方法打印内容如下：</span><br><span class="line">年龄为<span class="number">30</span>岁的老王养了一只黑颜色的<span class="number">2</span>岁的狗</span><br><span class="line"><span class="number">2</span>岁的黑颜色的狗两只前腿死死的抱住骨头猛吃</span><br><span class="line">keepPet(Cat cat,String somethind)方法打印内容如下：</span><br><span class="line">年龄为<span class="number">25</span>岁的老李养了一只灰颜色的<span class="number">3</span>岁的猫</span><br><span class="line"><span class="number">3</span>岁的灰颜色的猫眯着眼睛侧着头吃鱼</span><br><span class="line"><span class="number">5.</span>思考：</span><br><span class="line"><span class="number">1.</span>Dog和Cat都是Animal的子类，以上案例中针对不同的动物，定义了不同的keepPet方法，过于繁琐，能否简化，并体会简化后的好处？</span><br><span class="line"><span class="number">2.</span>Dog和Cat虽然都是Animal的子类，但是都有其特有方法，能否想办法在keepPet中调用特有方法？</span><br></pre></td></tr></table></figure><p>画图分析：</p><p><img src="/2024/03/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E5%A4%9A%E6%80%81-%E5%8C%85-final-%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6-%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%89/%E5%A4%9A%E6%80%81%E7%BB%83%E4%B9%A0%E7%9A%84%E5%88%86%E6%9E%90.png" alt="多态练习的分析"></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动物类（父类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(<span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String something)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物在吃&quot;</span> + something);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//猫类（子类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(<span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(age, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String something)</span> &#123;</span><br><span class="line">        System.out.println(getAge() + <span class="string">&quot;岁的&quot;</span> + getColor() + <span class="string">&quot;颜色的猫眯着眼睛侧着头吃&quot;</span> + something);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//狗类（子类）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(<span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(age, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//行为</span></span><br><span class="line">    <span class="comment">//eat(String something)(something表示吃的东西)</span></span><br><span class="line">    <span class="comment">//看家lookHome方法(无参数)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(String something)</span> &#123;</span><br><span class="line">        System.out.println(getAge() + <span class="string">&quot;岁的&quot;</span> + getColor() + <span class="string">&quot;颜色的狗两只前腿死死的抱住&quot;</span> + something + <span class="string">&quot;猛吃&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookHome</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;狗在看家&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//饲养员类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//饲养狗</span></span><br><span class="line">   <span class="comment">/* public void keepPet(Dog dog, String something) &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;年龄为&quot; + age + &quot;岁的&quot; + name + &quot;养了一只&quot; + dog.getColor() + &quot;颜色的&quot; + dog.getAge() + &quot;岁的狗&quot;);</span></span><br><span class="line"><span class="comment">        dog.eat(something);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //饲养猫</span></span><br><span class="line"><span class="comment">    public void keepPet(Cat cat, String something) &#123;</span></span><br><span class="line"><span class="comment">        System.out.println(&quot;年龄为&quot; + age + &quot;岁的&quot; + name + &quot;养了一只&quot; + cat.getColor() + &quot;颜色的&quot; + cat.getAge() + &quot;岁的猫&quot;);</span></span><br><span class="line"><span class="comment">        cat.eat(something);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//想要一个方法，能接收所有的动物，包括猫，包括狗</span></span><br><span class="line">    <span class="comment">//方法的形参：可以写这些类的父类 Animal</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">keepPet</span><span class="params">(Animal a, String something)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Dog d)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄为&quot;</span> + age + <span class="string">&quot;岁的&quot;</span> + name + <span class="string">&quot;养了一只&quot;</span> + a.getColor() + <span class="string">&quot;颜色的&quot;</span> + a.getAge() + <span class="string">&quot;岁的狗&quot;</span>);</span><br><span class="line">            d.eat(something);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat c)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄为&quot;</span> + age + <span class="string">&quot;岁的&quot;</span> + name + <span class="string">&quot;养了一只&quot;</span> + c.getColor() + <span class="string">&quot;颜色的&quot;</span> + c.getAge() + <span class="string">&quot;岁的猫&quot;</span>);</span><br><span class="line">            c.eat(something);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;没有这种动物&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建对象并调用方法</span></span><br><span class="line">       <span class="comment">/* Person p1 = new Person(&quot;老王&quot;,30);</span></span><br><span class="line"><span class="comment">        Dog d = new Dog(2,&quot;黑&quot;);</span></span><br><span class="line"><span class="comment">        p1.keepPet(d,&quot;骨头&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Person p2 = new Person(&quot;老李&quot;,25);</span></span><br><span class="line"><span class="comment">        Cat c = new Cat(3,&quot;灰&quot;);</span></span><br><span class="line"><span class="comment">        p2.keepPet(c,&quot;鱼&quot;);*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建饲养员的对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;老王&quot;</span>,<span class="number">30</span>);</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="number">2</span>,<span class="string">&quot;黑&quot;</span>);</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="number">3</span>,<span class="string">&quot;灰&quot;</span>);</span><br><span class="line">        p.keepPet(d,<span class="string">&quot;骨头&quot;</span>);</span><br><span class="line">        p.keepPet(c,<span class="string">&quot;鱼&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第二章-包"><a href="#第二章-包" class="headerlink" title="第二章 包"></a>第二章 包</h1><h2 id="2-1-包"><a href="#2-1-包" class="headerlink" title="2.1 包"></a>2.1 包</h2><p>​包在操作系统中其实就是一个文件夹。<strong>包是用来分门别类的管理技术，不同的技术类放在不同的包下</strong>，方便管理和维护。</p><p>在IDEA项目中，建包的操作如下：</p><p><img src="/2024/03/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E5%A4%9A%E6%80%81-%E5%8C%85-final-%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6-%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%89/aaa.jpg"></p><p><strong>包名的命名规范</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">路径名.路径名.xxx.xxx</span><br><span class="line"><span class="comment">// 例如：com.itheima.oa</span></span><br></pre></td></tr></table></figure><ul><li>包名一般是公司域名的倒写。例如：黑马是<a href="http://www.itheima.com,包名就可以定义成com.itheima.技术名称./">www.itheima.com,包名就可以定义成com.itheima.技术名称。</a></li><li>包名必须用”.“连接。</li><li>包名的每个路径名必须是一个合法的标识符，而且不能是Java的关键字。</li></ul><h2 id="2-2-导包"><a href="#2-2-导包" class="headerlink" title="2.2 导包"></a>2.2 导包</h2><p>什么时候需要导包？</p><p>​情况一：在使用Java中提供的非核心包中的类时</p><p>​情况二：使用自己写的其他包中的类时</p><p>什么时候不需要导包？</p><p>​情况一：在使用Java核心包（java.lang）中的类时</p><p>​情况二：在使用自己写的同一个包中的类时</p><h2 id="2-3-使用不同包下的相同类怎么办？"><a href="#2-3-使用不同包下的相同类怎么办？" class="headerlink" title="2.3 使用不同包下的相同类怎么办？"></a>2.3 使用不同包下的相同类怎么办？</h2><p>假设demo1和demo2中都有一个Student该如何使用？</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用全类名的形式即可。</span></span><br><span class="line"><span class="comment">//全类名：包名 + 类名</span></span><br><span class="line"><span class="comment">//拷贝全类名的快捷键：选中类名crtl + shift + alt + c 或者用鼠标点copy，再点击copy Reference</span></span><br><span class="line">com.itheima.homework.demo1.<span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.itheima.homework.demo1.Student();</span><br><span class="line">com.itheima.homework.demo2.<span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">com</span>.itheima.homework.demo2.Student();</span><br></pre></td></tr></table></figure><h1 id="第三章-权限修饰符"><a href="#第三章-权限修饰符" class="headerlink" title="第三章 权限修饰符"></a>第三章 权限修饰符</h1><h2 id="3-1-权限修饰符"><a href="#3-1-权限修饰符" class="headerlink" title="3.1 权限修饰符"></a>3.1 权限修饰符</h2><p>​在Java中提供了四种访问权限，使用不同的访问权限修饰符修饰时，被修饰的内容会有不同的访问权限，我们之前已经学习过了public 和 private，接下来我们研究一下protected和默认修饰符的作用。</p><ul><li><p>public：公共的，所有地方都可以访问。</p></li><li><p>protected：本类 ，本包，其他包中的子类都可以访问。</p></li><li><p>默认（没有修饰符）：本类 ，本包可以访问。</p><p>注意：默认是空着不写，不是default</p></li><li><p>private：私有的，当前类可以访问。<br><code>public &gt; protected &gt; 默认 &gt; private</code></p></li></ul><h2 id="3-2-不同权限的访问能力"><a href="#3-2-不同权限的访问能力" class="headerlink" title="3.2 不同权限的访问能力"></a>3.2 不同权限的访问能力</h2><table><thead><tr><th></th><th>public</th><th>protected</th><th>默认</th><th>private</th></tr></thead><tbody><tr><td>同一类中</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>同一包中的类</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>不同包的子类</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>不同包中的无关类</td><td>√</td><td></td><td></td><td></td></tr></tbody></table><p>可见，public具有最大权限。private则是最小权限。</p><p>编写代码时，如果没有特殊的考虑，建议这样使用权限：</p><ul><li>成员变量使用<code>private</code> ，隐藏细节。</li><li>构造方法使用<code> public</code> ，方便创建对象。</li><li>成员方法使用<code>public</code> ，方便调用方法。</li></ul><blockquote><p>小贴士：不加权限修饰符，就是默认权限</p></blockquote><h1 id="第四章-final关键字"><a href="#第四章-final关键字" class="headerlink" title="第四章 final关键字"></a>第四章 final关键字</h1><h2 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h2><p>​学习了继承后，我们知道，子类可以在父类的基础上改写父类内容，比如，方法重写。</p><p>如果有一个方法我不想别人去改写里面内容，该怎么办呢？</p><p>Java提供了<code>final</code> 关键字，表示修饰的内容不可变。</p><ul><li><strong>final</strong>：  <strong>不可改变，最终的含义。可以用于修饰类、方法和变量。</strong><ul><li><strong>类：被修饰的类，不能被继承。</strong></li><li><strong>方法：被修饰的方法，不能被重写。</strong></li><li><strong>变量：被修饰的变量，有且仅能被赋值一次。</strong></li></ul></li></ul><h2 id="4-2-使用方式"><a href="#4-2-使用方式" class="headerlink" title="4.2 使用方式"></a>4.2 使用方式</h2><h3 id="4-2-1-修饰类"><a href="#4-2-1-修饰类" class="headerlink" title="4.2.1 修饰类"></a>4.2.1 修饰类</h3><p>final修饰的类，不能被继承。</p><p>格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> class 类名 &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// class Zi extends Fu &#123;&#125; // 报错,不能继承final的类</span></span><br></pre></td></tr></table></figure><p>查询API发现像 <code>public final class String</code> 、<code>public final class Math</code> 、<code>public final class Scanner</code> 等，很多我们学习过的类，都是被final修饰的，目的就是供我们使用，而不让我们所以改变其内容。</p><h3 id="4-2-2-修饰方法"><a href="#4-2-2-修饰方法" class="headerlink" title="4.2.2 修饰方法"></a>4.2.2 修饰方法</h3><p>final修饰的方法，不能被重写。<br>格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">final</span> 返回值类型 方法名(参数列表)&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu2</span> &#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu2 show1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu2 show2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi2</span> <span class="keyword">extends</span> <span class="title class_">Fu2</span> &#123;</span><br><span class="line"><span class="comment">//@Override</span></span><br><span class="line"><span class="comment">//public void show1() &#123;</span></span><br><span class="line"><span class="comment">//System.out.println(&quot;Zi2 show1&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi2 show2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-3-修饰变量-局部变量"><a href="#4-2-3-修饰变量-局部变量" class="headerlink" title="4.2.3 修饰变量-局部变量"></a>4.2.3 修饰变量-局部变量</h3><ol><li><strong>局部变量——基本类型</strong><br>基本类型的局部变量，被final修饰后，只能赋值一次，不能再更改。代码如下：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FinalDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 声明变量，使用final修饰</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> a;</span><br><span class="line">        <span class="comment">// 第一次赋值 </span></span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 第二次赋值</span></span><br><span class="line">        a = <span class="number">20</span>; <span class="comment">// 报错,不可重新赋值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 声明变量，直接赋值，使用final修饰</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="comment">// 第二次赋值</span></span><br><span class="line">        b = <span class="number">20</span>; <span class="comment">// 报错,不可重新赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思考，下面两种写法，哪种可以通过编译？</p><p>写法1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    c = i;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写法2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> i;</span><br><span class="line">    System.out.println(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据 <code>final</code> 的定义，写法1报错！写法2，为什么通过编译呢？因为每次循环，都是一次新的变量c。这也是大家需要注意的地方。</p><h3 id="4-2-4-修饰变量-成员变量"><a href="#4-2-4-修饰变量-成员变量" class="headerlink" title="4.2.4 修饰变量-成员变量"></a>4.2.4 修饰变量-成员变量</h3><p>成员变量涉及到初始化的问题，初始化方式有显示初始化和构造方法初始化，只能选择其中一个：</p><ul><li>显示初始化(在定义成员变量的时候立马赋值)（常用）；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>构造方法初始化(在构造方法中赋值一次)（不常用，了解即可）。</p><p><strong>注意：每个构造方法中都要赋值一次！</strong></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> num2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num2 = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//     this.num2 = 20;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num2 = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//     this.num2 = 20;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>被final修饰的常量名称，一般都有书写规范，所有字母都<strong>大写</strong>。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象进阶（static与继承）</title>
      <link href="/2024/03/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88static%E4%B8%8E%E7%BB%A7%E6%89%BF%EF%BC%89/"/>
      <url>/2024/03/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88static%E4%B8%8E%E7%BB%A7%E6%89%BF%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="面向对象进阶部分学习方法："><a href="#面向对象进阶部分学习方法：" class="headerlink" title="面向对象进阶部分学习方法："></a>面向对象进阶部分学习方法：</h2><p>特点：</p><p>​逻辑性没有那么强，但是概念会比较多。</p><p>​记忆部分重要的概念，理解课堂上讲解的需要大家掌握的概念，多多练习代码。</p><h1 id="day13"><a href="#day13" class="headerlink" title="day13"></a>day13</h1><h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul><li>复习回顾</li><li>static关键字</li><li>继承</li></ul><h2 id="教学目标"><a href="#教学目标" class="headerlink" title="教学目标"></a>教学目标</h2><ul><li><p><input disabled type="checkbox"> 能够掌握static关键字修饰的变量调用方式</p></li><li><p><input disabled type="checkbox"> 能够掌握static关键字修饰的方法调用方式</p></li><li><p><input disabled type="checkbox"> 知道静态代码块的格式和应用场景</p></li><li><p><input disabled type="checkbox"> 能够写出类的继承格式</p></li><li><p><input disabled type="checkbox"> 能够说出继承的特点</p></li><li><p><input disabled type="checkbox"> 能够区分this和super的作用</p></li><li><p><input disabled type="checkbox"> 能够说出方法重写的概念</p></li><li><p><input disabled type="checkbox"> 能够说出方法重写的注意事项</p></li></ul><h1 id="第一章-复习回顾"><a href="#第一章-复习回顾" class="headerlink" title="第一章 复习回顾"></a>第一章 复习回顾</h1><h2 id="1-1-如何定义类"><a href="#1-1-如何定义类" class="headerlink" title="1.1 如何定义类"></a>1.1 如何定义类</h2><p>类的定义格式如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">修饰符 class 类名 &#123;</span><br><span class="line">    <span class="comment">// 1.成员变量（属性）</span></span><br><span class="line">    <span class="comment">// 2.成员方法 (行为) </span></span><br><span class="line">    <span class="comment">// 3.构造方法 （初始化类的对象数据的）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 1.成员变量</span></span><br><span class="line">    <span class="keyword">public</span> String name ;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> sex ; <span class="comment">// &#x27;男&#x27;  &#x27;女&#x27;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2-如何通过类创建对象"><a href="#1-2-如何通过类创建对象" class="headerlink" title="1.2 如何通过类创建对象"></a>1.2 如何通过类创建对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 对象名称 = <span class="keyword">new</span> 类名();</span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br></pre></td></tr></table></figure><h2 id="1-3-封装"><a href="#1-3-封装" class="headerlink" title="1.3 封装"></a>1.3 封装</h2><h4 id="1-3-1-封装的步骤"><a href="#1-3-1-封装的步骤" class="headerlink" title="1.3.1 封装的步骤"></a>1.3.1 封装的步骤</h4><p>1.使用 <code>private</code> 关键字来修饰成员变量。</p><p>2.使用<code>public</code>修饰getter和setter方法。</p><h4 id="1-3-2-封装的步骤实现"><a href="#1-3-2-封装的步骤实现" class="headerlink" title="1.3.2 封装的步骤实现"></a>1.3.2 封装的步骤实现</h4><ol><li>private修饰成员变量</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>public修饰getter和setter方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String n)</span> &#123;</span><br><span class="line">      name = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (a &gt; <span class="number">0</span> &amp;&amp; a &lt;<span class="number">200</span>) &#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄非法！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-构造方法"><a href="#1-4-构造方法" class="headerlink" title="1.4 构造方法"></a>1.4 构造方法</h2><h3 id="1-4-1-构造方法的作用"><a href="#1-4-1-构造方法的作用" class="headerlink" title="1.4.1 构造方法的作用"></a>1.4.1 构造方法的作用</h3><p>在创建对象的时候，给成员变量进行初始化。</p><p>初始化即赋值的意思。</p><h3 id="1-4-2-构造方法的格式"><a href="#1-4-2-构造方法的格式" class="headerlink" title="1.4.2 构造方法的格式"></a>1.4.2 构造方法的格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 类名(形参列表) &#123;</span><br><span class="line">    <span class="comment">// 构造体代码，执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-3-构造方法的应用"><a href="#1-4-3-构造方法的应用" class="headerlink" title="1.4.3 构造方法的应用"></a>1.4.3 构造方法的应用</h3><p>首先定义一个学生类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 1.成员变量</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;无参数构造方法被调用&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来通过调用构造方法得到两个学生对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CreateStu02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个学生对象</span></span><br><span class="line">        <span class="comment">// 类名 变量名称 = new 类名();</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">// 使用对象访问成员变量，赋值</span></span><br><span class="line">        s1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">        s1.age = <span class="number">20</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用对象访问成员变量 输出值</span></span><br><span class="line">        System.out.println(s1.name);</span><br><span class="line">        System.out.println(s1.age); </span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="comment">// 使用对象访问成员变量 赋值</span></span><br><span class="line">        s2.name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line">        s2.age = <span class="number">18</span> ;</span><br><span class="line">        System.out.println(s2.name);</span><br><span class="line">        System.out.println(s2.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-5-this关键字的作用"><a href="#1-5-this关键字的作用" class="headerlink" title="1.5 this关键字的作用"></a>1.5 this关键字的作用</h2><h3 id="1-5-1-this关键字的作用"><a href="#1-5-1-this关键字的作用" class="headerlink" title="1.5.1 this关键字的作用"></a>1.5.1 this关键字的作用</h3><p>this代表所在类的当前对象的引用（地址值），即代表当前对象。</p><h3 id="1-5-2-this关键字的应用"><a href="#1-5-2-this关键字的应用" class="headerlink" title="1.5.2 this关键字的应用"></a>1.5.2 this关键字的应用</h3><h4 id="1-5-2-1-用于普通的gettter与setter方法"><a href="#1-5-2-1-用于普通的gettter与setter方法" class="headerlink" title="1.5.2.1 用于普通的gettter与setter方法"></a>1.5.2.1 用于普通的gettter与setter方法</h4><p>this出现在实例方法中，谁调用这个方法（哪个对象调用这个方法），this就代表谁（this就代表哪个对象）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">0</span> &amp;&amp; age &lt; <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;年龄非法！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-2-2-用于构造方法中"><a href="#1-5-2-2-用于构造方法中" class="headerlink" title="1.5.2.2 用于构造方法中"></a>1.5.2.2 用于构造方法中</h4><p>this出现在构造方法中，代表构造方法正在初始化的那个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 无参数构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;&#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有参数构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name,<span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第二章-static关键字"><a href="#第二章-static关键字" class="headerlink" title="第二章 static关键字"></a>第二章 static关键字</h1><h2 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h2><p>以前我们定义过如下类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> sex; <span class="comment">// &#x27;男&#x27;  &#x27;女&#x27;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 无参数构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有参数构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String  a)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们已经知道面向对象中，存在类和对象的概念，我们在类中定义了一些成员变量，例如name,age,sex ,结果发现这些成员变量，每个对象都存在（因为每个对象都可以访问）。</p><p>而像name ,age , sex确实是每个学生对象都应该有的属性，应该属于每个对象。</p><p>所以Java中成员（<strong>变量和方法</strong>）等是存在所属性的，Java是通过static关键字来区分的。<strong>static关键字在Java开发非常的重要，对于理解面向对象非常关键。</strong></p><p>关于 <code>static</code> 关键字的使用，它可以用来修饰的成员变量和成员方法，被static修饰的成员是<strong>属于类</strong>的是放在静态区中，没有static修饰的成员变量和方法则是<strong>属于对象</strong>的。我们上面案例中的成员变量都是没有static修饰的，所以属于每个对象。</p><h2 id="2-2-定义格式和使用"><a href="#2-2-定义格式和使用" class="headerlink" title="2.2 定义格式和使用"></a>2.2 定义格式和使用</h2><p><strong>static是静态的意思。 static可以修饰成员变量或者修饰方法。</strong></p><h3 id="2-2-1-静态变量及其访问"><a href="#2-2-1-静态变量及其访问" class="headerlink" title="2.2.1 静态变量及其访问"></a>2.2.1 静态变量及其访问</h3><p>有static修饰成员变量，<em><strong>说明这个成员变量是属于类</strong></em>的，这个成员变量称为<strong>类变量</strong>或者<strong>静态成员变量</strong>。 直接用  类名访问即可。因为类只有一个，所以静态成员变量在内存区域中也只存在一份。<strong>所有的对象都可以共享这个变量</strong>。</p><p><strong>如何使用呢</strong></p><p>例如现在我们需要定义传智全部的学生类，那么<strong>这些学生类的对象的学校属性应该都是“传智”，这个时候我们可以把这个属性定义成static修饰的静态成员变量。</strong></p><p><strong>定义格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">static</span> 数据类型 变量名 = 初始值；    </span><br></pre></td></tr></table></figure><p><strong>举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">schoolName</span> <span class="operator">=</span> <span class="string">&quot;传智播客&quot;</span>； <span class="comment">// 属于类，只有一份。</span></span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态成员变量的访问:</strong></p><p><strong>格式：类名.静态变量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    System.out.println(Student.schoolName); <span class="comment">// 传智播客</span></span><br><span class="line">    Student.schoolName = <span class="string">&quot;黑马程序员&quot;</span>;</span><br><span class="line">    System.out.println(Student.schoolName); <span class="comment">// 黑马程序员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-实例变量及其访问"><a href="#2-2-2-实例变量及其访问" class="headerlink" title="2.2.2 实例变量及其访问"></a>2.2.2 实例变量及其访问</h3><p>无static修饰的成员变量属于每个对象的，  这个成员变量叫<strong>实例变量</strong>，之前我们写成员变量就是实例成员变量。</p><p><strong>需要注意的是</strong>：实例成员变量<strong>属于每个对象，必须创建类的对象才可以访问。</strong>   </p><p><strong>格式：对象.实例成员变量</strong></p><h3 id="2-2-3-静态方法及其访问"><a href="#2-2-3-静态方法及其访问" class="headerlink" title="2.2.3 静态方法及其访问"></a>2.2.3 静态方法及其访问</h3><p>有static修饰成员方法，说明这个成员方法是属于类的，这个成员方法称为<strong>类方法或者</strong>静态方法。 直接用  类名访问即可。因为类只有一个，所以静态方法在内存区域中也只存在一份。所有的对象都可以共享这个方法。</p><p>与静态成员变量一样，静态方法也是直接通过<strong>类名.方法名称</strong>即可访问。</p><p><strong>举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">schoolName</span> <span class="operator">=</span> <span class="string">&quot;传智播客&quot;</span>； <span class="comment">// 属于类，只有一份。</span></span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;我们都在黑马程序员学习&quot;</span>);   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>静态成员变量的访问:</strong></p><p><strong>格式：类名.静态方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    Student.study();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-实例方法及其访问"><a href="#2-2-4-实例方法及其访问" class="headerlink" title="2.2.4 实例方法及其访问"></a>2.2.4 实例方法及其访问</h3><p>无static修饰的成员方法属于每个对象的，这个成员方法也叫做<strong>实例方法</strong>。</p><p><strong>需要注意的是</strong>：实例方法是属于每个对象，必须创建类的对象才可以访问。  </p><p><strong>格式：对象.实例方法</strong></p><p><strong>示例</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="comment">// 2.方法：行为</span></span><br><span class="line">    <span class="comment">// 无 static修饰，实例方法。属于每个对象，必须创建对象调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生可以跑步&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 无 static修饰，实例方法</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    <span class="comment">// 创建对象 </span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span> ;</span><br><span class="line">    stu.name = <span class="string">&quot;徐干&quot;</span>;</span><br><span class="line">    <span class="comment">// Student.sleep();// 报错，必须用对象访问。</span></span><br><span class="line">    stu.sleep();</span><br><span class="line">    stu.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-小结"><a href="#2-3-小结" class="headerlink" title="2.3 小结"></a>2.3 小结</h2><p>1.当 <code>static</code> 修饰成员变量或者成员方法时，该变量称为<strong>静态变量</strong>，该方法称为<strong>静态方法</strong>。该类的每个对象都<strong>共享</strong>同一个类的静态变量和静态方法。任何对象都可以更改该静态变量的值或者访问静态方法。但是不推荐这种方式去访问。因为静态变量或者静态方法直接通过类名访问即可，完全没有必要用对象去访问。</p><p>2.无static修饰的成员变量或者成员方法，称为<strong>实例变量，实例方法</strong>，实例变量和实例方法必须创建类的对象，然后通过对象来访问。</p><p>3.static修饰的成员属于类，会存储在静态区，是随着类的加载而加载的，且只加载一次，所以只有一份，节省内存。存储于一块固定的内存区域（静态区），所以，可以直接被类名调用。它优先于对象存在，所以，可以被所有对象共享。</p><p>4.无static修饰的成员，是属于对象，对象有多少个，他们就会出现多少份。所以必须由对象调用。</p><h1 id="第三章-继承"><a href="#第三章-继承" class="headerlink" title="第三章 继承"></a>第三章 继承</h1><h2 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h2><h3 id="3-1-1-引入"><a href="#3-1-1-引入" class="headerlink" title="3.1.1 引入"></a>3.1.1 引入</h3><p>假如我们要定义如下类:<br>学生类,老师类和工人类，分析如下。</p><ol><li><p>学生类<br>属性:姓名,年龄<br>行为:吃饭,睡觉</p></li><li><p>老师类<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，教书</p></li><li><p>班主任<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，管理</p></li></ol><p>如果我们定义了这三个类去开发一个系统，那么这三个类中就存在大量重复的信息（属性:姓名，年龄。行为：吃饭，睡觉）。这样就导致了相同代码大量重复，代码显得很臃肿和冗余，那么如何解决呢？</p><p>假如多个类中存在相同属性和行为时，我们可以将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要<strong>继承</strong>那一个类即可。如图所示：<br><img src="/2024/03/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88static%E4%B8%8E%E7%BB%A7%E6%89%BF%EF%BC%89/1.jpg"></p><p>其中，多个类可以称为<strong>子类</strong>，单独被继承的那一个类称为<strong>父类</strong>、<strong>超类（superclass）</strong>或者<strong>基类</strong>。</p><h3 id="3-1-2-继承的含义"><a href="#3-1-2-继承的含义" class="headerlink" title="3.1.2 继承的含义"></a>3.1.2 继承的含义</h3><p>继承描述的是事物之间的所属关系，这种关系是：<code>is-a</code> 的关系。例如，兔子属于食草动物，食草动物属于动物。可见，父类更通用，子类更具体。我们通过继承，可以使多种事物之间形成一种关系体系。</p><p><strong>继承</strong>：就是子类继承父类的<strong>属性</strong>和<strong>行为</strong>，使得子类对象可以直接具有与父类相同的属性、相同的行为。子类可以直接访问父类中的<strong>非私有</strong>的属性和行为。</p><h3 id="3-1-3-继承的好处"><a href="#3-1-3-继承的好处" class="headerlink" title="3.1.3 继承的好处"></a>3.1.3 继承的好处</h3><ol><li>提高<strong>代码的复用性</strong>（减少代码冗余，相同代码重复利用）。</li><li>使类与类之间产生了关系。</li></ol><h2 id="3-2-继承的格式"><a href="#3-2-继承的格式" class="headerlink" title="3.2 继承的格式"></a>3.2 继承的格式</h2><p>通过 <code>extends</code> 关键字，可以声明一个子类继承另外一个父类，定义格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class 父类 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 子类 extends 父类 &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>需要注意：Java是单继承的，一个类只能继承一个直接父类，跟现实世界很像，但是Java中的子类是更加强大的。</strong></p><h2 id="3-3-继承案例"><a href="#3-3-继承案例" class="headerlink" title="3.3 继承案例"></a>3.3 继承案例</h2><h3 id="3-3-1-案例"><a href="#3-3-1-案例" class="headerlink" title="3.3.1 案例"></a>3.3.1 案例</h3><p>请使用继承定义以下类:</p><ol><li>学生类<br>属性:姓名,年龄<br>行为:吃饭,睡觉</li><li>老师类<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，教书</li><li>班主任<br>属性:姓名,年龄，薪水<br>行为:吃饭,睡觉，管理</li></ol><h3 id="3-3-2-案例图解分析"><a href="#3-3-2-案例图解分析" class="headerlink" title="3.3.2 案例图解分析"></a>3.3.2 案例图解分析</h3><p>老师类，学生类，还有班主任类，实际上都是属于人类的，我们可以定义一个人类，把他们相同的属性和行为都定义在人类中，然后继承人类即可，子类特有的属性和行为就定义在子类中了。</p><p>如下图所示。</p><p><img src="/2024/03/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88static%E4%B8%8E%E7%BB%A7%E6%89%BF%EF%BC%89/360%E6%88%AA%E5%9B%BE20181202211331250.jpg"></p><h3 id="3-3-3-案例代码实现"><a href="#3-3-3-案例代码实现" class="headerlink" title="3.3.3 案例代码实现"></a>3.3.3 案例代码实现</h3><p><strong>1.父类Human类</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">   <span class="comment">// 合理隐藏</span></span><br><span class="line">   <span class="keyword">private</span> String name ;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age ;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 合理暴露</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.子类Teacher类</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary ;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">teach</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;老师在认真教技术！&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.子类Student类</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Human</span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.子类BanZhuren类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BanZhuren</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">    <span class="comment">// 工资</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary ;</span><br><span class="line">    </span><br><span class="line">       <span class="comment">// 特有方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">admin</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;班主任强调纪律问题！&quot;</span>)；</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSalary</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.测试类</strong></p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Teacher</span> <span class="variable">dlei</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Teacher</span>();</span><br><span class="line">        dlei.setName(<span class="string">&quot;播仔&quot;</span>);</span><br><span class="line">        dlei.setAge(<span class="string">&quot;31&quot;</span>);</span><br><span class="line">        dlei.setSalary(<span class="number">1000.99</span>);</span><br><span class="line">        System.out.println(dlei.getName());</span><br><span class="line">        System.out.println(dlei.getAge());</span><br><span class="line">        System.out.println(dlei.getSalary());</span><br><span class="line">        dlei.teach();</span><br><span class="line">        </span><br><span class="line">        <span class="type">BanZhuRen</span> <span class="variable">linTao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BanZhuRen</span>();</span><br><span class="line">        linTao.setName(<span class="string">&quot;灵涛&quot;</span>);</span><br><span class="line">        linTao.setAge(<span class="string">&quot;28&quot;</span>);</span><br><span class="line">        linTao.setSalary(<span class="number">1000.99</span>);</span><br><span class="line">        System.out.println(linTao.getName());</span><br><span class="line">        System.out.println(linTao.getAge());</span><br><span class="line">        System.out.println(linTao.getSalary());</span><br><span class="line">        linTao.admin();</span><br><span class="line"></span><br><span class="line">        <span class="type">Student</span> <span class="variable">xugan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        xugan.setName(<span class="string">&quot;播仔&quot;</span>);</span><br><span class="line">        xugan.setAge(<span class="string">&quot;31&quot;</span>);</span><br><span class="line">        <span class="comment">//xugan.setSalary(1000.99); // xugan没有薪水属性，报错！</span></span><br><span class="line">        System.out.println(xugan.getName());</span><br><span class="line">        System.out.println(xugan.getAge());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-4-小结"><a href="#3-3-4-小结" class="headerlink" title="3.3.4 小结"></a>3.3.4 小结</h3><p>1.继承实际上是子类相同的属性和行为可以定义在父类中，子类特有的属性和行为由自己定义，这样就实现了相同属性和行为的重复利用，从而提高了代码复用。</p><p>2.子类继承父类，就可以直接得到父类的成员变量和方法。是否可以继承所有成分呢？请看下节！</p><h2 id="3-4-子类不能继承的内容"><a href="#3-4-子类不能继承的内容" class="headerlink" title="3.4 子类不能继承的内容"></a>3.4 子类不能继承的内容</h2><h3 id="3-4-1-引入"><a href="#3-4-1-引入" class="headerlink" title="3.4.1 引入"></a>3.4.1 引入</h3><p>并不是父类的所有内容都可以给子类继承的：</p><p><strong>子类不能继承父类的构造方法！！！</strong></p><p><strong>值得注意的是子类可以继承父类的私有成员（成员变量，方法），只是子类无法直接访问而已，可以通过getter&#x2F;setter方法访问父类的private成员变量。</strong></p><h3 id="3-4-1-演示代码"><a href="#3-4-1-演示代码" class="headerlink" title="3.4.1 演示代码"></a>3.4.1 演示代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Zi</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line">        System.out.println(z.num1);</span><br><span class="line"><span class="comment">//System.out.println(z.num2); // 私有的子类无法使用</span></span><br><span class="line">        <span class="comment">// 通过getter/setter方法访问父类的private成员变量</span></span><br><span class="line">        System.out.println(z.getNum2());</span><br><span class="line"></span><br><span class="line">        z.show1();</span><br><span class="line">        <span class="comment">// z.show2(); // 私有的子类无法使用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;show2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNum2</span><span class="params">(<span class="type">int</span> num2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.num2 = num2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-继承后的特点—成员变量"><a href="#3-5-继承后的特点—成员变量" class="headerlink" title="3.5 继承后的特点—成员变量"></a>3.5 继承后的特点—成员变量</h2><p>当类之间产生了继承关系后，其中各类中的成员变量，又产生了哪些影响呢？</p><h3 id="3-5-1-成员变量不重名"><a href="#3-5-1-成员变量不重名" class="headerlink" title="3.5.1 成员变量不重名"></a>3.5.1 成员变量不重名</h3><p>如果子类父类中出现<strong>不重名</strong>的成员变量，这时的访问是<strong>没有影响的</strong>。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">// Fu中的成员变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">// Zi中的成员变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// Zi中的成员方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 访问父类中的num</span></span><br><span class="line">System.out.println(<span class="string">&quot;Fu num=&quot;</span>+num); <span class="comment">// 继承而来，所以直接访问。</span></span><br><span class="line"><span class="comment">// 访问子类中的num2</span></span><br><span class="line">System.out.println(<span class="string">&quot;Zi num2=&quot;</span>+num2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建子类对象</span></span><br><span class="line"><span class="type">Zi</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>(); </span><br><span class="line">      <span class="comment">// 调用子类中的show方法</span></span><br><span class="line">z.show();  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">演示结果：</span><br><span class="line"><span class="type">Fu</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span></span><br><span class="line"><span class="type">Zi</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><h3 id="3-5-2-成员变量重名"><a href="#3-5-2-成员变量重名" class="headerlink" title="3.5.2 成员变量重名"></a>3.5.2 成员变量重名</h3><p>如果子类父类中出现<strong>重名</strong>的成员变量，这时的访问是<strong>有影响的</strong>。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu1</span> &#123;</span><br><span class="line"><span class="comment">// Fu中的成员变量。</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi1</span> <span class="keyword">extends</span> <span class="title class_">Fu1</span> &#123;</span><br><span class="line"><span class="comment">// Zi中的成员变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">// 访问父类中的num</span></span><br><span class="line">System.out.println(<span class="string">&quot;Fu num=&quot;</span> + num);</span><br><span class="line"><span class="comment">// 访问子类中的num</span></span><br><span class="line">System.out.println(<span class="string">&quot;Zi num=&quot;</span> + num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建子类对象</span></span><br><span class="line"><span class="type">Zi1</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi1</span>(); </span><br><span class="line">      <span class="comment">// 调用子类中的show方法</span></span><br><span class="line">z1.show(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">演示结果：</span><br><span class="line"><span class="type">Fu</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">6</span></span><br><span class="line"><span class="type">Zi</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><p>子父类中出现了同名的成员变量时，<strong>子类会优先访问自己对象中的成员变量</strong>。如果此时想访问父类成员变量如何解决呢？我们可以使用<strong>super关键字</strong>。</p><h3 id="3-5-3-super访问父类成员变量"><a href="#3-5-3-super访问父类成员变量" class="headerlink" title="3.5.3  super访问父类成员变量"></a>3.5.3  super访问父类成员变量</h3><p>子父类中出现了同名的成员变量时，在子类中需要访问父类中非私有成员变量时，需要使用<code>super</code> 关键字，修饰父类成员变量，类似于之前学过的 <code>this</code> 。</p><p>需要注意的是：<strong>super代表的是父类对象的引用，this代表的是当前对象的引用。</strong></p><p><strong>使用格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>.父类成员变量名</span><br></pre></td></tr></table></figure><p>子类方法需要修改，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">// Fu中的成员变量。</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">// Zi中的成员变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 访问方法中的num</span></span><br><span class="line">        System.out.println(<span class="string">&quot;method num=&quot;</span> + num);</span><br><span class="line">        <span class="comment">// 访问子类中的num</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Zi num=&quot;</span> + <span class="built_in">this</span>.num);</span><br><span class="line">        <span class="comment">// 访问父类中的num</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Fu num=&quot;</span> + <span class="built_in">super</span>.num);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo04</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建子类对象</span></span><br><span class="line"><span class="type">Zi1</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi1</span>(); </span><br><span class="line">      <span class="comment">// 调用子类中的show方法</span></span><br><span class="line">z1.show(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">演示结果：</span><br><span class="line">method num=<span class="number">1</span></span><br><span class="line">Zi num=<span class="number">6</span></span><br><span class="line">Fu num=<span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p>小贴士：Fu 类中的成员变量是非私有的，子类中可以直接访问。若Fu 类中的成员变量私有了，子类是不能直接访问的。通常编码时，我们遵循封装的原则，使用private修饰成员变量，那么如何访问父类的私有成员变量呢？对！可以在父类中提供公共的getXxx方法和setXxx方法。</p></blockquote><h2 id="3-6-继承后的特点—成员方法"><a href="#3-6-继承后的特点—成员方法" class="headerlink" title="3.6 继承后的特点—成员方法"></a>3.6 继承后的特点—成员方法</h2><p>当类之间产生了关系，其中各类中的成员方法，又产生了哪些影响呢？</p><h3 id="3-6-1-成员方法不重名"><a href="#3-6-1-成员方法不重名" class="headerlink" title="3.6.1 成员方法不重名"></a>3.6.1 成员方法不重名</h3><p>如果子类父类中出现<strong>不重名</strong>的成员方法，这时的调用是<strong>没有影响的</strong>。对象调用方法时，会先在子类中查找有没有对应的方法，若子类中存在就会执行子类中的方法，若子类中不存在就会执行父类中相应的方法。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu类中的show方法执行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show2</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi类中的show2方法执行&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>  <span class="keyword">class</span> <span class="title class_">Demo05</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Zi</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line">     <span class="comment">//子类中没有show方法，但是可以找到父类方法去执行</span></span><br><span class="line">z.show(); </span><br><span class="line">z.show2();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-2-成员方法重名"><a href="#3-6-2-成员方法重名" class="headerlink" title="3.6.2 成员方法重名"></a>3.6.2 成员方法重名</h3><p>如果子类父类中出现<strong>重名</strong>的成员方法，则创建子类对象调用该方法的时候，<strong>子类对象会优先调用自己的方法</strong>。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Fu show&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Zi</span> <span class="keyword">extends</span> <span class="title class_">Fu</span> &#123;</span><br><span class="line"><span class="comment">//子类重写了父类的show方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;Zi show&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsDemo05</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Zi</span> <span class="variable">z</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Zi</span>();</span><br><span class="line">     <span class="comment">// 子类中有show方法，只执行重写后的show方法</span></span><br><span class="line">z.show();  <span class="comment">// Zi show</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-7-方法重写（override）"><a href="#3-7-方法重写（override）" class="headerlink" title="3.7 方法重写（override）"></a>3.7 方法重写（override）</h2><h3 id="3-7-1-概念"><a href="#3-7-1-概念" class="headerlink" title="3.7.1 概念"></a>3.7.1 概念</h3><p><strong>方法重写</strong> ：子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效果，也称为重写或者复写。<strong>声明不变，重新实现</strong>。</p><h3 id="3-7-2-使用场景与案例"><a href="#3-7-2-使用场景与案例" class="headerlink" title="3.7.2 使用场景与案例"></a>3.7.2 使用场景与案例</h3><p>发生在子父类之间的关系。<br>子类继承了父类的方法，但是子类觉得父类的这方法不足以满足自己的需求，子类重新写了一个与父类同名的方法，以便覆盖父类的该方 法。</p><p>例如：我们定义了一个动物类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物跑的很快！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物都可以叫~~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后定义一个猫类，猫可能认为父类cry()方法不能满足自己的需求</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我们一起学猫叫，喵喵喵！喵的非常好听！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="comment">// 创建子类对象</span></span><br><span class="line">      <span class="type">Cat</span> <span class="variable">ddm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>()；</span><br><span class="line">        <span class="comment">// 调用父类继承而来的方法</span></span><br><span class="line">        ddm.run();</span><br><span class="line">      <span class="comment">// 调用子类重写的方法</span></span><br><span class="line">      ddm.cry();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-2-Override重写注解"><a href="#3-7-2-Override重写注解" class="headerlink" title="3.7.2 @Override重写注解"></a>3.7.2 @Override重写注解</h3><ul><li><p>@Override:注解，重写注解校验！</p></li><li><p>这个注解标记的方法，就说明这个方法必须是重写父类的方法，否则编译阶段报错。</p></li><li><p>建议重写都加上这个注解，一方面可以<strong>提高代码的可读性</strong>，一方面可以防止重写出错！</p><p>加上后的子类代码形式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">     <span class="comment">// 声明不变，重新实现</span></span><br><span class="line">    <span class="comment">// 方法名称与父类全部一样，只是方法体中的功能重写了！</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我们一起学猫叫，喵喵喵！喵的非常好听！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-7-3-注意事项"><a href="#3-7-3-注意事项" class="headerlink" title="3.7.3 注意事项"></a>3.7.3 注意事项</h3><ol><li>方法重写是发生在子父类之间的关系。</li><li>子类方法覆盖父类方法，必须要保证权限大于等于父类权限(public&gt;protected&gt;不写&gt;private)。</li><li>子类方法覆盖父类方法，返回值类型、函数名和参数列表都要一模一样。</li></ol><h2 id="3-8-继承后的特点—构造方法"><a href="#3-8-继承后的特点—构造方法" class="headerlink" title="3.8 继承后的特点—构造方法"></a>3.8 继承后的特点—构造方法</h2><h3 id="3-8-1-引入"><a href="#3-8-1-引入" class="headerlink" title="3.8.1 引入"></a>3.8.1 引入</h3><p>当类之间产生了关系，其中各类中的构造方法，又产生了哪些影响呢？<br>首先我们要回忆两个事情，构造方法的定义格式和作用。</p><ol><li><strong>构造方法的名字是与类名一致的。所以子类是无法继承父类构造方法的</strong>。</li><li>构造方法的作用是初始化对象成员变量数据的。所以子类的初始化过程中，必须先执行父类的初始化动作。子类的构造方法中默认有一个<code>super()</code> ，表示调用父类的构造方法，父类成员变量初始化后，才可以给子类使用。（<strong>先有爸爸，才能有儿子</strong>）</li></ol><p><strong>继承后子类构方法器特点:子类所有构造方法的第一行都会默认先调用父类的无参构造方法</strong></p><h3 id="3-8-2-案例演示"><a href="#3-8-2-案例演示" class="headerlink" title="3.8.2 案例演示"></a>3.8.2 案例演示</h3><p>按如下需求定义类:</p><ol><li>人类<br>成员变量: 姓名,年龄<br>成员方法: 吃饭</li><li>学生类<br>成员变量: 姓名,年龄,成绩<br>成员方法: 吃饭</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super(); // 调用父类无参,默认就存在，可以不写，必须再第一行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="comment">//super();  // 调用父类无参,默认就存在，可以不写，必须再第一行</span></span><br><span class="line">        <span class="built_in">this</span>.score = score;    </span><br><span class="line">        System.out.println(<span class="string">&quot;子类有参&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------&quot;</span>);</span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">99.9</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line">父类无参</span><br><span class="line">子类无参</span><br><span class="line">----------</span><br><span class="line">父类无参</span><br><span class="line">子类有参</span><br></pre></td></tr></table></figure><h3 id="3-8-3-小结"><a href="#3-8-3-小结" class="headerlink" title="3.8.3 小结"></a>3.8.3 小结</h3><ul><li>子类构造方法执行的时候，都会在第一行默认先调用父类无参数构造方法一次。</li><li>子类构造方法的第一行都隐含了一个**super()<strong>去调用父类无参数构造方法，</strong>super()**可以省略不写。</li></ul><h2 id="3-9-super-…-和this-…"><a href="#3-9-super-…-和this-…" class="headerlink" title="3.9 super(…)和this(…)"></a>3.9 super(…)和this(…)</h2><h3 id="3-9-1-引入"><a href="#3-9-1-引入" class="headerlink" title="3.9.1  引入"></a>3.9.1  引入</h3><p>请看上节中的如下案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super(); // 调用父类无参构造方法,默认就存在，可以不写，必须在第一行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="comment">//super();  // 调用父类无参构造方法,默认就存在，可以不写，必须在第一行</span></span><br><span class="line">        <span class="built_in">this</span>.score = score;    </span><br><span class="line">        System.out.println(<span class="string">&quot;子类有参&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用子类有参数构造方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">99.9</span>);</span><br><span class="line">        System.out.println(s2.getScore()); <span class="comment">// 99.9</span></span><br><span class="line">        System.out.println(s2.getName()); <span class="comment">// 输出 null</span></span><br><span class="line">        System.out.println(s2.getAge()); <span class="comment">// 输出 0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现，子类有参数构造方法只是初始化了自己对象中的成员变量score，而父类中的成员变量name和age依然是没有数据的，怎么解决这个问题呢，我们可以借助与super(…)去调用父类构造方法，以便初<strong>始化继承自父类对象的name和age</strong>.</p><h3 id="3-9-2-super和this的用法格式"><a href="#3-9-2-super和this的用法格式" class="headerlink" title="3.9.2 super和this的用法格式"></a>3.9.2 super和this的用法格式</h3><p>super和this完整的用法如下，其中this，super访问成员我们已经接触过了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.成员变量    --    本类的</span><br><span class="line"><span class="built_in">super</span>.成员变量    --    父类的</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.成员方法名()  --    本类的    </span><br><span class="line"><span class="built_in">super</span>.成员方法名()   --    父类的</span><br></pre></td></tr></table></figure><p>接下来我们使用调用构造方法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">super</span>(...) -- 调用父类的构造方法，根据参数匹配确认</span><br><span class="line"><span class="built_in">this</span>(...) -- 调用本类的其他构造方法，根据参数匹配确认</span><br></pre></td></tr></table></figure><h3 id="3-9-3-super-…-用法演示"><a href="#3-9-3-super-…-用法演示" class="headerlink" title="3.9.3 super(….)用法演示"></a>3.9.3 super(….)用法演示</h3><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span><span class="string">&quot;凤姐&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;父类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name , <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name ;</span><br><span class="line">        <span class="built_in">this</span>.age = age ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">score</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//super(); // 调用父类无参构造方法,默认就存在，可以不写，必须再第一行</span></span><br><span class="line">        System.out.println(<span class="string">&quot;子类无参&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name ， <span class="type">int</span> age，<span class="type">double</span> score)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name ,age);<span class="comment">// 调用父类有参构造方法Person(String name , int age)初始化name和age！！！</span></span><br><span class="line">        <span class="built_in">this</span>.score = score;    </span><br><span class="line">        System.out.println(<span class="string">&quot;子类有参&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="comment">// getter/setter省略</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用子类有参数构造方法</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>，<span class="number">20</span>，<span class="number">99</span>);</span><br><span class="line">        System.out.println(s2.getScore()); <span class="comment">// 99</span></span><br><span class="line">        System.out.println(s2.getName()); <span class="comment">// 输出 张三</span></span><br><span class="line">        System.out.println(s2.getAge()); <span class="comment">// 输出 20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p><strong>子类的每个构造方法中均有默认的super()，调用父类的空参构造。手动调用父类构造会覆盖默认的super()。</strong></p><p><strong>super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。</strong></p><p>super(..)是根据参数去确定调用父类哪个构造方法的。</p><h3 id="3-9-4-super-…-案例图解"><a href="#3-9-4-super-…-案例图解" class="headerlink" title="3.9.4 super(…)案例图解"></a>3.9.4 super(…)案例图解</h3><p><strong>父类空间优先于子类对象产生</strong></p><p>在每次创建子类对象时，先初始化父类空间，再创建其子类对象本身。目的在于子类对象中包含了其对应的父类空间，便可以包含其父类的成员，如果父类成员非private修饰，则子类可以随意使用父类成员。代码体现在子类的构造七调用时，一定先调用父类的构造方法。理解图解如下：</p><p><img src="/2024/03/08/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88static%E4%B8%8E%E7%BB%A7%E6%89%BF%EF%BC%89/2.jpg"></p><h3 id="3-9-5-this-…-用法演示"><a href="#3-9-5-this-…-用法演示" class="headerlink" title="3.9.5 this(…)用法演示"></a>3.9.5 this(…)用法演示</h3><p>this(…)</p><ul><li>默认是去找本类中的其他构造方法，根据参数来确定具体调用哪一个构造方法。</li><li>为了借用其他构造方法的功能。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima._08this和<span class="built_in">super</span>调用构造方法;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * this(...):</span></span><br><span class="line"><span class="comment"> *    默认是去找本类中的其他构造方法，根据参数来确定具体调用哪一个构造方法。</span></span><br><span class="line"><span class="comment"> *    为了借用其他构造方法的功能。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThisDemo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">xuGan</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        System.out.println(xuGan.getName()); <span class="comment">// 输出:徐干</span></span><br><span class="line">        System.out.println(xuGan.getAge());<span class="comment">// 输出:21</span></span><br><span class="line">        System.out.println(xuGan.getSex());<span class="comment">// 输出： 男</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age ;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> sex ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// 很弱，我的兄弟很牛逼啊，我可以调用其他构造方法：Student(String name, int age, char sex)</span></span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;徐干&quot;</span>,<span class="number">21</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age, <span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name ;</span><br><span class="line">        <span class="built_in">this</span>.age = age   ;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex   ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(<span class="type">char</span> sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-9-6-小结"><a href="#3-9-6-小结" class="headerlink" title="3.9.6 小结"></a>3.9.6 小结</h3><ul><li><p><strong>子类的每个构造方法中均有默认的super()，调用父类的空参构造。手动调用父类构造会覆盖默认的super()。</strong></p></li><li><p><strong>super() 和 this() 都必须是在构造方法的第一行，所以不能同时出现。</strong></p></li><li><p><strong>super(..)和this(…)是根据参数去确定调用父类哪个构造方法的。</strong></p></li><li><p>super(..)可以调用父类构造方法初始化继承自父类的成员变量的数据。</p></li><li><p>this(..)可以调用本类中的其他构造方法。</p></li></ul><h2 id="3-10-继承的特点"><a href="#3-10-继承的特点" class="headerlink" title="3.10 继承的特点"></a>3.10 继承的特点</h2><ol><li><p>Java只支持单继承，不支持多继承。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个类只能有一个父类，不可以有多个父类。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125; <span class="comment">// ok</span></span><br><span class="line"><span class="comment">// class C2 extends A, B &#123;&#125; // error</span></span><br></pre></td></tr></table></figure></li><li><p>一个类可以有多个子类。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A可以有多个子类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C2</span> <span class="keyword">extends</span>  <span class="title class_">A</span> &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>可以多层继承。</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C1</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">extends</span> <span class="title class_">C1</span> &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>顶层父类是Object类。所有的类默认继承Object，作为父类。</p></blockquote></li></ol><h2 id="4-关于今天知识的小结："><a href="#4-关于今天知识的小结：" class="headerlink" title="4. 关于今天知识的小结："></a>4. 关于今天知识的小结：</h2><p>会写一个继承结构下的标准Javabean即可</p><p>需求：</p><p>​猫：属性，姓名，年龄，颜色</p><p>​狗：属性，姓名，年龄，颜色，吼叫</p><p> 分享书写技巧：</p><p>​        1.在大脑中要区分谁是父，谁是子</p><p>​        2.把共性写到父类中，独有的东西写在子类中</p><p>​        3.开始编写标准Javabean（从上往下写）</p><p>​        4.在测试类中，创建对象并赋值调用</p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="comment">//姓名，年龄，颜色</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Animal</span><span class="params">(String name, <span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">//因为猫类中没有独有的属性。</span></span><br><span class="line">    <span class="comment">//所以此时不需要写私有的成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//空参</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要带子类和父类中所有的属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name, <span class="type">int</span> age, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name,age,color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="comment">//Dog ：吼叫</span></span><br><span class="line">    <span class="keyword">private</span> String wang;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带参构造：带子类加父类所有的属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, <span class="type">int</span> age, String color,String wang)</span> &#123;</span><br><span class="line">        <span class="comment">//共性的属性交给父类赋值</span></span><br><span class="line">        <span class="built_in">super</span>(name,age,color);</span><br><span class="line">        <span class="comment">//独有的属性自己赋值</span></span><br><span class="line">        <span class="built_in">this</span>.wang = wang;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getWang</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> wang;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWang</span><span class="params">(String wang)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.wang = wang;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//Animal ： 姓名，年龄，颜色</span></span><br><span class="line">        <span class="comment">//Cat :</span></span><br><span class="line">        <span class="comment">//Dog ：吼叫</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建狗的对象</span></span><br><span class="line">        <span class="type">Dog</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;旺财&quot;</span>,<span class="number">2</span>,<span class="string">&quot;黑色&quot;</span>,<span class="string">&quot;嗷呜~~&quot;</span>);</span><br><span class="line">        System.out.println(d.getName()+<span class="string">&quot;, &quot;</span> + d.getAge() + <span class="string">&quot;, &quot;</span> + d.getColor() + <span class="string">&quot;, &quot;</span> + d.getWang());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建猫的对象</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;中华田园猫&quot;</span>,<span class="number">3</span>,<span class="string">&quot;黄色&quot;</span>);</span><br><span class="line">        System.out.println(c.getName() + <span class="string">&quot;, &quot;</span> + c.getAge() + <span class="string">&quot;, &quot;</span> + c.getColor());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题2 Shell工具和脚本</title>
      <link href="/2024/03/07/%E4%B8%BB%E9%A2%982-Shell%E5%B7%A5%E5%85%B7%E5%92%8C%E8%84%9A%E6%9C%AC/"/>
      <url>/2024/03/07/%E4%B8%BB%E9%A2%982-Shell%E5%B7%A5%E5%85%B7%E5%92%8C%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-脚本"><a href="#Shell-脚本" class="headerlink" title="Shell 脚本"></a>Shell 脚本</h1><p>到目前为止，我们已经学习了如何在 shell 中执行命令，并使用管道将命令组合使用。但是，很多情况下我们需要执行一系列的操作并使用条件或循环这样的控制流。</p><p>shell 脚本的复杂性进一步提高。</p><p>大多数shell都有自己的一套脚本语言，包括变量、控制流和自己的语法。shell脚本与其他脚本语言不同之处在于，shell 脚本针对 shell 所从事的相关工作进行了优化。因此，创建命令流程（pipelines）、将结果保存到文件、从标准输入中读取输入，这些都是 shell 脚本中的原生操作，这让它比通用的脚本语言更易用。本节中，我们会专注于 bash 脚本，因为它最流行，应用更为广泛。</p><p><strong>在bash中为变量赋值的语法是<code>foo=bar</code>，访问变量中存储的数值，其语法为 <code>$foo</code>。 需要注意的是，<code>foo = bar</code> （使用空格隔开）是不能正确工作的，因为解释器会调用程序<code>foo</code> 并将 <code>=</code> 和 <code>bar</code>作为参数。 总的来说，在shell脚本中使用空格会起到分割参数的作用</strong>，有时候可能会造成混淆，请务必多加检查。</p><p>Bash中的字符串通过<code>&#39;</code> 和 <code>&quot;</code>分隔符来定义，但是它们的含义并不相同。以<code>&#39;</code>定义的字符串为<strong>原义字符串</strong>，其中的变量不会被转义，而 <code>&quot;</code>定义的字符串会将变量值进行替换。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo=bar</span><br><span class="line">echo &quot;$foo&quot;</span><br><span class="line"># 打印 bar</span><br><span class="line">echo &#x27;$foo&#x27;</span><br><span class="line"># 打印 $foo</span><br></pre></td></tr></table></figure><p>和其他大多数的编程语言一样，<code>bash</code>也支持<code>if</code>, <code>case</code>, <code>while</code> 和 <code>for</code> 这些控制流关键字。同样地， <code>bash</code> 也支持函数，它可以接受参数并基于参数进行操作。下面这个函数是一个例子，它会创建一个文件夹并使用<code>cd</code>进入该文件夹。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mcd () &#123;</span><br><span class="line">    mkdir -p &quot;$1&quot;</span><br><span class="line">    cd &quot;$1&quot;</span><br><span class="line">&#125;  //-p选项表示递归创建目录，即如果上级目录不存在会一并创建</span><br></pre></td></tr></table></figure><p>这里 <strong><code>$1</code> 是脚本接收到的第一个参数</strong>。与其他脚本语言不同的是，bash使用了很多特殊的变量来表示参数、错误代码和相关变量。</p><p>步骤：</p><ol><li>将这段代码保存到一个文件中，例如<code>mcd_function.sh</code>。</li><li>使用source命令（或者<code>.</code>命令）来加载这个文件，以便将函数定义加载到当前的Shell环境中。假设文件名为<code>mcd_function.sh</code>，执行以下命令：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source mcd_function.sh</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">. mcd_function.sh</span><br></pre></td></tr></table></figure><ol><li>现在您可以直接在命令行中调用<code>mcd</code>函数，并传递一个参数作为目录名。例如：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mcd test_directory</span><br></pre></td></tr></table></figure><p>这将创建一个名为<code>test_directory</code>的目录，并将当前工作目录切换到这个新创建的目录中。</p><p>下面列举了其中一些变量，更完整的列表可以参考 <a href="https://www.tldp.org/LDP/abs/html/special-chars.html">这里</a>。</p><ul><li><p><code>$0</code> - 脚本名（举个例子，如果你有一个名为<code>myscript.sh</code>的bash脚本，里面包含以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo &quot;The name of this script is: $0&quot;</span><br></pre></td></tr></table></figure><p>当你在终端中执行<code>./myscript.sh</code>时，”$0”会被替换为<code>myscript.sh</code>，并输出”The name of this script is: <a href="http://myscript.sh/">myscript.sh</a>“。</p></li><li><p>）</p></li><li><p><code>$1</code> 到 <code>$9</code> - 脚本的参数。 <code>$1</code> 是第一个参数，依此类推。</p></li><li><p><code>$@</code> - 所有参数</p></li><li><p><code>$#</code> - 参数个数</p></li><li><p><code>$?</code> - <strong>前一个命令的返回值</strong></p></li><li><p><code>$$</code> - 当前脚本的进程识别码（PID（进程ID）在操作系统中扮演着重要的角色，它是用来唯一标识正在运行的每个进程的数字标识符。PID对于操作系统的管理和控制进程非常重要，具有以下用途：</p><ol><li>进程管理：操作系统通过PID来标识和管理每个正在运行的进程。通过PID，操作系统可以轻松地识别和跟踪每个进程的状态、资源使用情况等信息。</li><li>进程控制：通过PID，用户可以向特定的进程发送信号，控制其行为。例如，可以通过kill命令向指定PID的进程发送信号，请求终止该进程。</li><li>进程通信：在进程间通信时，PID可以用作标识符。进程可以通过PID来确定要发送消息的目标进程。</li><li>日志跟踪：在日志文件中记录进程的PID可以帮助系统管理员跟踪和诊断系统问题。</li></ol><p>总之，PID是操作系统中重要的标识符，用于唯一标识和管理每个正在运行的进程。</p></li><li><p><strong><code>!!</code> - 完整的上一条命令，包括参数。</strong>常见应用：当你因为权限不足执行命令失败时，可以使用 <code>sudo !!</code>再尝试一次。</p></li><li><p><strong><code>$_</code> - 上一条命令的最后一个参数。</strong>如果你正在使用的是交互式 shell，你可以通过按下 <code>Esc</code> 之后键入 . 来获取这个值。</p></li></ul><p>命令通常使用 <code>STDOUT</code>来返回输出值，使用<code>STDERR</code> 来返回错误及错误码，便于脚本以更加友好的方式报告错误。 返回码或退出状态是脚本&#x2F;命令之间交流执行状态的方式。返回值0表示正常执行，其他所有非0的返回值都表示有错误发生。</p><ul><li><code>STDOUT</code>（Standard Output）是标准输出流，用于输出命令的正常输出信息。当命令成功执行时，它会将结果输出到<code>STDOUT</code>流，这些结果通常是命令的输出值或结果。</li><li><code>STDERR</code>（Standard Error）是标准错误流，用于输出命令的错误信息或警告信息。当命令执行出错时，它会将错误信息输出到<code>STDERR</code>流，这些信息通常包括错误信息和错误码的解释。</li></ul><p>通常情况下，<code>STDOUT</code>和<code>STDERR</code>会分别显示在终端上，这样可以让用户更容易区分正常输出和错误信息。如果你想将<code>STDOUT</code>和<code>STDERR</code>输出重定向到不同的文件中，可以使用<code>&gt;</code>符号将<code>STDOUT</code>输出到一个文件中，使用<code>2&gt;</code>符号将<code>STDERR</code>输出到一个文件中，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">command &gt; output.txt 2&gt; error.txt</span><br></pre></td></tr></table></figure><p>这将命令的正常输出写入<code>output.txt</code>文件，将错误信息写入<code>error.txt</code>文件。</p><p><code>2&gt;</code>是一种重定向符号，用于将标准错误流（STDERR）输出到指定文件。在Linux和Unix系统中，每个进程都有三个标准文件描述符：标准输入（stdin，文件描述符为0）、标准输出（stdout，文件描述符为1）和标准错误（stderr，文件描述符为2）。</p><p>当使用<code>2&gt;</code>时，表示将标准错误流输出到指定的文件。</p><p>退出码可以搭配 <code>&amp;&amp;</code>（与操作符）和 <code>||</code>（或操作符）使用，用来进行条件判断，<strong>决定是否执行其他程序</strong>。它们都属于短路<a href="https://en.wikipedia.org/wiki/Short-circuit_evaluation">运算符</a>（short-circuiting） <strong>同一行的多个命令可以用<code>;</code>分隔</strong>。程序 <code>true</code> 的返回码永远是<code>0</code>，<code>false</code> 的返回码永远是<code>1</code>。让我们看几个例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">false || echo &quot;Oops, fail&quot;</span><br><span class="line"># Oops, fail</span><br><span class="line"></span><br><span class="line">true || echo &quot;Will not be printed&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">true &amp;&amp; echo &quot;Things went well&quot;</span><br><span class="line"># Things went well</span><br><span class="line"></span><br><span class="line">false &amp;&amp; echo &quot;Will not be printed&quot;</span><br><span class="line">#</span><br><span class="line"></span><br><span class="line">false ; echo &quot;This will always run&quot;</span><br><span class="line"># This will always run</span><br></pre></td></tr></table></figure><p>另一个常见的模式是以变量的形式获取一个命令的输出，这可以通过 <em>命令替换</em>（<em>command substitution</em>）实现。</p><p>*<em>当您通过 <code>$( CMD )</code> 这样的方式来执行<code>CMD</code> 这个命令时，它的输出结果会替换掉 <code>$( CMD )</code> 。例如，如果执行 <code>for file in $(ls)</code> ，shell首先将调用<code>ls</code> ，然后遍历得到的这些返回值。还有一个冷门的类似特性是 <em>进程替换</em>（</em>process substitution<em>）， <code>&lt;( CMD )</code> 会执行 <code>CMD</code> 并将结果输出到一个临时文件中，并将 <code>&lt;( CMD )</code> 替换成临时文件名。这在我们希望返回值通过文件而不是STDIN传递时很有用。例如， <code>diff &lt;(ls foo) &lt;(ls bar)</code> 会显示文件夹 <code>foo</code> 和 <code>bar</code> 中文件的区别。</em>*</p><p>栗子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">iteration.sh脚本如下</span><br><span class="line">#!/bin/bash</span><br><span class="line">for file in $(ls)</span><br><span class="line">do</span><br><span class="line">echo &quot;Processing file is: $file&quot;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash中运行</span><br><span class="line"> . iteration.sh &gt; files_name.txt</span><br></pre></td></tr></table></figure><p>下面这个例子展示了一部分上面提到的特性。这段脚本会遍历我们提供的参数，使用<code>grep</code> 搜索字符串 <code>foobar</code>，如果没有找到，则将其作为注释追加到文件中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">echo &quot;Starting program at $(date)&quot; # date会被替换成日期和时间</span><br><span class="line"></span><br><span class="line">echo &quot;Running program $0 with $# arguments with pid $$&quot;</span><br><span class="line"></span><br><span class="line">for file in &quot;$@&quot;; do</span><br><span class="line">    grep foobar &quot;$file&quot; &gt; /dev/null 2&gt; /dev/null</span><br><span class="line">    # 如果模式没有找到，则grep退出状态为 1</span><br><span class="line">    # 我们将标准输出流和标准错误流重定向到Null，因为我们并不关心这些信息</span><br><span class="line">    #windows一般丢弃到‘NUL’！！</span><br><span class="line">    if [[ $? -ne 0 ]]; then   #检查上一条命令的退出状态。如果不是 0（即未找到 &quot;foobar&quot;），则执行下面的操作。</span><br><span class="line">        echo &quot;File $file does not have any foobar, adding one&quot;</span><br><span class="line">        echo &quot;# foobar&quot; &gt;&gt; &quot;$file&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>1.在 Shell 脚本中，**”fi” 是 “if” 的反写，用于结束 if 结构**。在 if 结构中，通常使用 “if” 关键字开始条件判断，然后在满足条件时执行相应的代码块，最后使用 “fi” 关键字结束 if 结构。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if [条件判断]; then</span><br><span class="line">    # 在条件满足时执行的代码</span><br><span class="line">else</span><br><span class="line">    # 在条件不满足时执行的代码</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>2.<code>grep</code> 是一个常用的文本搜索工具，用于在文件或标准输入中查找匹配特定模式的行，并将结果输出到标准输出。其名称来自于 <code>Global Regular Expression Print</code> 的缩写。</p><p><strong><code>grep</code> 命令的基本语法如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [options] pattern [file...]</span><br></pre></td></tr></table></figure><p><strong>其中：</strong></p><ul><li><strong><code>pattern</code> 是您要搜索的模式或正则表达式。</strong></li><li><strong><code>file</code> 是要在其中搜索匹配模式的文件。如果不指定文件，则 <code>grep</code> 将从标准输入中读取数据。</strong></li></ul><p><strong><code>grep</code> 命令的一些常用选项包括：</strong></p><ul><li><strong><code>-i</code>：忽略大小写。</strong>ignore</li><li><strong><code>-r</code>：递归搜索子目录。</strong>recursion</li><li><strong><code>-n</code>：显示匹配行的行号。</strong></li><li><strong><code>-v</code>：显示不包含匹配模式的行。</strong></li><li><strong><code>-o</code>：仅显示匹配模式的部分。</strong></li></ul><p><strong>例如，要在文件 <code>example.txt</code> 中查找包含 <code>hello</code> 的行，您可以使用以下命令：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep hello example.txt</span><br></pre></td></tr></table></figure><p><strong><code>grep</code> 是一个功能强大且灵活的工具，可用于各种文本搜索和处理任务。</strong></p><p>3.在条件语句中，我们比较 <code>$?</code> 是否等于0。**-ne意思是not equal**。 Bash实现了许多类似的比较操作，您可以查看 <a href="https://man7.org/linux/man-pages/man1/test.1.html"><code>test 手册</code></a>。 在bash中进行比较时，尽量使用双方括号 <code>[[ ]]</code> 而不是单方括号 <code>[ ]</code>，这样会降低犯错的几率，尽管这样并不能兼容 <code>sh</code>。 更详细的说明参见<a href="http://mywiki.wooledge.org/BashFAQ/031">这里</a>。</p><p>当执行脚本时，我们经常需要提供形式类似的参数。bash使我们可以轻松的实现这一操作，它可以基于文件扩展名展开表达式。这一技术被称为shell的 <em>通配</em>（<em>globbing</em>）</p><ul><li><strong>通配符 - 当你想要利用通配符进行匹配时，你可以分别使用 <code>?</code> 和 <code>*</code> 来匹配一个或任意个字符。例如，对于文件<code>foo</code>, <code>foo1</code>, <code>foo2</code>, <code>foo10</code> 和 <code>bar</code>, <code>rm foo?</code>这条命令会删除<code>foo1</code> 和 <code>foo2</code> ，而<code>rm foo*</code> 则会删除除了<code>bar</code>之外的所有文件。</strong></li><li><strong>花括号<code>&#123;&#125;</code> - 当你有一系列的指令，其中包含一段公共子串时，可以用花括号来自动展开这些命令。这在批量移动或转换文件时非常方便。</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">convert image.&#123;png,jpg&#125;</span><br><span class="line"># 会展开为</span><br><span class="line">convert image.png image.jpg</span><br><span class="line"></span><br><span class="line">cp /path/to/project/&#123;foo,bar,baz&#125;.sh /newpath</span><br><span class="line"># 会展开为</span><br><span class="line">cp /path/to/project/foo.sh /path/to/project/bar.sh /path/to/project/baz.sh /newpath</span><br><span class="line"></span><br><span class="line"># 也可以结合通配使用</span><br><span class="line">mv *&#123;.py,.sh&#125; folder</span><br><span class="line"># 会移动所有 *.py 和 *.sh 文件</span><br><span class="line"></span><br><span class="line">mkdir foo bar</span><br><span class="line"></span><br><span class="line"># 下面命令会创建foo/a, foo/b, ... foo/h, bar/a, bar/b, ... bar/h这些文件</span><br><span class="line">touch &#123;foo,bar&#125;/&#123;a..h&#125;</span><br><span class="line">touch foo/x bar/y</span><br><span class="line"># 比较文件夹 foo 和 bar 中包含文件的不同</span><br><span class="line">diff &lt;(ls foo) &lt;(ls bar)</span><br><span class="line"># 输出</span><br><span class="line"># &lt; x</span><br><span class="line"># ---</span><br><span class="line"># &gt; y</span><br></pre></td></tr></table></figure><p><code>convert</code> 是 ImageMagick 图像处理工具集中的一个命令，用于对图像文件进行格式转换、调整大小、合并图像、添加特效等操作。ImageMagick 是一个开源的图像处理工具集，支持多种图像格式，可以在命令行中使用。</p><p>下面是 <code>convert</code> 命令的基本语法和一些常用选项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash复制代码convert input.jpg output.png</span><br></pre></td></tr></table></figure><p>这个命令将 <code>input.jpg</code> 图像文件转换为 <code>output.png</code> 图像文件。你可以使用不同的图像格式作为输入和输出。</p><p>以下是 <code>convert</code> 命令的一些常用选项：</p><ul><li><p><code>-resize</code>: 调整图像大小</p></li><li><p><code>-rotate</code>: 旋转图像</p></li><li><p><code>-crop</code>: 裁剪图像</p></li><li><p><code>-composite</code>: 合并图像</p></li><li><p><code>-blur</code>: 添加模糊效果</p></li><li><p><code>-negate</code>: 反色</p><ol><li><p><strong>调整图像大小 (-resize)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert input.jpg -resize 50% output.jpg</span><br></pre></td></tr></table></figure><p>这个命令将 <code>input.jpg</code> 图像文件调整为原来大小的50%，并保存为 <code>output.jpg</code>。</p></li><li><p><strong>旋转图像 (-rotate)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert input.jpg -rotate 90 output.jpg</span><br></pre></td></tr></table></figure><p>这个命令将 <code>input.jpg</code> 图像文件逆时针旋转90度，并保存为 <code>output.jpg</code>。</p></li><li><p><strong>裁剪图像 (-crop)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert input.jpg -crop 100x100+10+10 output.jpg</span><br></pre></td></tr></table></figure><p>这个命令将 <code>input.jpg</code> 图像文件从坐标 (10, 10) 开始裁剪大小为 100x100 的区域，并保存为 <code>output.jpg</code>。</p></li><li><p><strong>合并图像 (-composite)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert background.jpg overlay.png -composite output.jpg</span><br></pre></td></tr></table></figure><p>这个命令将 <code>overlay.png</code> 图像叠加到 <code>background.jpg</code> 图像上，并保存为 <code>output.jpg</code>。</p></li><li><p><strong>添加模糊效果 (-blur)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert input.jpg -blur 0x8 output.jpg</span><br></pre></td></tr></table></figure><p>这个命令将 <code>input.jpg</code> 图像文件添加一个水平方向模糊半径为8的模糊效果，并保存为 <code>output.jpg</code>。</p></li><li><p><strong>反色 (-negate)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">convert input.jpg -negate output.jpg</span><br></pre></td></tr></table></figure><p>这个命令将 <code>input.jpg</code> 图像文件进行反色处理，并保存为 <code>output.jpg</code>。</p><p>这个命令要安装imagemagick程序</p></li></ol></li></ul><p>编写 <code>bash</code> 脚本有时候会很别扭和反直觉。例如 <a href="https://github.com/koalaman/shellcheck">shellcheck</a> 这样的工具可以帮助你定位sh&#x2F;bash脚本中的错误。</p><p>注意，脚本并不一定只有用 bash 写才能在终端里调用。比如说，这是一段 Python 脚本，作用是将输入的参数倒序输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/local/bin/python</span><br><span class="line">import sys</span><br><span class="line">for arg in reversed(sys.argv[1:]):</span><br><span class="line">    print(arg)</span><br></pre></td></tr></table></figure><p>内核知道去用 python 解释器而不是 shell 命令来运行这段脚本，是因为脚本的开头第一行的 <a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a>。</p><p>在 <code>shebang</code> 行中使用 <a href="https://man7.org/linux/man-pages/man1/env.1.html"><code>env</code></a> 命令是一种好的实践，它会利用环境变量中的程序来解析该脚本，这样就提高了您的脚本的可移植性。<code>env</code> 会利用我们第一节讲座中介绍过的<code>PATH</code> 环境变量来进行定位。 例如，使用了<code>env</code>的shebang看上去是这样的<code>#!/usr/bin/env python</code>。</p><p>shell函数和脚本有如下一些不同点：</p><ul><li>函数只能与shell使用相同的语言，脚本可以使用任意语言。因此在脚本中包含 <code>shebang</code> 是很重要的。</li><li>函数仅在定义时被加载，脚本会在每次被执行时加载。这让函数的加载比脚本略快一些，但每次修改函数定义，都要重新加载一次。</li><li>函数会在当前的shell环境中执行，脚本会在单独的进程中执行。因此，函数可以对环境变量进行更改，比如改变当前工作目录，脚本则不行。脚本需要使用 <a href="https://man7.org/linux/man-pages/man1/export.1p.html"><code>export</code></a> 将环境变量导出，并将值传递给环境变量。</li><li>与其他程序语言一样，函数可以提高代码模块性、代码复用性并创建清晰性的结构。shell脚本中往往也会包含它们自己的函数定义。</li></ul><h1 id="Shell-工具"><a href="#Shell-工具" class="headerlink" title="Shell 工具"></a>Shell 工具</h1><h2 id="查看命令如何使用"><a href="#查看命令如何使用" class="headerlink" title="查看命令如何使用"></a>查看命令如何使用</h2><p>看到这里，您可能会有疑问，我们应该如何为特定的命令找到合适的标记呢？例如 <code>ls -l</code>, <code>mv -i</code> 和 <code>mkdir -p</code>。更普遍的是，给您一个命令行，您应该怎样了解如何使用这个命令行并找出它的不同的选项呢？ 一般来说，您可能会先去网上搜索答案，但是，UNIX 可比 StackOverflow 出现的早，因此我们的系统里其实早就包含了可以获取相关信息的方法。</p><p>在上一节中我们介绍过，最常用的方法是为对应的命令行添加<code>-h</code> 或 <code>--help</code> 标记。另外一个更详细的方法则是使用<code>man</code> 命令。<a href="https://man7.org/linux/man-pages/man1/man.1.html"><code>man</code></a> 命令是手册（manual）的缩写，它提供了命令的用户手册。（<strong>windows没有man程序！！</strong>）</p><p>例如，<code>man rm</code> 会输出命令 <code>rm</code> 的说明，同时还有其标记列表，包括之前我们介绍过的<code>-i</code>。 事实上，目前我们给出的所有命令的说明链接，都是网页版的Linux命令手册。即使是您安装的第三方命令，前提是开发者编写了手册并将其包含在了安装包中。在交互式的、基于字符处理的终端窗口中，一般也可以通过 <code>:help</code> 命令或键入 <code>?</code> 来获取帮助。</p><p>有时候手册内容太过详实，让我们难以在其中查找哪些最常用的标记和语法。 <a href="https://tldr.sh/">TLDR pages</a> 是一个很不错的替代品，它提供了一些案例，可以帮助您快速找到正确的选项。</p><p>例如，自己就常常在tldr上搜索<a href="https://tldr.ostera.io/tar"><code>tar</code></a> 和 <a href="https://tldr.ostera.io/ffmpeg"><code>ffmpeg</code></a> 的用法。</p><h2 id="查找文件（指令太多，我决定在要找文件时直接向ChatGPT索要能达到检索目的的命令）"><a href="#查找文件（指令太多，我决定在要找文件时直接向ChatGPT索要能达到检索目的的命令）" class="headerlink" title="查找文件（指令太多，我决定在要找文件时直接向ChatGPT索要能达到检索目的的命令）"></a>查找文件（指令太多，我决定在要找文件时直接向ChatGPT索要能达到检索目的的命令）</h2><p>程序员们面对的最常见的重复任务就是查找文件或目录。所有的类UNIX系统都包含一个名为 <a href="https://man7.org/linux/man-pages/man1/find.1.html"><code>find</code></a> 的工具，它是 shell 上用于查找文件的绝佳工具。<code>find</code>命令会递归地搜索符合条件的文件，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查找所有名称为src的文件夹</span><br><span class="line">find . -name src -type d  //  .表示所有</span><br><span class="line"># 查找所有文件夹路径中包含test的python文件</span><br><span class="line">find . -path &#x27;*/test/*.py&#x27; -type f</span><br><span class="line"># 查找前一天修改的所有文件</span><br><span class="line">find . -mtime -1</span><br><span class="line"># 查找所有大小在500k至10M的tar.gz文件</span><br><span class="line">find . -size +500k -size -10M -name &#x27;*.tar.gz&#x27;</span><br></pre></td></tr></table></figure><p>除了列出所寻找的文件之外，find 还能对所有查找到的文件进行操作。这能极大地简化一些单调的任务。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 删除全部扩展名为.tmp 的文件</span><br><span class="line">find . -name &#x27;*.tmp&#x27; -exec rm &#123;&#125; \;</span><br><span class="line"># 查找全部的 PNG 文件并将其转换为 JPG</span><br><span class="line">find . -name &#x27;*.png&#x27; -exec convert &#123;&#125; &#123;&#125;.jpg \;</span><br></pre></td></tr></table></figure><p>尽管 <code>find</code> 用途广泛，它的语法却比较难以记忆。例如，为了查找满足模式 <code>PATTERN</code> 的文件，您需要执行 <code>find -name &#39;*PATTERN*&#39;</code> (如果您希望模式匹配时是不区分大小写，可以使用<code>-iname</code>选项）</p><p>您当然可以使用 alias 设置别名来简化上述操作，但 shell 的哲学之一便是寻找（更好用的）替代方案。 记住，shell 最好的特性就是您只是在调用程序，因此您只要找到合适的替代程序即可（甚至自己编写）。</p><p>例如，<a href="https://github.com/sharkdp/fd"><code>fd</code></a> 就是一个更简单、更快速、更友好的程序，它可以用来作为<code>find</code>的替代品。它有很多不错的默认设置，例如输出着色、默认支持正则匹配、支持unicode并且我认为它的语法更符合直觉。以模式<code>PATTERN</code> 搜索的语法是 <code>fd PATTERN</code>。</p><p>大多数人都认为 <code>find</code> 和 <code>fd</code> 已经很好用了，但是有的人可能想知道，我们是不是可以有更高效的方法，例如不要每次都搜索文件而是通过编译索引或建立数据库的方式来实现更加快速地搜索。</p><p>这就要靠 <a href="https://man7.org/linux/man-pages/man1/locate.1.html"><code>locate</code></a> 了。 <code>locate</code> 使用一个由 <a href="https://man7.org/linux/man-pages/man1/updatedb.1.html"><code>updatedb</code></a>负责更新的数据库，在大多数系统中 <code>updatedb</code> 都会通过 <a href="https://man7.org/linux/man-pages/man8/cron.8.html"><code>cron</code></a> 每日更新。这便需要我们在速度和时效性之间作出权衡。而且，<code>find</code> 和类似的工具可以通过别的属性比如文件大小、修改时间或是权限来查找文件，<code>locate</code>则只能通过文件名。 <a href="https://unix.stackexchange.com/questions/60205/locate-vs-find-usage-pros-and-cons-of-each-other">这里</a>有一个更详细的对比。</p><h2 id="查找代码"><a href="#查找代码" class="headerlink" title="查找代码"></a>查找代码</h2><p>查找文件是很有用的技能，但是很多时候您的目标其实是查看文件的内容。一个最常见的场景是您希望查找具有某种模式的全部文件，并找它们的位置。</p><p>为了实现这一点，很多类UNIX的系统都提供了<a href="https://man7.org/linux/man-pages/man1/grep.1.html"><code>grep</code></a>命令，它是用于对输入文本进行匹配的通用工具。它是一个非常重要的shell工具，我们会在后续的数据清理课程中深入的探讨它。</p><p><strong><code>grep</code> 有很多选项，这也使它成为一个非常全能的工具。其中我经常使用的有 <code>-C</code> ：获取查找结果的上下文（Context）；<code>-v</code> 将对结果进行反选（Invert），也就是输出不匹配的结果。举例来说， <code>grep -C 5</code> 会输出匹配结果前后五行。当需要搜索大量文件的时候，使用 <code>-R</code> 会递归地进入子目录并搜索所有的文本文件。</strong></p><p><strong>但是，我们有很多办法可以对 <code>grep -R</code> 进行改进，例如使其忽略<code>.git</code> 文件夹，使用多CPU等等。</strong></p><p>因此也出现了很多它的替代品，包括 <a href="https://beyondgrep.com/">ack</a>, <a href="https://github.com/ggreer/the_silver_searcher">ag</a> 和 <a href="https://github.com/BurntSushi/ripgrep">rg</a>。它们都特别好用，但是功能也都差不多，我比较常用的是 ripgrep (<code>rg</code>) ，因为它速度快，而且用法非常符合直觉。例子如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查找所有使用了 requests 库的文件</span><br><span class="line">rg -t py &#x27;import requests&#x27;</span><br><span class="line"># 查找所有没有写 shebang 的文件（包含隐藏文件）</span><br><span class="line">rg -u --files-without-match &quot;^#!&quot;</span><br><span class="line"># 查找所有的foo字符串，并打印其之后的5行</span><br><span class="line">rg foo -A 5</span><br><span class="line"># 打印匹配的统计信息（匹配的行和文件的数量）</span><br><span class="line">rg --stats PATTERN</span><br></pre></td></tr></table></figure><p>与 <code>find</code>&#x2F;<code>fd</code> 一样，重要的是你要知道有些问题使用合适的工具就会迎刃而解，而具体选择哪个工具则不是那么重要。</p><p>举个栗子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find . -type f -print0 | xargs -0 grep -li &#x27;STRING&#x27;</span><br></pre></td></tr></table></figure><p>这个命令的含义是：</p><ul><li><code>find . -type f -print0</code>：这部分命令使用<code>find</code>命令来查找当前目录及其子目录下的所有文件（<code>-type f</code>表示只查找文件），并使用null字符（<code>\0</code>）分隔文件名（<code>-print0</code>选项）。（<code>-print0</code>是<code>find</code>命令的一个选项，用来在输出文件名时使用null字符（<code>\0</code>）作为分隔符。）</li><li><code>|</code>：这是管道符号，用于将前一个命令的输出作为后一个命令的输入。</li><li><code>xargs -0 grep -li &#39;STRING&#39;</code>：这部分命令使用<code>xargs</code>命令来接收前一个命令（<code>find</code>）的输出，并将每个文件名作为参数传递给<code>grep</code>命令。<code>-0</code>选项表示使用null字符作为分隔符。<code>grep -li &#39;STRING&#39;</code>命令用于在每个文件中查找包含<code>STRING</code>字符串的行，且不区分大小写（<code>-i</code>选项）并打印出文件名（<code>-l</code>选项）。（<code>xargs -0</code>命令的作用是从标准输入中读取数据，并将其作为参数传递给指定的命令。其中的<code>-0</code>选项表示使用null字符（<code>\0</code>）作为参数的分隔符，这通常与<code>find</code>命令中的<code>-print0</code>选项一起使用，用于处理含有特殊字符的文件名。）</li></ul><p>综合起来，这个命令的作用是在当前目录及其子目录下的所有文件中查找包含<code>STRING</code>字符串的行，并打印出包含该字符串的文件名。</p><h2 id="查找-shell-命令"><a href="#查找-shell-命令" class="headerlink" title="查找 shell 命令"></a>查找 shell 命令</h2><p>目前为止，我们已经学习了如何查找文件和代码，但随着你使用shell的时间越来越久，您可能想要找到之前输入过的某条命令。首先，按向上的方向键会显示你使用过的上一条命令，继续按上键则会遍历整个历史记录。</p><p><strong><code>history</code> 命令允许您以程序员的方式来访问shell中输入的历史命令</strong>。这个命令会在标准输出中打印shell中的历史命令。如果我们要搜索历史记录，则可以利用管道将输出结果传递给 <code>grep</code> 进行模式搜索。 <code>history | grep find</code> 会打印包含find子串的命令。</p><p>对于大多数的shell来说，您可以使用 <code>Ctrl+R</code> 对命令历史记录进行回溯搜索。敲 <code>Ctrl+R</code> 后您可以输入子串来进行匹配，查找历史命令行。</p><p>反复按下就会在所有搜索结果中循环。在 <a href="https://github.com/zsh-users/zsh-history-substring-search">zsh</a> 中，使用方向键上或下也可以完成这项工作。</p><p><code>Ctrl+R</code> 可以配合 <a href="https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings#ctrl-r">fzf</a> 使用。<code>fzf</code> 是一个通用的模糊查找工具，它可以和很多命令一起使用。这里我们可以对历史命令进行模糊查找并将结果以赏心悦目的格式输出。</p><p>另外一个和历史命令相关的技巧我喜欢称之为<strong>基于历史的自动补全</strong>。 这一特性最初是由 <a href="https://fishshell.com/">fish</a> shell 创建的，它可以根据您最近使用过的开头相同的命令，动态地对当前的shell命令进行补全。这一功能在 <a href="https://github.com/zsh-users/zsh-autosuggestions">zsh</a> 中也可以使用，它可以极大的提高用户体验。</p><p>你可以修改 shell history 的行为，例如，<strong>如果在命令的开头加上一个空格，它就不会被加进shell记录中</strong>。当你输入包含密码或是其他敏感信息的命令时会用到这一特性。 为此你需要在<code>.bashrc</code>中添加<code>HISTCONTROL=ignorespace</code>或者向<code>.zshrc</code> 添加 <code>setopt HIST_IGNORE_SPACE</code>。 如果你不小心忘了在前面加空格，可以通过编辑 <code>.bash_history</code>或 <code>.zhistory</code> 来手动地从历史记录中移除那一项。</p><h2 id="文件夹导航"><a href="#文件夹导航" class="headerlink" title="文件夹导航"></a>文件夹导航</h2><p>之前对所有操作我们都默认一个前提，即您已经位于想要执行命令的目录下，但是如何才能高效地在目录间随意切换呢？有很多简便的方法可以做到，比如设置alias，使用 <a href="https://man7.org/linux/man-pages/man1/ln.1.html">ln -s</a> 创建符号连接等。而开发者们已经想到了很多更为精妙的解决方案。</p><p>由于本课程的目的是尽可能对你的日常习惯进行优化。因此，我们可以使用<a href="https://github.com/clvv/fasd"><code>fasd</code></a>和 <a href="https://github.com/wting/autojump">autojump</a> 这两个工具来查找最常用或最近使用的文件和目录。</p><p>Fasd 基于 <a href="https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Places/Frecency_algorithm"><em>frecency</em> </a>对文件和文件排序，也就是说它会同时针对频率（<em>frequency</em>）和时效（<em>recency</em>）进行排序。默认情况下，<code>fasd</code>使用命令 <code>z</code> 帮助我们快速切换到最常访问的目录。例如， 如果您经常访问<code>/home/user/files/cool_project</code> 目录，那么可以直接使用 <code>z cool</code> 跳转到该目录。对于 autojump，则使用<code>j cool</code>代替即可。</p><p>还有一些更复杂的工具可以用来概览目录结构，例如 <a href="https://linux.die.net/man/1/tree"><code>tree</code></a>, <a href="https://github.com/Canop/broot"><code>broot</code></a> 或更加完整的文件管理器，例如 <a href="https://github.com/jarun/nnn"><code>nnn</code></a> 或 <a href="https://github.com/ranger/ranger"><code>ranger</code></a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> missing semester </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主题1 the shell</title>
      <link href="/2024/03/07/%E4%B8%BB%E9%A2%981-the-shell/"/>
      <url>/2024/03/07/%E4%B8%BB%E9%A2%981-the-shell/</url>
      
        <content type="html"><![CDATA[<h2 id="shell-是什么？"><a href="#shell-是什么？" class="headerlink" title="shell 是什么？"></a>shell 是什么？</h2><p>如今的计算机有着多种多样的交互接口让我们可以进行指令的的输入，从炫酷的图像用户界面（GUI），语音输入甚至是 AR&#x2F;VR 都已经无处不在。 这些交互接口可以覆盖 80% 的使用场景，但是它们也从根本上限制了您的操作方式——你不能点击一个不存在的按钮或者是用语音输入一个还没有被录入的指令。 为了充分利用计算机的能力，我们不得不回到最根本的方式，使用文字接口：Shell</p><p>几乎所有您能够接触到的平台都支持某种形式的 shell，有些甚至还提供了多种 shell 供您选择。虽然它们之间有些细节上的差异，但是其核心功能都是一样的：它允许你执行程序，输入并获取某种半结构化的输出。</p><p>本节课我们会使用 Bourne Again SHell, 简称 “bash” 。 这是被最广泛使用的一种 shell，它的语法和其他的 shell 都是类似的。打开shell <em>提示符</em>（您输入指令的地方），您首先需要打开 <em>终端</em> 。您的设备通常都已经内置了终端，或者您也可以安装一个，非常简单。</p><h2 id="使用-shell"><a href="#使用-shell" class="headerlink" title="使用 shell"></a>使用 shell</h2><p>当您打开终端时，您会看到一个提示符，它看起来一般是这个样子的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">missing:~$ </span><br></pre></td></tr></table></figure><p>这是 shell 最主要的文本接口。它告诉你，你的主机名是 <code>missing</code> 并且您当前的工作目录（”current working directory”）或者说您当前所在的位置是 <code>~</code> (表示 “home”)。 <strong><code>$</code> 符号表示您现在的身份不是 root 用户（稍后会介绍）</strong>。在这个提示符中，您可以输入 <em>命令</em> ，命令最终会被 shell 解析。最简单的命令是执行一个程序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">missing:~$ date</span><br><span class="line">Fri 10 Jan 2020 11:49:31 AM EST</span><br><span class="line">missing:~$ </span><br></pre></td></tr></table></figure><p>这里，我们执行了 <code>date</code> 这个程序，不出意料地，它打印出了当前的日期和时间。然后，shell 等待我们输入其他命令。我们可以在执行命令的同时向程序传递 <em>参数</em> ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">missing:~$ echo hello</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p>上例中，我们让 shell 执行 <code>echo</code> ，同时指定参数 <code>hello</code>。<code>echo</code> 程序将该参数打印出来。 shell 基于空格分割命令并进行解析，然后执行第一个单词代表的程序，并将后续的单词作为程序可以访问的参数。如果您希望传递的参数中包含空格（例如一个名为 My Photos 的文件夹），您要么用使用单引号，双引号将其包裹起来，要么使用转义符号 <code>\</code> 进行处理（<code>My\ Photos</code>）。</p><p>但是，shell 是如何知道去哪里寻找 <code>date</code> 或 <code>echo</code> 的呢？其实，类似于 Python 或 Ruby，shell 是一个编程环境，所以它具备变量、条件、循环和函数（下一课进行讲解）。当你在 shell 中执行命令时，您实际上是在执行一段 shell 可以解释执行的简短代码。如果你要求 shell 执行某个指令，但是该指令并不是 shell 所了解的编程关键字，那么它会去咨询 <em>环境变量</em> <code>$PATH</code>，它会列出当 shell 接到某条指令时，进行程序搜索的路径：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">missing:~$ echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">missing:~$ which echo</span><br><span class="line">/bin/echo</span><br><span class="line">missing:~$ /bin/echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br></pre></td></tr></table></figure><p>当我们执行 <code>echo</code> 命令时，shell 了解到需要执行 <code>echo</code> 这个程序，随后它便会在 <code>$PATH</code> 中搜索由 <code>:</code> 所分割的一系列目录，基于名字搜索该程序。当找到该程序时便执行（假定该文件是 <em>可执行程序</em>，后续课程将详细讲解）。<strong>确定某个程序名代表的是哪个具体的程序，可以使用 <code>which</code> 程序。我们也可以绕过 <code>$PATH</code>，通过直接指定需要执行的程序的路径来执行该程序</strong></p><h2 id="在shell中导航"><a href="#在shell中导航" class="headerlink" title="在shell中导航"></a>在shell中导航</h2><p>shell 中的路径是一组被分割的目录，<strong>在 Linux 和 macOS 上使用 <code>/</code> 分割，而在Windows上是 <code>\</code>。路径 <code>/</code> 代表的是系统的根目录，所有的文件夹都包括在这个路径之下，在Windows上每个盘都有一个根目录（例如： <code>C:\</code>）。</strong> 我们假设您在学习本课程时使用的是 Linux 文件系统。<strong>如果某个路径以 <code>/</code> 开头，那么它是一个 <em>绝对路径</em>，其他的都是 <em>相对路径</em> 。**相对路径是指相对于当前工作目录的路径，</strong>当前工作目录可以使用 <code>pwd</code> 命令来获取。<strong>此外，切换目录需要使用 <code>cd</code> 命令。“cd -”为回到之前路径。 在路径中，</strong><code>.</code> 表示的是当前目录，而 <code>..</code> 表示上级目录**：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">missing:~$ pwd</span><br><span class="line">/home/missing</span><br><span class="line">missing:~$ cd /home</span><br><span class="line">missing:/home$ pwd</span><br><span class="line">/home</span><br><span class="line">missing:/home$ cd ..</span><br><span class="line">missing:/$ pwd</span><br><span class="line">/</span><br><span class="line">missing:/$ cd ./home</span><br><span class="line">missing:/home$ pwd</span><br><span class="line">/home</span><br><span class="line">missing:/home$ cd missing</span><br><span class="line">missing:~$ pwd</span><br><span class="line">/home/missing</span><br><span class="line">missing:~$ ../../bin/echo hello</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p>注意，shell 会实时显示当前的路径信息。您可以通过配置 shell 提示符来显示各种有用的信息，这一内容我们会在后面的课程中进行讨论。</p><p>一般来说，当我们运行一个程序时，如果我们没有指定路径，则该程序会在当前目录下执行。例如，我们常常会搜索文件，并在需要时创建文件。</p><p>为了查看指定目录下包含哪些文件，我们使用 <code>ls</code> 命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">missing:~$ ls</span><br><span class="line">missing:~$ cd ..</span><br><span class="line">missing:/home$ ls</span><br><span class="line">missing</span><br><span class="line">missing:/home$ cd ..</span><br><span class="line">missing:/$ ls</span><br><span class="line">bin</span><br><span class="line">boot</span><br><span class="line">dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>除非我们利用第一个参数指定目录，否则 <code>ls</code> 会打印当前目录下的文件。大多数的命令接受标记和选项（带有值的标记），它们以 <code>-</code> 开头，并可以改变程序的行为。通常，在执行程序时使用 <code>-h</code> 或 <code>--help</code> 标记可以打印帮助信息，以便了解有哪些可用的标记或选项。例如，<code>ls --help</code> 的输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  -l                         use a long listing format</span><br><span class="line">missing:~$ ls -l /home</span><br><span class="line">drwxr-xr-x 1 missing  users  4096 Jun 15  2019 missing</span><br></pre></td></tr></table></figure><p>这个参数可以更加详细地列出目录下文件或文件夹的信息。首先，本行<strong>第一个字符 <code>d</code> 表示 <code>missing</code> 是一个目录。然后接下来的九个字符，每三个字符构成一组。</strong> （<code>rwx</code>）. 它们分别代表了文件所有者（<code>missing</code>），用户组（<code>users</code>） 以及其他所有人具有的权限。其中 <code>-</code> 表示该用户不具备相应的权限。从上面的信息来看，只有文件所有者可以修改（<code>w</code>），<code>missing</code> 文件夹 （例如，添加或删除文件夹中的文件）。为了进入某个文件夹，用户需要具备该文件夹以及其父文件夹的“搜索”权限（以“可执行”：<code>x</code>）权限表示。为了列出它的包含的内容，用户必须对该文件夹具备读权限（<code>r</code>）。对于文件来说，权限的意义也是类似的。注意，<code>/bin</code> 目录下的程序在最后一组，即表示所有人的用户组中，均包含 <code>x</code> 权限，也就是说任何人都可以执行这些程序。（r：read；w：write；x：execute）</p><p>在这个阶段，还有几个趁手的命令是您需要掌握的，例如 <strong><code>mv</code>（用于重命名或移动文件）</strong>、 <strong><code>cp</code>（拷贝文件）</strong>以及 <strong><code>mkdir</code>（新建文件夹）</strong>。</p><p>如果您想要知道关于程序参数、输入输出的信息，亦或是想要了解它们的工作方式，请试试 <code>man</code> 这个程序。它会接受一个程序名作为参数，然后将它的文档（用户手册）展现给您。注意，使用 <code>q</code> 可以退出该程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">missing:~$ man ls</span><br></pre></td></tr></table></figure><h5 id="如何改变权限？"><a href="#如何改变权限？" class="headerlink" title="如何改变权限？"></a>如何改变权限？</h5><p>1.使用chmod(change mode)命令,修改权限。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod u+r file.txt  // 给文件所有者添加读权限</span><br><span class="line">chmod g+w file.txt  // 给用户组添加写权限</span><br><span class="line">chmod o-x file.txt  // 禁止其他用户执行文件</span><br><span class="line">chmod -R u+rwx blog    //-R 选项会将我要修改的权限递归给目录中的所有文件和子目录</span><br></pre></td></tr></table></figure><p>2.右键选择“属性”-&gt;“安全”，在“安全”中修改user对文件的权限。</p><h2 id="在程序间创建连接"><a href="#在程序间创建连接" class="headerlink" title="在程序间创建连接"></a>在程序间创建连接</h2><p>在 shell 中，程序有两个主要的“流”：它们的输入流和输出流。 当程序尝试读取信息时，它们会从输入流中进行读取，当程序打印信息时，它们会将信息输出到输出流中。 通常，一个程序的输入输出流都是您的终端。也就是，您的键盘作为输入，显示器作为输出。 但是，我们也可以重定向这些流！</p><p>**最简单的重定向是 <code>&lt; file</code> 和 <code>&gt; file</code>**。这两个命令可以将程序的输入输出流分别重定向到文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">missing:~$ echo hello &gt; hello.txt</span><br><span class="line">missing:~$ cat hello.txt</span><br><span class="line">hello</span><br><span class="line">missing:~$ cat &lt; hello.txt</span><br><span class="line">hello</span><br><span class="line">missing:~$ cat &lt; hello.txt &gt; hello2.txt  //cat从hello.txt中读取内容后将内容输入到hello2.txt</span><br><span class="line">//如果hello2.txt中有内容，会被hello.txt完全覆盖！！</span><br><span class="line">missing:~$ cat hello2.txt</span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p><code>cat hello.txt</code> 和 <code>cat &lt; hello.txt</code> 这两个命令在 Linux 或 Unix 系统中都用于查看文件内容，但它们之间有一些区别。</p><ol><li><p><code>cat hello.txt</code>：这个命令会将 <code>hello.txt</code> 文件的内容输出到标准输出（通常是终端），使你可以查看文件的内容。<code>cat</code> 是 concatenate（连接）的缩写，它的主要作用是将文件内容连接在一起并输出到标准输出，通常用于显示文件内容。</p></li><li><p><code>cat &lt; hello.txt</code>：这个命令使用输入重定向 <code>&lt;</code>，将 <code>hello.txt</code> 文件的内容作为输入传递给 <code>cat</code> 命令。这样，<code>cat</code> 命令会从 <code>hello.txt</code> 文件中读取内容并将其输出到标准输出。</p></li></ol><p>主要区别在于输入来源的不同：</p><ul><li>在 <code>cat hello.txt</code> 中，<code>cat</code> 直接读取 <code>hello.txt</code> 文件的内容；</li><li>而在 <code>cat &lt; hello.txt</code> 中，<code>cat</code> 通过输入重定向符 <code>&lt;</code> 从 <code>hello.txt</code> 文件中读取内容。</li></ul><p>总体来说，这两个命令的功能都是用来显示文件内容，不同之处在于输入来源的方式不同。通常情况下，直接使用 <code>cat hello.txt</code> 就可以满足查看文件内容的需求。</p><p><strong>您还可以使用 <code>&gt;&gt;</code> 来向一个文件追加内容</strong>（echo “content” &gt;&gt; hello.txt）。使用管道（ <em>pipes</em> ），我们能够更好的利用文件重定向。 <strong><code>|</code> 操作符允许我们将一个程序的输出和另外一个程序的输入连接起来</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">missing:~$ ls -l / | tail -n1</span><br><span class="line">drwxr-xr-x 1 root  root  4096 Jun 20  2019 var</span><br><span class="line">missing:~$ curl --head --silent google.com | grep --ignore-case content-length | cut --delimiter=&#x27; &#x27; -f2</span><br><span class="line">219 </span><br><span class="line">//最终输出的结果是网页内容的长度，这里是 219。</span><br></pre></td></tr></table></figure><p>这个命令的作用是通过curl命令获取google.com的响应头信息，然后使用grep命令筛选出包含”content-length”（不区分大小写）的行，接着使用cut命令以空格为分隔符提取出第2个字段（即content-length的值）。</p><p>具体解释如下：</p><ul><li><code>curl --head --silent google.com</code>：使用curl命令向google.com发出HEAD请求，只获取响应头信息，同时不显示进度信息。</li><li><code>|</code>：管道符号，将curl命令的输出作为grep命令的输入。</li><li><code>grep --ignore-case content-length</code>：在curl的输出中查找包含”content-length”（不区分大小写）的行。</li><li><code>|</code>：再次使用管道符号，将grep命令的输出作为cut命令的输入。</li><li><code>cut --delimiter=&#39; &#39; -f2</code>：以空格为分隔符，提取出第2个字段，即content-length的值。</li></ul><p>所以，该命令的输出结果是219，表示google.com的响应头中的content-length的值为219。</p><h2 id="一个功能全面又强大的工具"><a href="#一个功能全面又强大的工具" class="headerlink" title="一个功能全面又强大的工具"></a>一个功能全面又强大的工具</h2><p>对于大多数的类 Unix 系统，有一类用户是非常特殊的，那就是：根用户（root user）。 您应该已经注意到了，在上面的输出结果中，<strong>根用户几乎不受任何限制，他可以创建、读取、更新和删除系统中的任何文件。</strong> 通常在我们并不会以根用户的身份直接登录系统，因为这样可能会因为某些错误的操作而破坏系统。 取而代之的是我们会在需要的时候<strong>使用 <code>sudo</code> 命令。顾名思义，它的作用是让您可以以 su（super user 或 root 的简写）的身份执行一些操作</strong>。 当您遇到拒绝访问（permission denied）的错误时，通常是因为此时您必须是根用户才能操作。然而，请再次确认您是真的要执行此操作。</p><p>有一件事情是您必须作为root用户才能做的，那就是向 <code>sysfs</code> 文件写入内容。系统被挂载在 <code>/sys</code> 下，<code>sysfs</code> 文件则暴露了一些内核（kernel）参数。 因此，您不需要借助任何专用的工具，就可以轻松地在运行期间配置系统内核。<strong>注意 Windows 和 macOS 没有这个文件</strong></p><p>例如，您笔记本电脑的屏幕亮度写在 <code>brightness</code> 文件中，它位于</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sys/class/backlight</span><br></pre></td></tr></table></figure><p>通过将数值写入该文件，我们可以改变屏幕的亮度。现在，蹦到您脑袋里的第一个想法可能是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo find -L /sys/class/backlight -maxdepth 2 -name &#x27;*brightness*&#x27;</span><br><span class="line">/sys/class/backlight/thinkpad_screen/brightness</span><br><span class="line">$ cd /sys/class/backlight/thinkpad_screen</span><br><span class="line">$ sudo echo 3 &gt; brightness  //在这个命令中，sudo 只应用于 echo 3 这部分命令，而 &gt; 操作符是由 shell 处理的，而不是由 sudo 处理的</span><br><span class="line">An error occurred while redirecting file &#x27;brightness&#x27;</span><br><span class="line">open: Permission denied</span><br></pre></td></tr></table></figure><p>出乎意料的是，我们还是得到了一个错误信息。毕竟，我们已经使用了 <code>sudo</code> 命令！关于 shell，有件事我们必须要知道。**<code>|</code>、<code>&gt;</code>、和 <code>&lt;</code> 是通过 shell 执行的，而不是被各个程序单独执行。** <code>echo</code> 等程序并不知道 <code>|</code> 的存在，它们只知道从自己的输入输出流中进行读写。 对于上面这种情况， <em>shell</em> (权限为您的当前用户) 在设置 <code>sudo echo</code> 前尝试打开 brightness 文件并写入，但是系统拒绝了 shell 的操作因为此时 shell 不是根用户。</p><p>明白这一点后，我们可以这样操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo 3 | sudo tee brightness</span><br></pre></td></tr></table></figure><p><strong>因为打开 <code>/sys</code> 文件的是 <code>tee</code> 这个程序，并且该程序以 <code>root</code> 权限在运行，因此操作可以进行。</strong> 这样您就可以在 <code>/sys</code> 中愉快地玩耍了，例如修改系统中各种LED的状态（路径可能会有所不同）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ echo 1 | sudo tee /sys/class/leds/input6::scrolllock/brightness</span><br></pre></td></tr></table></figure><p>ps: </p><ul><li><code>echo 3</code>：表示输出数字3。</li><li><code>|</code>：管道符号，将前一个命令的输出作为后一个命令的输入。</li><li><code>sudo</code>：以超级用户权限来执行后面的命令。</li><li><code>tee brightness</code>：将输入的内容同时输出到屏幕上和指定的文件brightness中。</li></ul><p>tee 是一个常用的命令行工具，用于<strong>从标准输入读取数据，并将其同时输出到标准输出</strong>（通常是终端屏幕）<strong>和一个或多个文件</strong>。tee 命令<strong>允许用户在命令行中查看输出的同时，将输出保存到文件中</strong>。</p><p>主要作用包括：</p><ol><li>从标准输入读取数据，并将数据输出到标准输出和一个或多个文件。</li><li>允许用户在命令执行过程中查看数据的同时，将数据保存到文件中，方便日后查看或分析。</li></ol><p>在使用 tee 命令时，常见的语法为：<code>command | tee file.txt</code>，这样可以将 <code>command</code> 命令的输出输出到终端并保存到 <code>file.txt</code> 文件中。</p><h1 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h1><p><a href="https://missing-semester-cn.github.io/missing-notes-and-solutions/2020/solutions//course-shell-solution">习题解答</a> 本课程中的每节课都包含一系列练习题。有些题目是有明确目的的，另外一些则是开放题，例如“尝试使用 X 和 Y”，我们强烈建议您一定要动手实践，用于尝试这些内容。 此外，我们没有为这些练习题提供答案。如果有任何困难，您可以发送邮件给我们并描述你已经做出的尝试，我们会设法帮您解答。</p><ol><li><p>本课程需要使用类Unix shell，例如 Bash 或 ZSH。如果您在 Linux 或者 MacOS 上面完成本课程的练习，则不需要做任何特殊的操作。如果您使用的是 Windows，则您不应该使用 cmd 或是 Powershell；您可以使用<a href="https://docs.microsoft.com/en-us/windows/wsl/">Windows Subsystem for Linux</a>或者是 Linux 虚拟机。使用<code>echo $SHELL</code>命令可以查看您的 shell 是否满足要求。如果打印结果为<code>/bin/bash</code>或<code>/usr/bin/zsh</code>则是可以的。</p></li><li><p>在 <code>/tmp</code> 下新建一个名为 <code>missing</code> 的文件夹。</p></li><li><p>用 <code>man</code> 查看程序 <code>touch</code> 的使用手册。</p></li><li><p>用 <code>touch</code> 在 <code>missing</code> 文件夹中新建一个叫 <code>semester</code> 的文件。</p></li><li><p>将以下内容一行一行地写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">semester</span><br></pre></td></tr></table></figure><p>文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">curl --head --silent https://missing.csail.mit.edu</span><br></pre></td></tr></table></figure><p>第一行可能有点棘手， <code>#</code> 在Bash中表示注释，而 <code>!</code> 即使被双引号（<code>&quot;</code>）包裹也具有特殊的含义。 单引号（<code>&#39;</code>）则不一样，此处利用这一点解决输入问题。更多信息请参考 <a href="https://www.gnu.org/software/bash/manual/html_node/Quoting.html">Bash quoting 手册</a></p></li><li><p>尝试执行这个文件。例如，将该脚本的路径（<code>./semester</code>）输入到您的shell中并回车。如果程序无法执行，请使用 <code>ls</code> 命令来获取信息并理解其不能执行的原因。</p></li><li><p>查看 <code>chmod</code> 的手册(例如，使用 <code>man chmod</code> 命令)</p></li><li><p>使用 <code>chmod</code> 命令改变权限，使 <code>./semester</code> 能够成功执行，不要使用 <code>sh semester</code> 来执行该程序。您的 shell 是如何知晓这个文件需要使用 <code>sh</code> 来解析呢？更多信息请参考：<a href="https://en.wikipedia.org/wiki/Shebang_(Unix)">shebang</a></p></li><li><p>使用 <code>|</code> 和 <code>&gt;</code> ，将 <code>semester</code> 文件输出的最后更改日期信息，写入主目录下的 <code>last-modified.txt</code> 的文件中</p></li><li><p>写一段命令来从 <code>/sys</code> 中获取笔记本的电量信息，或者台式机 CPU 的温度。注意：macOS 并没有 sysfs，所以 Mac 用户可以跳过这一题。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> missing semester </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的鸣谢暨我的第一篇博客！</title>
      <link href="/2024/03/07/%E6%88%91%E7%9A%84%E9%B8%A3%E8%B0%A2/"/>
      <url>/2024/03/07/%E6%88%91%E7%9A%84%E9%B8%A3%E8%B0%A2/</url>
      
        <content type="html"><![CDATA[<p>​2024年3月7日晚上10点许，对世界来说这只是一个普通的时刻，但这对我这个博客新手来说是无比奇妙的一刻！历经无数次的破防后，险些道心破碎的我终于搭建起来我人生中的第一个博客网站。管理员权限、本地仓库与git hub仓库无法同步、主题更换后网站404等等莫名其妙的问题，弄得我心力交瘁、焦头烂额，但是！所幸结果是好的：我理解了ssh秘钥的作用、拥有了我的第一个域名、对以后的学习路线有了更明确的规划。</p><p>​在我的第一篇博客下，我得感谢友人fbl对我的竭诚相助，感谢我自己不断推翻重来的耐心和我所参考过的各类推文和视频（有点官方了（⁄(⁄ ⁄•⁄ω⁄•⁄ ⁄)⁄）)！</p><p>​此后，我将在这里更新我的学习动态，不断完善和美化我的博客网站（虽然应该没几个人看!<img src="/2024/03/07/%E6%88%91%E7%9A%84%E9%B8%A3%E8%B0%A2/0044C4BC.png" alt="0044C4BC" style="zoom: 50%;">)。</p><p>​军理课写下的第一篇博客，仓促之下，有些乱七八糟<img src="/2024/03/07/%E6%88%91%E7%9A%84%E9%B8%A3%E8%B0%A2/00469AB5.png" alt="00469AB5" style="zoom:50%;">。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>音乐</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/catagories/index.html"/>
      <url>/catagories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
